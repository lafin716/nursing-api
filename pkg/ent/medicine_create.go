// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"nursing_api/pkg/ent/medicine"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// MedicineCreate is the builder for creating a Medicine entity.
type MedicineCreate struct {
	config
	mutation *MedicineMutation
	hooks    []Hook
}

// SetMedicineName sets the "medicine_name" field.
func (mc *MedicineCreate) SetMedicineName(s string) *MedicineCreate {
	mc.mutation.SetMedicineName(s)
	return mc
}

// SetItemSeq sets the "item_seq" field.
func (mc *MedicineCreate) SetItemSeq(s string) *MedicineCreate {
	mc.mutation.SetItemSeq(s)
	return mc
}

// SetCompanyName sets the "company_name" field.
func (mc *MedicineCreate) SetCompanyName(s string) *MedicineCreate {
	mc.mutation.SetCompanyName(s)
	return mc
}

// SetNillableCompanyName sets the "company_name" field if the given value is not nil.
func (mc *MedicineCreate) SetNillableCompanyName(s *string) *MedicineCreate {
	if s != nil {
		mc.SetCompanyName(*s)
	}
	return mc
}

// SetDescription sets the "description" field.
func (mc *MedicineCreate) SetDescription(s string) *MedicineCreate {
	mc.mutation.SetDescription(s)
	return mc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (mc *MedicineCreate) SetNillableDescription(s *string) *MedicineCreate {
	if s != nil {
		mc.SetDescription(*s)
	}
	return mc
}

// SetUsage sets the "usage" field.
func (mc *MedicineCreate) SetUsage(s string) *MedicineCreate {
	mc.mutation.SetUsage(s)
	return mc
}

// SetNillableUsage sets the "usage" field if the given value is not nil.
func (mc *MedicineCreate) SetNillableUsage(s *string) *MedicineCreate {
	if s != nil {
		mc.SetUsage(*s)
	}
	return mc
}

// SetEffect sets the "effect" field.
func (mc *MedicineCreate) SetEffect(s string) *MedicineCreate {
	mc.mutation.SetEffect(s)
	return mc
}

// SetNillableEffect sets the "effect" field if the given value is not nil.
func (mc *MedicineCreate) SetNillableEffect(s *string) *MedicineCreate {
	if s != nil {
		mc.SetEffect(*s)
	}
	return mc
}

// SetSideEffect sets the "side_effect" field.
func (mc *MedicineCreate) SetSideEffect(s string) *MedicineCreate {
	mc.mutation.SetSideEffect(s)
	return mc
}

// SetNillableSideEffect sets the "side_effect" field if the given value is not nil.
func (mc *MedicineCreate) SetNillableSideEffect(s *string) *MedicineCreate {
	if s != nil {
		mc.SetSideEffect(*s)
	}
	return mc
}

// SetCaution sets the "caution" field.
func (mc *MedicineCreate) SetCaution(s string) *MedicineCreate {
	mc.mutation.SetCaution(s)
	return mc
}

// SetNillableCaution sets the "caution" field if the given value is not nil.
func (mc *MedicineCreate) SetNillableCaution(s *string) *MedicineCreate {
	if s != nil {
		mc.SetCaution(*s)
	}
	return mc
}

// SetWarning sets the "warning" field.
func (mc *MedicineCreate) SetWarning(s string) *MedicineCreate {
	mc.mutation.SetWarning(s)
	return mc
}

// SetNillableWarning sets the "warning" field if the given value is not nil.
func (mc *MedicineCreate) SetNillableWarning(s *string) *MedicineCreate {
	if s != nil {
		mc.SetWarning(*s)
	}
	return mc
}

// SetInteraction sets the "interaction" field.
func (mc *MedicineCreate) SetInteraction(s string) *MedicineCreate {
	mc.mutation.SetInteraction(s)
	return mc
}

// SetNillableInteraction sets the "interaction" field if the given value is not nil.
func (mc *MedicineCreate) SetNillableInteraction(s *string) *MedicineCreate {
	if s != nil {
		mc.SetInteraction(*s)
	}
	return mc
}

// SetKeepMethod sets the "keep_method" field.
func (mc *MedicineCreate) SetKeepMethod(s string) *MedicineCreate {
	mc.mutation.SetKeepMethod(s)
	return mc
}

// SetNillableKeepMethod sets the "keep_method" field if the given value is not nil.
func (mc *MedicineCreate) SetNillableKeepMethod(s *string) *MedicineCreate {
	if s != nil {
		mc.SetKeepMethod(*s)
	}
	return mc
}

// SetAppearance sets the "appearance" field.
func (mc *MedicineCreate) SetAppearance(s string) *MedicineCreate {
	mc.mutation.SetAppearance(s)
	return mc
}

// SetNillableAppearance sets the "appearance" field if the given value is not nil.
func (mc *MedicineCreate) SetNillableAppearance(s *string) *MedicineCreate {
	if s != nil {
		mc.SetAppearance(*s)
	}
	return mc
}

// SetColorClass1 sets the "color_class1" field.
func (mc *MedicineCreate) SetColorClass1(s string) *MedicineCreate {
	mc.mutation.SetColorClass1(s)
	return mc
}

// SetNillableColorClass1 sets the "color_class1" field if the given value is not nil.
func (mc *MedicineCreate) SetNillableColorClass1(s *string) *MedicineCreate {
	if s != nil {
		mc.SetColorClass1(*s)
	}
	return mc
}

// SetColorClass2 sets the "color_class2" field.
func (mc *MedicineCreate) SetColorClass2(s string) *MedicineCreate {
	mc.mutation.SetColorClass2(s)
	return mc
}

// SetNillableColorClass2 sets the "color_class2" field if the given value is not nil.
func (mc *MedicineCreate) SetNillableColorClass2(s *string) *MedicineCreate {
	if s != nil {
		mc.SetColorClass2(*s)
	}
	return mc
}

// SetPillImage sets the "pill_image" field.
func (mc *MedicineCreate) SetPillImage(s string) *MedicineCreate {
	mc.mutation.SetPillImage(s)
	return mc
}

// SetNillablePillImage sets the "pill_image" field if the given value is not nil.
func (mc *MedicineCreate) SetNillablePillImage(s *string) *MedicineCreate {
	if s != nil {
		mc.SetPillImage(*s)
	}
	return mc
}

// SetClassName sets the "class_name" field.
func (mc *MedicineCreate) SetClassName(s string) *MedicineCreate {
	mc.mutation.SetClassName(s)
	return mc
}

// SetNillableClassName sets the "class_name" field if the given value is not nil.
func (mc *MedicineCreate) SetNillableClassName(s *string) *MedicineCreate {
	if s != nil {
		mc.SetClassName(*s)
	}
	return mc
}

// SetOtcName sets the "otc_name" field.
func (mc *MedicineCreate) SetOtcName(s string) *MedicineCreate {
	mc.mutation.SetOtcName(s)
	return mc
}

// SetNillableOtcName sets the "otc_name" field if the given value is not nil.
func (mc *MedicineCreate) SetNillableOtcName(s *string) *MedicineCreate {
	if s != nil {
		mc.SetOtcName(*s)
	}
	return mc
}

// SetFormCodeName sets the "form_code_name" field.
func (mc *MedicineCreate) SetFormCodeName(s string) *MedicineCreate {
	mc.mutation.SetFormCodeName(s)
	return mc
}

// SetNillableFormCodeName sets the "form_code_name" field if the given value is not nil.
func (mc *MedicineCreate) SetNillableFormCodeName(s *string) *MedicineCreate {
	if s != nil {
		mc.SetFormCodeName(*s)
	}
	return mc
}

// SetCreatedAt sets the "created_at" field.
func (mc *MedicineCreate) SetCreatedAt(t time.Time) *MedicineCreate {
	mc.mutation.SetCreatedAt(t)
	return mc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (mc *MedicineCreate) SetNillableCreatedAt(t *time.Time) *MedicineCreate {
	if t != nil {
		mc.SetCreatedAt(*t)
	}
	return mc
}

// SetUpdatedAt sets the "updated_at" field.
func (mc *MedicineCreate) SetUpdatedAt(t time.Time) *MedicineCreate {
	mc.mutation.SetUpdatedAt(t)
	return mc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (mc *MedicineCreate) SetNillableUpdatedAt(t *time.Time) *MedicineCreate {
	if t != nil {
		mc.SetUpdatedAt(*t)
	}
	return mc
}

// SetID sets the "id" field.
func (mc *MedicineCreate) SetID(u uuid.UUID) *MedicineCreate {
	mc.mutation.SetID(u)
	return mc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (mc *MedicineCreate) SetNillableID(u *uuid.UUID) *MedicineCreate {
	if u != nil {
		mc.SetID(*u)
	}
	return mc
}

// Mutation returns the MedicineMutation object of the builder.
func (mc *MedicineCreate) Mutation() *MedicineMutation {
	return mc.mutation
}

// Save creates the Medicine in the database.
func (mc *MedicineCreate) Save(ctx context.Context) (*Medicine, error) {
	mc.defaults()
	return withHooks(ctx, mc.sqlSave, mc.mutation, mc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (mc *MedicineCreate) SaveX(ctx context.Context) *Medicine {
	v, err := mc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mc *MedicineCreate) Exec(ctx context.Context) error {
	_, err := mc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mc *MedicineCreate) ExecX(ctx context.Context) {
	if err := mc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mc *MedicineCreate) defaults() {
	if _, ok := mc.mutation.CreatedAt(); !ok {
		v := medicine.DefaultCreatedAt()
		mc.mutation.SetCreatedAt(v)
	}
	if _, ok := mc.mutation.ID(); !ok {
		v := medicine.DefaultID()
		mc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mc *MedicineCreate) check() error {
	if _, ok := mc.mutation.MedicineName(); !ok {
		return &ValidationError{Name: "medicine_name", err: errors.New(`ent: missing required field "Medicine.medicine_name"`)}
	}
	if _, ok := mc.mutation.ItemSeq(); !ok {
		return &ValidationError{Name: "item_seq", err: errors.New(`ent: missing required field "Medicine.item_seq"`)}
	}
	if _, ok := mc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Medicine.created_at"`)}
	}
	return nil
}

func (mc *MedicineCreate) sqlSave(ctx context.Context) (*Medicine, error) {
	if err := mc.check(); err != nil {
		return nil, err
	}
	_node, _spec := mc.createSpec()
	if err := sqlgraph.CreateNode(ctx, mc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	mc.mutation.id = &_node.ID
	mc.mutation.done = true
	return _node, nil
}

func (mc *MedicineCreate) createSpec() (*Medicine, *sqlgraph.CreateSpec) {
	var (
		_node = &Medicine{config: mc.config}
		_spec = sqlgraph.NewCreateSpec(medicine.Table, sqlgraph.NewFieldSpec(medicine.FieldID, field.TypeUUID))
	)
	if id, ok := mc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := mc.mutation.MedicineName(); ok {
		_spec.SetField(medicine.FieldMedicineName, field.TypeString, value)
		_node.MedicineName = value
	}
	if value, ok := mc.mutation.ItemSeq(); ok {
		_spec.SetField(medicine.FieldItemSeq, field.TypeString, value)
		_node.ItemSeq = value
	}
	if value, ok := mc.mutation.CompanyName(); ok {
		_spec.SetField(medicine.FieldCompanyName, field.TypeString, value)
		_node.CompanyName = value
	}
	if value, ok := mc.mutation.Description(); ok {
		_spec.SetField(medicine.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := mc.mutation.Usage(); ok {
		_spec.SetField(medicine.FieldUsage, field.TypeString, value)
		_node.Usage = value
	}
	if value, ok := mc.mutation.Effect(); ok {
		_spec.SetField(medicine.FieldEffect, field.TypeString, value)
		_node.Effect = value
	}
	if value, ok := mc.mutation.SideEffect(); ok {
		_spec.SetField(medicine.FieldSideEffect, field.TypeString, value)
		_node.SideEffect = value
	}
	if value, ok := mc.mutation.Caution(); ok {
		_spec.SetField(medicine.FieldCaution, field.TypeString, value)
		_node.Caution = value
	}
	if value, ok := mc.mutation.Warning(); ok {
		_spec.SetField(medicine.FieldWarning, field.TypeString, value)
		_node.Warning = value
	}
	if value, ok := mc.mutation.Interaction(); ok {
		_spec.SetField(medicine.FieldInteraction, field.TypeString, value)
		_node.Interaction = value
	}
	if value, ok := mc.mutation.KeepMethod(); ok {
		_spec.SetField(medicine.FieldKeepMethod, field.TypeString, value)
		_node.KeepMethod = value
	}
	if value, ok := mc.mutation.Appearance(); ok {
		_spec.SetField(medicine.FieldAppearance, field.TypeString, value)
		_node.Appearance = value
	}
	if value, ok := mc.mutation.ColorClass1(); ok {
		_spec.SetField(medicine.FieldColorClass1, field.TypeString, value)
		_node.ColorClass1 = value
	}
	if value, ok := mc.mutation.ColorClass2(); ok {
		_spec.SetField(medicine.FieldColorClass2, field.TypeString, value)
		_node.ColorClass2 = value
	}
	if value, ok := mc.mutation.PillImage(); ok {
		_spec.SetField(medicine.FieldPillImage, field.TypeString, value)
		_node.PillImage = value
	}
	if value, ok := mc.mutation.ClassName(); ok {
		_spec.SetField(medicine.FieldClassName, field.TypeString, value)
		_node.ClassName = value
	}
	if value, ok := mc.mutation.OtcName(); ok {
		_spec.SetField(medicine.FieldOtcName, field.TypeString, value)
		_node.OtcName = value
	}
	if value, ok := mc.mutation.FormCodeName(); ok {
		_spec.SetField(medicine.FieldFormCodeName, field.TypeString, value)
		_node.FormCodeName = value
	}
	if value, ok := mc.mutation.CreatedAt(); ok {
		_spec.SetField(medicine.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := mc.mutation.UpdatedAt(); ok {
		_spec.SetField(medicine.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	return _node, _spec
}

// MedicineCreateBulk is the builder for creating many Medicine entities in bulk.
type MedicineCreateBulk struct {
	config
	err      error
	builders []*MedicineCreate
}

// Save creates the Medicine entities in the database.
func (mcb *MedicineCreateBulk) Save(ctx context.Context) ([]*Medicine, error) {
	if mcb.err != nil {
		return nil, mcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(mcb.builders))
	nodes := make([]*Medicine, len(mcb.builders))
	mutators := make([]Mutator, len(mcb.builders))
	for i := range mcb.builders {
		func(i int, root context.Context) {
			builder := mcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*MedicineMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, mcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, mcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, mcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (mcb *MedicineCreateBulk) SaveX(ctx context.Context) []*Medicine {
	v, err := mcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mcb *MedicineCreateBulk) Exec(ctx context.Context) error {
	_, err := mcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mcb *MedicineCreateBulk) ExecX(ctx context.Context) {
	if err := mcb.Exec(ctx); err != nil {
		panic(err)
	}
}
