// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"nursing_api/pkg/ent/predicate"
	"nursing_api/pkg/ent/prescription"
	"nursing_api/pkg/ent/prescriptionitem"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// PrescriptionUpdate is the builder for updating Prescription entities.
type PrescriptionUpdate struct {
	config
	hooks    []Hook
	mutation *PrescriptionMutation
}

// Where appends a list predicates to the PrescriptionUpdate builder.
func (pu *PrescriptionUpdate) Where(ps ...predicate.Prescription) *PrescriptionUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetUserID sets the "user_id" field.
func (pu *PrescriptionUpdate) SetUserID(u uuid.UUID) *PrescriptionUpdate {
	pu.mutation.SetUserID(u)
	return pu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (pu *PrescriptionUpdate) SetNillableUserID(u *uuid.UUID) *PrescriptionUpdate {
	if u != nil {
		pu.SetUserID(*u)
	}
	return pu
}

// SetPrescriptionName sets the "prescription_name" field.
func (pu *PrescriptionUpdate) SetPrescriptionName(s string) *PrescriptionUpdate {
	pu.mutation.SetPrescriptionName(s)
	return pu
}

// SetNillablePrescriptionName sets the "prescription_name" field if the given value is not nil.
func (pu *PrescriptionUpdate) SetNillablePrescriptionName(s *string) *PrescriptionUpdate {
	if s != nil {
		pu.SetPrescriptionName(*s)
	}
	return pu
}

// ClearPrescriptionName clears the value of the "prescription_name" field.
func (pu *PrescriptionUpdate) ClearPrescriptionName() *PrescriptionUpdate {
	pu.mutation.ClearPrescriptionName()
	return pu
}

// SetHospitalName sets the "hospital_name" field.
func (pu *PrescriptionUpdate) SetHospitalName(s string) *PrescriptionUpdate {
	pu.mutation.SetHospitalName(s)
	return pu
}

// SetNillableHospitalName sets the "hospital_name" field if the given value is not nil.
func (pu *PrescriptionUpdate) SetNillableHospitalName(s *string) *PrescriptionUpdate {
	if s != nil {
		pu.SetHospitalName(*s)
	}
	return pu
}

// ClearHospitalName clears the value of the "hospital_name" field.
func (pu *PrescriptionUpdate) ClearHospitalName() *PrescriptionUpdate {
	pu.mutation.ClearHospitalName()
	return pu
}

// SetTakeDays sets the "take_days" field.
func (pu *PrescriptionUpdate) SetTakeDays(i int) *PrescriptionUpdate {
	pu.mutation.ResetTakeDays()
	pu.mutation.SetTakeDays(i)
	return pu
}

// SetNillableTakeDays sets the "take_days" field if the given value is not nil.
func (pu *PrescriptionUpdate) SetNillableTakeDays(i *int) *PrescriptionUpdate {
	if i != nil {
		pu.SetTakeDays(*i)
	}
	return pu
}

// AddTakeDays adds i to the "take_days" field.
func (pu *PrescriptionUpdate) AddTakeDays(i int) *PrescriptionUpdate {
	pu.mutation.AddTakeDays(i)
	return pu
}

// SetStartedAt sets the "started_at" field.
func (pu *PrescriptionUpdate) SetStartedAt(t time.Time) *PrescriptionUpdate {
	pu.mutation.SetStartedAt(t)
	return pu
}

// SetNillableStartedAt sets the "started_at" field if the given value is not nil.
func (pu *PrescriptionUpdate) SetNillableStartedAt(t *time.Time) *PrescriptionUpdate {
	if t != nil {
		pu.SetStartedAt(*t)
	}
	return pu
}

// ClearStartedAt clears the value of the "started_at" field.
func (pu *PrescriptionUpdate) ClearStartedAt() *PrescriptionUpdate {
	pu.mutation.ClearStartedAt()
	return pu
}

// SetFinishedAt sets the "finished_at" field.
func (pu *PrescriptionUpdate) SetFinishedAt(t time.Time) *PrescriptionUpdate {
	pu.mutation.SetFinishedAt(t)
	return pu
}

// SetNillableFinishedAt sets the "finished_at" field if the given value is not nil.
func (pu *PrescriptionUpdate) SetNillableFinishedAt(t *time.Time) *PrescriptionUpdate {
	if t != nil {
		pu.SetFinishedAt(*t)
	}
	return pu
}

// ClearFinishedAt clears the value of the "finished_at" field.
func (pu *PrescriptionUpdate) ClearFinishedAt() *PrescriptionUpdate {
	pu.mutation.ClearFinishedAt()
	return pu
}

// SetCreatedAt sets the "created_at" field.
func (pu *PrescriptionUpdate) SetCreatedAt(t time.Time) *PrescriptionUpdate {
	pu.mutation.SetCreatedAt(t)
	return pu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pu *PrescriptionUpdate) SetNillableCreatedAt(t *time.Time) *PrescriptionUpdate {
	if t != nil {
		pu.SetCreatedAt(*t)
	}
	return pu
}

// SetUpdatedAt sets the "updated_at" field.
func (pu *PrescriptionUpdate) SetUpdatedAt(t time.Time) *PrescriptionUpdate {
	pu.mutation.SetUpdatedAt(t)
	return pu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (pu *PrescriptionUpdate) SetNillableUpdatedAt(t *time.Time) *PrescriptionUpdate {
	if t != nil {
		pu.SetUpdatedAt(*t)
	}
	return pu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (pu *PrescriptionUpdate) ClearUpdatedAt() *PrescriptionUpdate {
	pu.mutation.ClearUpdatedAt()
	return pu
}

// AddPrescriptionItemIDs adds the "prescription_items" edge to the PrescriptionItem entity by IDs.
func (pu *PrescriptionUpdate) AddPrescriptionItemIDs(ids ...uuid.UUID) *PrescriptionUpdate {
	pu.mutation.AddPrescriptionItemIDs(ids...)
	return pu
}

// AddPrescriptionItems adds the "prescription_items" edges to the PrescriptionItem entity.
func (pu *PrescriptionUpdate) AddPrescriptionItems(p ...*PrescriptionItem) *PrescriptionUpdate {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.AddPrescriptionItemIDs(ids...)
}

// Mutation returns the PrescriptionMutation object of the builder.
func (pu *PrescriptionUpdate) Mutation() *PrescriptionMutation {
	return pu.mutation
}

// ClearPrescriptionItems clears all "prescription_items" edges to the PrescriptionItem entity.
func (pu *PrescriptionUpdate) ClearPrescriptionItems() *PrescriptionUpdate {
	pu.mutation.ClearPrescriptionItems()
	return pu
}

// RemovePrescriptionItemIDs removes the "prescription_items" edge to PrescriptionItem entities by IDs.
func (pu *PrescriptionUpdate) RemovePrescriptionItemIDs(ids ...uuid.UUID) *PrescriptionUpdate {
	pu.mutation.RemovePrescriptionItemIDs(ids...)
	return pu
}

// RemovePrescriptionItems removes "prescription_items" edges to PrescriptionItem entities.
func (pu *PrescriptionUpdate) RemovePrescriptionItems(p ...*PrescriptionItem) *PrescriptionUpdate {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.RemovePrescriptionItemIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *PrescriptionUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, pu.sqlSave, pu.mutation, pu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pu *PrescriptionUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *PrescriptionUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *PrescriptionUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (pu *PrescriptionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(prescription.Table, prescription.Columns, sqlgraph.NewFieldSpec(prescription.FieldID, field.TypeUUID))
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.UserID(); ok {
		_spec.SetField(prescription.FieldUserID, field.TypeUUID, value)
	}
	if value, ok := pu.mutation.PrescriptionName(); ok {
		_spec.SetField(prescription.FieldPrescriptionName, field.TypeString, value)
	}
	if pu.mutation.PrescriptionNameCleared() {
		_spec.ClearField(prescription.FieldPrescriptionName, field.TypeString)
	}
	if value, ok := pu.mutation.HospitalName(); ok {
		_spec.SetField(prescription.FieldHospitalName, field.TypeString, value)
	}
	if pu.mutation.HospitalNameCleared() {
		_spec.ClearField(prescription.FieldHospitalName, field.TypeString)
	}
	if value, ok := pu.mutation.TakeDays(); ok {
		_spec.SetField(prescription.FieldTakeDays, field.TypeInt, value)
	}
	if value, ok := pu.mutation.AddedTakeDays(); ok {
		_spec.AddField(prescription.FieldTakeDays, field.TypeInt, value)
	}
	if value, ok := pu.mutation.StartedAt(); ok {
		_spec.SetField(prescription.FieldStartedAt, field.TypeTime, value)
	}
	if pu.mutation.StartedAtCleared() {
		_spec.ClearField(prescription.FieldStartedAt, field.TypeTime)
	}
	if value, ok := pu.mutation.FinishedAt(); ok {
		_spec.SetField(prescription.FieldFinishedAt, field.TypeTime, value)
	}
	if pu.mutation.FinishedAtCleared() {
		_spec.ClearField(prescription.FieldFinishedAt, field.TypeTime)
	}
	if value, ok := pu.mutation.CreatedAt(); ok {
		_spec.SetField(prescription.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := pu.mutation.UpdatedAt(); ok {
		_spec.SetField(prescription.FieldUpdatedAt, field.TypeTime, value)
	}
	if pu.mutation.UpdatedAtCleared() {
		_spec.ClearField(prescription.FieldUpdatedAt, field.TypeTime)
	}
	if pu.mutation.PrescriptionItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   prescription.PrescriptionItemsTable,
			Columns: []string{prescription.PrescriptionItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(prescriptionitem.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedPrescriptionItemsIDs(); len(nodes) > 0 && !pu.mutation.PrescriptionItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   prescription.PrescriptionItemsTable,
			Columns: []string{prescription.PrescriptionItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(prescriptionitem.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.PrescriptionItemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   prescription.PrescriptionItemsTable,
			Columns: []string{prescription.PrescriptionItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(prescriptionitem.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{prescription.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pu.mutation.done = true
	return n, nil
}

// PrescriptionUpdateOne is the builder for updating a single Prescription entity.
type PrescriptionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PrescriptionMutation
}

// SetUserID sets the "user_id" field.
func (puo *PrescriptionUpdateOne) SetUserID(u uuid.UUID) *PrescriptionUpdateOne {
	puo.mutation.SetUserID(u)
	return puo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (puo *PrescriptionUpdateOne) SetNillableUserID(u *uuid.UUID) *PrescriptionUpdateOne {
	if u != nil {
		puo.SetUserID(*u)
	}
	return puo
}

// SetPrescriptionName sets the "prescription_name" field.
func (puo *PrescriptionUpdateOne) SetPrescriptionName(s string) *PrescriptionUpdateOne {
	puo.mutation.SetPrescriptionName(s)
	return puo
}

// SetNillablePrescriptionName sets the "prescription_name" field if the given value is not nil.
func (puo *PrescriptionUpdateOne) SetNillablePrescriptionName(s *string) *PrescriptionUpdateOne {
	if s != nil {
		puo.SetPrescriptionName(*s)
	}
	return puo
}

// ClearPrescriptionName clears the value of the "prescription_name" field.
func (puo *PrescriptionUpdateOne) ClearPrescriptionName() *PrescriptionUpdateOne {
	puo.mutation.ClearPrescriptionName()
	return puo
}

// SetHospitalName sets the "hospital_name" field.
func (puo *PrescriptionUpdateOne) SetHospitalName(s string) *PrescriptionUpdateOne {
	puo.mutation.SetHospitalName(s)
	return puo
}

// SetNillableHospitalName sets the "hospital_name" field if the given value is not nil.
func (puo *PrescriptionUpdateOne) SetNillableHospitalName(s *string) *PrescriptionUpdateOne {
	if s != nil {
		puo.SetHospitalName(*s)
	}
	return puo
}

// ClearHospitalName clears the value of the "hospital_name" field.
func (puo *PrescriptionUpdateOne) ClearHospitalName() *PrescriptionUpdateOne {
	puo.mutation.ClearHospitalName()
	return puo
}

// SetTakeDays sets the "take_days" field.
func (puo *PrescriptionUpdateOne) SetTakeDays(i int) *PrescriptionUpdateOne {
	puo.mutation.ResetTakeDays()
	puo.mutation.SetTakeDays(i)
	return puo
}

// SetNillableTakeDays sets the "take_days" field if the given value is not nil.
func (puo *PrescriptionUpdateOne) SetNillableTakeDays(i *int) *PrescriptionUpdateOne {
	if i != nil {
		puo.SetTakeDays(*i)
	}
	return puo
}

// AddTakeDays adds i to the "take_days" field.
func (puo *PrescriptionUpdateOne) AddTakeDays(i int) *PrescriptionUpdateOne {
	puo.mutation.AddTakeDays(i)
	return puo
}

// SetStartedAt sets the "started_at" field.
func (puo *PrescriptionUpdateOne) SetStartedAt(t time.Time) *PrescriptionUpdateOne {
	puo.mutation.SetStartedAt(t)
	return puo
}

// SetNillableStartedAt sets the "started_at" field if the given value is not nil.
func (puo *PrescriptionUpdateOne) SetNillableStartedAt(t *time.Time) *PrescriptionUpdateOne {
	if t != nil {
		puo.SetStartedAt(*t)
	}
	return puo
}

// ClearStartedAt clears the value of the "started_at" field.
func (puo *PrescriptionUpdateOne) ClearStartedAt() *PrescriptionUpdateOne {
	puo.mutation.ClearStartedAt()
	return puo
}

// SetFinishedAt sets the "finished_at" field.
func (puo *PrescriptionUpdateOne) SetFinishedAt(t time.Time) *PrescriptionUpdateOne {
	puo.mutation.SetFinishedAt(t)
	return puo
}

// SetNillableFinishedAt sets the "finished_at" field if the given value is not nil.
func (puo *PrescriptionUpdateOne) SetNillableFinishedAt(t *time.Time) *PrescriptionUpdateOne {
	if t != nil {
		puo.SetFinishedAt(*t)
	}
	return puo
}

// ClearFinishedAt clears the value of the "finished_at" field.
func (puo *PrescriptionUpdateOne) ClearFinishedAt() *PrescriptionUpdateOne {
	puo.mutation.ClearFinishedAt()
	return puo
}

// SetCreatedAt sets the "created_at" field.
func (puo *PrescriptionUpdateOne) SetCreatedAt(t time.Time) *PrescriptionUpdateOne {
	puo.mutation.SetCreatedAt(t)
	return puo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (puo *PrescriptionUpdateOne) SetNillableCreatedAt(t *time.Time) *PrescriptionUpdateOne {
	if t != nil {
		puo.SetCreatedAt(*t)
	}
	return puo
}

// SetUpdatedAt sets the "updated_at" field.
func (puo *PrescriptionUpdateOne) SetUpdatedAt(t time.Time) *PrescriptionUpdateOne {
	puo.mutation.SetUpdatedAt(t)
	return puo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (puo *PrescriptionUpdateOne) SetNillableUpdatedAt(t *time.Time) *PrescriptionUpdateOne {
	if t != nil {
		puo.SetUpdatedAt(*t)
	}
	return puo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (puo *PrescriptionUpdateOne) ClearUpdatedAt() *PrescriptionUpdateOne {
	puo.mutation.ClearUpdatedAt()
	return puo
}

// AddPrescriptionItemIDs adds the "prescription_items" edge to the PrescriptionItem entity by IDs.
func (puo *PrescriptionUpdateOne) AddPrescriptionItemIDs(ids ...uuid.UUID) *PrescriptionUpdateOne {
	puo.mutation.AddPrescriptionItemIDs(ids...)
	return puo
}

// AddPrescriptionItems adds the "prescription_items" edges to the PrescriptionItem entity.
func (puo *PrescriptionUpdateOne) AddPrescriptionItems(p ...*PrescriptionItem) *PrescriptionUpdateOne {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.AddPrescriptionItemIDs(ids...)
}

// Mutation returns the PrescriptionMutation object of the builder.
func (puo *PrescriptionUpdateOne) Mutation() *PrescriptionMutation {
	return puo.mutation
}

// ClearPrescriptionItems clears all "prescription_items" edges to the PrescriptionItem entity.
func (puo *PrescriptionUpdateOne) ClearPrescriptionItems() *PrescriptionUpdateOne {
	puo.mutation.ClearPrescriptionItems()
	return puo
}

// RemovePrescriptionItemIDs removes the "prescription_items" edge to PrescriptionItem entities by IDs.
func (puo *PrescriptionUpdateOne) RemovePrescriptionItemIDs(ids ...uuid.UUID) *PrescriptionUpdateOne {
	puo.mutation.RemovePrescriptionItemIDs(ids...)
	return puo
}

// RemovePrescriptionItems removes "prescription_items" edges to PrescriptionItem entities.
func (puo *PrescriptionUpdateOne) RemovePrescriptionItems(p ...*PrescriptionItem) *PrescriptionUpdateOne {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.RemovePrescriptionItemIDs(ids...)
}

// Where appends a list predicates to the PrescriptionUpdate builder.
func (puo *PrescriptionUpdateOne) Where(ps ...predicate.Prescription) *PrescriptionUpdateOne {
	puo.mutation.Where(ps...)
	return puo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *PrescriptionUpdateOne) Select(field string, fields ...string) *PrescriptionUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Prescription entity.
func (puo *PrescriptionUpdateOne) Save(ctx context.Context) (*Prescription, error) {
	return withHooks(ctx, puo.sqlSave, puo.mutation, puo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (puo *PrescriptionUpdateOne) SaveX(ctx context.Context) *Prescription {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *PrescriptionUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *PrescriptionUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (puo *PrescriptionUpdateOne) sqlSave(ctx context.Context) (_node *Prescription, err error) {
	_spec := sqlgraph.NewUpdateSpec(prescription.Table, prescription.Columns, sqlgraph.NewFieldSpec(prescription.FieldID, field.TypeUUID))
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Prescription.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, prescription.FieldID)
		for _, f := range fields {
			if !prescription.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != prescription.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.UserID(); ok {
		_spec.SetField(prescription.FieldUserID, field.TypeUUID, value)
	}
	if value, ok := puo.mutation.PrescriptionName(); ok {
		_spec.SetField(prescription.FieldPrescriptionName, field.TypeString, value)
	}
	if puo.mutation.PrescriptionNameCleared() {
		_spec.ClearField(prescription.FieldPrescriptionName, field.TypeString)
	}
	if value, ok := puo.mutation.HospitalName(); ok {
		_spec.SetField(prescription.FieldHospitalName, field.TypeString, value)
	}
	if puo.mutation.HospitalNameCleared() {
		_spec.ClearField(prescription.FieldHospitalName, field.TypeString)
	}
	if value, ok := puo.mutation.TakeDays(); ok {
		_spec.SetField(prescription.FieldTakeDays, field.TypeInt, value)
	}
	if value, ok := puo.mutation.AddedTakeDays(); ok {
		_spec.AddField(prescription.FieldTakeDays, field.TypeInt, value)
	}
	if value, ok := puo.mutation.StartedAt(); ok {
		_spec.SetField(prescription.FieldStartedAt, field.TypeTime, value)
	}
	if puo.mutation.StartedAtCleared() {
		_spec.ClearField(prescription.FieldStartedAt, field.TypeTime)
	}
	if value, ok := puo.mutation.FinishedAt(); ok {
		_spec.SetField(prescription.FieldFinishedAt, field.TypeTime, value)
	}
	if puo.mutation.FinishedAtCleared() {
		_spec.ClearField(prescription.FieldFinishedAt, field.TypeTime)
	}
	if value, ok := puo.mutation.CreatedAt(); ok {
		_spec.SetField(prescription.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := puo.mutation.UpdatedAt(); ok {
		_spec.SetField(prescription.FieldUpdatedAt, field.TypeTime, value)
	}
	if puo.mutation.UpdatedAtCleared() {
		_spec.ClearField(prescription.FieldUpdatedAt, field.TypeTime)
	}
	if puo.mutation.PrescriptionItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   prescription.PrescriptionItemsTable,
			Columns: []string{prescription.PrescriptionItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(prescriptionitem.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedPrescriptionItemsIDs(); len(nodes) > 0 && !puo.mutation.PrescriptionItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   prescription.PrescriptionItemsTable,
			Columns: []string{prescription.PrescriptionItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(prescriptionitem.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.PrescriptionItemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   prescription.PrescriptionItemsTable,
			Columns: []string{prescription.PrescriptionItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(prescriptionitem.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Prescription{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{prescription.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	puo.mutation.done = true
	return _node, nil
}
