// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"
	"reflect"

	"nursing_api/pkg/ent/migrate"

	"nursing_api/pkg/ent/medicine"
	"nursing_api/pkg/ent/prescription"
	"nursing_api/pkg/ent/prescriptionitem"
	"nursing_api/pkg/ent/takehistory"
	"nursing_api/pkg/ent/takehistoryitem"
	"nursing_api/pkg/ent/token"
	"nursing_api/pkg/ent/user"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Medicine is the client for interacting with the Medicine builders.
	Medicine *MedicineClient
	// Prescription is the client for interacting with the Prescription builders.
	Prescription *PrescriptionClient
	// PrescriptionItem is the client for interacting with the PrescriptionItem builders.
	PrescriptionItem *PrescriptionItemClient
	// TakeHistory is the client for interacting with the TakeHistory builders.
	TakeHistory *TakeHistoryClient
	// TakeHistoryItem is the client for interacting with the TakeHistoryItem builders.
	TakeHistoryItem *TakeHistoryItemClient
	// Token is the client for interacting with the Token builders.
	Token *TokenClient
	// User is the client for interacting with the User builders.
	User *UserClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	client := &Client{config: newConfig(opts...)}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Medicine = NewMedicineClient(c.config)
	c.Prescription = NewPrescriptionClient(c.config)
	c.PrescriptionItem = NewPrescriptionItemClient(c.config)
	c.TakeHistory = NewTakeHistoryClient(c.config)
	c.TakeHistoryItem = NewTakeHistoryItemClient(c.config)
	c.Token = NewTokenClient(c.config)
	c.User = NewUserClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// newConfig creates a new config for the client.
func newConfig(opts ...Option) config {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	return cfg
}

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// ErrTxStarted is returned when trying to start a new transaction from a transactional client.
var ErrTxStarted = errors.New("ent: cannot start a transaction within a transaction")

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, ErrTxStarted
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:              ctx,
		config:           cfg,
		Medicine:         NewMedicineClient(cfg),
		Prescription:     NewPrescriptionClient(cfg),
		PrescriptionItem: NewPrescriptionItemClient(cfg),
		TakeHistory:      NewTakeHistoryClient(cfg),
		TakeHistoryItem:  NewTakeHistoryItemClient(cfg),
		Token:            NewTokenClient(cfg),
		User:             NewUserClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:              ctx,
		config:           cfg,
		Medicine:         NewMedicineClient(cfg),
		Prescription:     NewPrescriptionClient(cfg),
		PrescriptionItem: NewPrescriptionItemClient(cfg),
		TakeHistory:      NewTakeHistoryClient(cfg),
		TakeHistoryItem:  NewTakeHistoryItemClient(cfg),
		Token:            NewTokenClient(cfg),
		User:             NewUserClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Medicine.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	for _, n := range []interface{ Use(...Hook) }{
		c.Medicine, c.Prescription, c.PrescriptionItem, c.TakeHistory,
		c.TakeHistoryItem, c.Token, c.User,
	} {
		n.Use(hooks...)
	}
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	for _, n := range []interface{ Intercept(...Interceptor) }{
		c.Medicine, c.Prescription, c.PrescriptionItem, c.TakeHistory,
		c.TakeHistoryItem, c.Token, c.User,
	} {
		n.Intercept(interceptors...)
	}
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *MedicineMutation:
		return c.Medicine.mutate(ctx, m)
	case *PrescriptionMutation:
		return c.Prescription.mutate(ctx, m)
	case *PrescriptionItemMutation:
		return c.PrescriptionItem.mutate(ctx, m)
	case *TakeHistoryMutation:
		return c.TakeHistory.mutate(ctx, m)
	case *TakeHistoryItemMutation:
		return c.TakeHistoryItem.mutate(ctx, m)
	case *TokenMutation:
		return c.Token.mutate(ctx, m)
	case *UserMutation:
		return c.User.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// MedicineClient is a client for the Medicine schema.
type MedicineClient struct {
	config
}

// NewMedicineClient returns a client for the Medicine from the given config.
func NewMedicineClient(c config) *MedicineClient {
	return &MedicineClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `medicine.Hooks(f(g(h())))`.
func (c *MedicineClient) Use(hooks ...Hook) {
	c.hooks.Medicine = append(c.hooks.Medicine, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `medicine.Intercept(f(g(h())))`.
func (c *MedicineClient) Intercept(interceptors ...Interceptor) {
	c.inters.Medicine = append(c.inters.Medicine, interceptors...)
}

// Create returns a builder for creating a Medicine entity.
func (c *MedicineClient) Create() *MedicineCreate {
	mutation := newMedicineMutation(c.config, OpCreate)
	return &MedicineCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Medicine entities.
func (c *MedicineClient) CreateBulk(builders ...*MedicineCreate) *MedicineCreateBulk {
	return &MedicineCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *MedicineClient) MapCreateBulk(slice any, setFunc func(*MedicineCreate, int)) *MedicineCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &MedicineCreateBulk{err: fmt.Errorf("calling to MedicineClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*MedicineCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &MedicineCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Medicine.
func (c *MedicineClient) Update() *MedicineUpdate {
	mutation := newMedicineMutation(c.config, OpUpdate)
	return &MedicineUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *MedicineClient) UpdateOne(m *Medicine) *MedicineUpdateOne {
	mutation := newMedicineMutation(c.config, OpUpdateOne, withMedicine(m))
	return &MedicineUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *MedicineClient) UpdateOneID(id uuid.UUID) *MedicineUpdateOne {
	mutation := newMedicineMutation(c.config, OpUpdateOne, withMedicineID(id))
	return &MedicineUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Medicine.
func (c *MedicineClient) Delete() *MedicineDelete {
	mutation := newMedicineMutation(c.config, OpDelete)
	return &MedicineDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *MedicineClient) DeleteOne(m *Medicine) *MedicineDeleteOne {
	return c.DeleteOneID(m.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *MedicineClient) DeleteOneID(id uuid.UUID) *MedicineDeleteOne {
	builder := c.Delete().Where(medicine.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &MedicineDeleteOne{builder}
}

// Query returns a query builder for Medicine.
func (c *MedicineClient) Query() *MedicineQuery {
	return &MedicineQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeMedicine},
		inters: c.Interceptors(),
	}
}

// Get returns a Medicine entity by its id.
func (c *MedicineClient) Get(ctx context.Context, id uuid.UUID) (*Medicine, error) {
	return c.Query().Where(medicine.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *MedicineClient) GetX(ctx context.Context, id uuid.UUID) *Medicine {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *MedicineClient) Hooks() []Hook {
	return c.hooks.Medicine
}

// Interceptors returns the client interceptors.
func (c *MedicineClient) Interceptors() []Interceptor {
	return c.inters.Medicine
}

func (c *MedicineClient) mutate(ctx context.Context, m *MedicineMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&MedicineCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&MedicineUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&MedicineUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&MedicineDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Medicine mutation op: %q", m.Op())
	}
}

// PrescriptionClient is a client for the Prescription schema.
type PrescriptionClient struct {
	config
}

// NewPrescriptionClient returns a client for the Prescription from the given config.
func NewPrescriptionClient(c config) *PrescriptionClient {
	return &PrescriptionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `prescription.Hooks(f(g(h())))`.
func (c *PrescriptionClient) Use(hooks ...Hook) {
	c.hooks.Prescription = append(c.hooks.Prescription, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `prescription.Intercept(f(g(h())))`.
func (c *PrescriptionClient) Intercept(interceptors ...Interceptor) {
	c.inters.Prescription = append(c.inters.Prescription, interceptors...)
}

// Create returns a builder for creating a Prescription entity.
func (c *PrescriptionClient) Create() *PrescriptionCreate {
	mutation := newPrescriptionMutation(c.config, OpCreate)
	return &PrescriptionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Prescription entities.
func (c *PrescriptionClient) CreateBulk(builders ...*PrescriptionCreate) *PrescriptionCreateBulk {
	return &PrescriptionCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *PrescriptionClient) MapCreateBulk(slice any, setFunc func(*PrescriptionCreate, int)) *PrescriptionCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &PrescriptionCreateBulk{err: fmt.Errorf("calling to PrescriptionClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*PrescriptionCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &PrescriptionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Prescription.
func (c *PrescriptionClient) Update() *PrescriptionUpdate {
	mutation := newPrescriptionMutation(c.config, OpUpdate)
	return &PrescriptionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PrescriptionClient) UpdateOne(pr *Prescription) *PrescriptionUpdateOne {
	mutation := newPrescriptionMutation(c.config, OpUpdateOne, withPrescription(pr))
	return &PrescriptionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PrescriptionClient) UpdateOneID(id uuid.UUID) *PrescriptionUpdateOne {
	mutation := newPrescriptionMutation(c.config, OpUpdateOne, withPrescriptionID(id))
	return &PrescriptionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Prescription.
func (c *PrescriptionClient) Delete() *PrescriptionDelete {
	mutation := newPrescriptionMutation(c.config, OpDelete)
	return &PrescriptionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PrescriptionClient) DeleteOne(pr *Prescription) *PrescriptionDeleteOne {
	return c.DeleteOneID(pr.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *PrescriptionClient) DeleteOneID(id uuid.UUID) *PrescriptionDeleteOne {
	builder := c.Delete().Where(prescription.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PrescriptionDeleteOne{builder}
}

// Query returns a query builder for Prescription.
func (c *PrescriptionClient) Query() *PrescriptionQuery {
	return &PrescriptionQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypePrescription},
		inters: c.Interceptors(),
	}
}

// Get returns a Prescription entity by its id.
func (c *PrescriptionClient) Get(ctx context.Context, id uuid.UUID) (*Prescription, error) {
	return c.Query().Where(prescription.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PrescriptionClient) GetX(ctx context.Context, id uuid.UUID) *Prescription {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *PrescriptionClient) Hooks() []Hook {
	return c.hooks.Prescription
}

// Interceptors returns the client interceptors.
func (c *PrescriptionClient) Interceptors() []Interceptor {
	return c.inters.Prescription
}

func (c *PrescriptionClient) mutate(ctx context.Context, m *PrescriptionMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&PrescriptionCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&PrescriptionUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&PrescriptionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&PrescriptionDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Prescription mutation op: %q", m.Op())
	}
}

// PrescriptionItemClient is a client for the PrescriptionItem schema.
type PrescriptionItemClient struct {
	config
}

// NewPrescriptionItemClient returns a client for the PrescriptionItem from the given config.
func NewPrescriptionItemClient(c config) *PrescriptionItemClient {
	return &PrescriptionItemClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `prescriptionitem.Hooks(f(g(h())))`.
func (c *PrescriptionItemClient) Use(hooks ...Hook) {
	c.hooks.PrescriptionItem = append(c.hooks.PrescriptionItem, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `prescriptionitem.Intercept(f(g(h())))`.
func (c *PrescriptionItemClient) Intercept(interceptors ...Interceptor) {
	c.inters.PrescriptionItem = append(c.inters.PrescriptionItem, interceptors...)
}

// Create returns a builder for creating a PrescriptionItem entity.
func (c *PrescriptionItemClient) Create() *PrescriptionItemCreate {
	mutation := newPrescriptionItemMutation(c.config, OpCreate)
	return &PrescriptionItemCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of PrescriptionItem entities.
func (c *PrescriptionItemClient) CreateBulk(builders ...*PrescriptionItemCreate) *PrescriptionItemCreateBulk {
	return &PrescriptionItemCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *PrescriptionItemClient) MapCreateBulk(slice any, setFunc func(*PrescriptionItemCreate, int)) *PrescriptionItemCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &PrescriptionItemCreateBulk{err: fmt.Errorf("calling to PrescriptionItemClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*PrescriptionItemCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &PrescriptionItemCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for PrescriptionItem.
func (c *PrescriptionItemClient) Update() *PrescriptionItemUpdate {
	mutation := newPrescriptionItemMutation(c.config, OpUpdate)
	return &PrescriptionItemUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PrescriptionItemClient) UpdateOne(pi *PrescriptionItem) *PrescriptionItemUpdateOne {
	mutation := newPrescriptionItemMutation(c.config, OpUpdateOne, withPrescriptionItem(pi))
	return &PrescriptionItemUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PrescriptionItemClient) UpdateOneID(id uuid.UUID) *PrescriptionItemUpdateOne {
	mutation := newPrescriptionItemMutation(c.config, OpUpdateOne, withPrescriptionItemID(id))
	return &PrescriptionItemUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for PrescriptionItem.
func (c *PrescriptionItemClient) Delete() *PrescriptionItemDelete {
	mutation := newPrescriptionItemMutation(c.config, OpDelete)
	return &PrescriptionItemDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PrescriptionItemClient) DeleteOne(pi *PrescriptionItem) *PrescriptionItemDeleteOne {
	return c.DeleteOneID(pi.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *PrescriptionItemClient) DeleteOneID(id uuid.UUID) *PrescriptionItemDeleteOne {
	builder := c.Delete().Where(prescriptionitem.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PrescriptionItemDeleteOne{builder}
}

// Query returns a query builder for PrescriptionItem.
func (c *PrescriptionItemClient) Query() *PrescriptionItemQuery {
	return &PrescriptionItemQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypePrescriptionItem},
		inters: c.Interceptors(),
	}
}

// Get returns a PrescriptionItem entity by its id.
func (c *PrescriptionItemClient) Get(ctx context.Context, id uuid.UUID) (*PrescriptionItem, error) {
	return c.Query().Where(prescriptionitem.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PrescriptionItemClient) GetX(ctx context.Context, id uuid.UUID) *PrescriptionItem {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *PrescriptionItemClient) Hooks() []Hook {
	return c.hooks.PrescriptionItem
}

// Interceptors returns the client interceptors.
func (c *PrescriptionItemClient) Interceptors() []Interceptor {
	return c.inters.PrescriptionItem
}

func (c *PrescriptionItemClient) mutate(ctx context.Context, m *PrescriptionItemMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&PrescriptionItemCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&PrescriptionItemUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&PrescriptionItemUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&PrescriptionItemDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown PrescriptionItem mutation op: %q", m.Op())
	}
}

// TakeHistoryClient is a client for the TakeHistory schema.
type TakeHistoryClient struct {
	config
}

// NewTakeHistoryClient returns a client for the TakeHistory from the given config.
func NewTakeHistoryClient(c config) *TakeHistoryClient {
	return &TakeHistoryClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `takehistory.Hooks(f(g(h())))`.
func (c *TakeHistoryClient) Use(hooks ...Hook) {
	c.hooks.TakeHistory = append(c.hooks.TakeHistory, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `takehistory.Intercept(f(g(h())))`.
func (c *TakeHistoryClient) Intercept(interceptors ...Interceptor) {
	c.inters.TakeHistory = append(c.inters.TakeHistory, interceptors...)
}

// Create returns a builder for creating a TakeHistory entity.
func (c *TakeHistoryClient) Create() *TakeHistoryCreate {
	mutation := newTakeHistoryMutation(c.config, OpCreate)
	return &TakeHistoryCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of TakeHistory entities.
func (c *TakeHistoryClient) CreateBulk(builders ...*TakeHistoryCreate) *TakeHistoryCreateBulk {
	return &TakeHistoryCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *TakeHistoryClient) MapCreateBulk(slice any, setFunc func(*TakeHistoryCreate, int)) *TakeHistoryCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &TakeHistoryCreateBulk{err: fmt.Errorf("calling to TakeHistoryClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*TakeHistoryCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &TakeHistoryCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for TakeHistory.
func (c *TakeHistoryClient) Update() *TakeHistoryUpdate {
	mutation := newTakeHistoryMutation(c.config, OpUpdate)
	return &TakeHistoryUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TakeHistoryClient) UpdateOne(th *TakeHistory) *TakeHistoryUpdateOne {
	mutation := newTakeHistoryMutation(c.config, OpUpdateOne, withTakeHistory(th))
	return &TakeHistoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TakeHistoryClient) UpdateOneID(id int) *TakeHistoryUpdateOne {
	mutation := newTakeHistoryMutation(c.config, OpUpdateOne, withTakeHistoryID(id))
	return &TakeHistoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for TakeHistory.
func (c *TakeHistoryClient) Delete() *TakeHistoryDelete {
	mutation := newTakeHistoryMutation(c.config, OpDelete)
	return &TakeHistoryDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *TakeHistoryClient) DeleteOne(th *TakeHistory) *TakeHistoryDeleteOne {
	return c.DeleteOneID(th.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *TakeHistoryClient) DeleteOneID(id int) *TakeHistoryDeleteOne {
	builder := c.Delete().Where(takehistory.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TakeHistoryDeleteOne{builder}
}

// Query returns a query builder for TakeHistory.
func (c *TakeHistoryClient) Query() *TakeHistoryQuery {
	return &TakeHistoryQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeTakeHistory},
		inters: c.Interceptors(),
	}
}

// Get returns a TakeHistory entity by its id.
func (c *TakeHistoryClient) Get(ctx context.Context, id int) (*TakeHistory, error) {
	return c.Query().Where(takehistory.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TakeHistoryClient) GetX(ctx context.Context, id int) *TakeHistory {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *TakeHistoryClient) Hooks() []Hook {
	return c.hooks.TakeHistory
}

// Interceptors returns the client interceptors.
func (c *TakeHistoryClient) Interceptors() []Interceptor {
	return c.inters.TakeHistory
}

func (c *TakeHistoryClient) mutate(ctx context.Context, m *TakeHistoryMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&TakeHistoryCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&TakeHistoryUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&TakeHistoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&TakeHistoryDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown TakeHistory mutation op: %q", m.Op())
	}
}

// TakeHistoryItemClient is a client for the TakeHistoryItem schema.
type TakeHistoryItemClient struct {
	config
}

// NewTakeHistoryItemClient returns a client for the TakeHistoryItem from the given config.
func NewTakeHistoryItemClient(c config) *TakeHistoryItemClient {
	return &TakeHistoryItemClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `takehistoryitem.Hooks(f(g(h())))`.
func (c *TakeHistoryItemClient) Use(hooks ...Hook) {
	c.hooks.TakeHistoryItem = append(c.hooks.TakeHistoryItem, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `takehistoryitem.Intercept(f(g(h())))`.
func (c *TakeHistoryItemClient) Intercept(interceptors ...Interceptor) {
	c.inters.TakeHistoryItem = append(c.inters.TakeHistoryItem, interceptors...)
}

// Create returns a builder for creating a TakeHistoryItem entity.
func (c *TakeHistoryItemClient) Create() *TakeHistoryItemCreate {
	mutation := newTakeHistoryItemMutation(c.config, OpCreate)
	return &TakeHistoryItemCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of TakeHistoryItem entities.
func (c *TakeHistoryItemClient) CreateBulk(builders ...*TakeHistoryItemCreate) *TakeHistoryItemCreateBulk {
	return &TakeHistoryItemCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *TakeHistoryItemClient) MapCreateBulk(slice any, setFunc func(*TakeHistoryItemCreate, int)) *TakeHistoryItemCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &TakeHistoryItemCreateBulk{err: fmt.Errorf("calling to TakeHistoryItemClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*TakeHistoryItemCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &TakeHistoryItemCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for TakeHistoryItem.
func (c *TakeHistoryItemClient) Update() *TakeHistoryItemUpdate {
	mutation := newTakeHistoryItemMutation(c.config, OpUpdate)
	return &TakeHistoryItemUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TakeHistoryItemClient) UpdateOne(thi *TakeHistoryItem) *TakeHistoryItemUpdateOne {
	mutation := newTakeHistoryItemMutation(c.config, OpUpdateOne, withTakeHistoryItem(thi))
	return &TakeHistoryItemUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TakeHistoryItemClient) UpdateOneID(id int) *TakeHistoryItemUpdateOne {
	mutation := newTakeHistoryItemMutation(c.config, OpUpdateOne, withTakeHistoryItemID(id))
	return &TakeHistoryItemUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for TakeHistoryItem.
func (c *TakeHistoryItemClient) Delete() *TakeHistoryItemDelete {
	mutation := newTakeHistoryItemMutation(c.config, OpDelete)
	return &TakeHistoryItemDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *TakeHistoryItemClient) DeleteOne(thi *TakeHistoryItem) *TakeHistoryItemDeleteOne {
	return c.DeleteOneID(thi.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *TakeHistoryItemClient) DeleteOneID(id int) *TakeHistoryItemDeleteOne {
	builder := c.Delete().Where(takehistoryitem.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TakeHistoryItemDeleteOne{builder}
}

// Query returns a query builder for TakeHistoryItem.
func (c *TakeHistoryItemClient) Query() *TakeHistoryItemQuery {
	return &TakeHistoryItemQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeTakeHistoryItem},
		inters: c.Interceptors(),
	}
}

// Get returns a TakeHistoryItem entity by its id.
func (c *TakeHistoryItemClient) Get(ctx context.Context, id int) (*TakeHistoryItem, error) {
	return c.Query().Where(takehistoryitem.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TakeHistoryItemClient) GetX(ctx context.Context, id int) *TakeHistoryItem {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *TakeHistoryItemClient) Hooks() []Hook {
	return c.hooks.TakeHistoryItem
}

// Interceptors returns the client interceptors.
func (c *TakeHistoryItemClient) Interceptors() []Interceptor {
	return c.inters.TakeHistoryItem
}

func (c *TakeHistoryItemClient) mutate(ctx context.Context, m *TakeHistoryItemMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&TakeHistoryItemCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&TakeHistoryItemUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&TakeHistoryItemUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&TakeHistoryItemDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown TakeHistoryItem mutation op: %q", m.Op())
	}
}

// TokenClient is a client for the Token schema.
type TokenClient struct {
	config
}

// NewTokenClient returns a client for the Token from the given config.
func NewTokenClient(c config) *TokenClient {
	return &TokenClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `token.Hooks(f(g(h())))`.
func (c *TokenClient) Use(hooks ...Hook) {
	c.hooks.Token = append(c.hooks.Token, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `token.Intercept(f(g(h())))`.
func (c *TokenClient) Intercept(interceptors ...Interceptor) {
	c.inters.Token = append(c.inters.Token, interceptors...)
}

// Create returns a builder for creating a Token entity.
func (c *TokenClient) Create() *TokenCreate {
	mutation := newTokenMutation(c.config, OpCreate)
	return &TokenCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Token entities.
func (c *TokenClient) CreateBulk(builders ...*TokenCreate) *TokenCreateBulk {
	return &TokenCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *TokenClient) MapCreateBulk(slice any, setFunc func(*TokenCreate, int)) *TokenCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &TokenCreateBulk{err: fmt.Errorf("calling to TokenClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*TokenCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &TokenCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Token.
func (c *TokenClient) Update() *TokenUpdate {
	mutation := newTokenMutation(c.config, OpUpdate)
	return &TokenUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TokenClient) UpdateOne(t *Token) *TokenUpdateOne {
	mutation := newTokenMutation(c.config, OpUpdateOne, withToken(t))
	return &TokenUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TokenClient) UpdateOneID(id int) *TokenUpdateOne {
	mutation := newTokenMutation(c.config, OpUpdateOne, withTokenID(id))
	return &TokenUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Token.
func (c *TokenClient) Delete() *TokenDelete {
	mutation := newTokenMutation(c.config, OpDelete)
	return &TokenDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *TokenClient) DeleteOne(t *Token) *TokenDeleteOne {
	return c.DeleteOneID(t.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *TokenClient) DeleteOneID(id int) *TokenDeleteOne {
	builder := c.Delete().Where(token.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TokenDeleteOne{builder}
}

// Query returns a query builder for Token.
func (c *TokenClient) Query() *TokenQuery {
	return &TokenQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeToken},
		inters: c.Interceptors(),
	}
}

// Get returns a Token entity by its id.
func (c *TokenClient) Get(ctx context.Context, id int) (*Token, error) {
	return c.Query().Where(token.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TokenClient) GetX(ctx context.Context, id int) *Token {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *TokenClient) Hooks() []Hook {
	return c.hooks.Token
}

// Interceptors returns the client interceptors.
func (c *TokenClient) Interceptors() []Interceptor {
	return c.inters.Token
}

func (c *TokenClient) mutate(ctx context.Context, m *TokenMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&TokenCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&TokenUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&TokenUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&TokenDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Token mutation op: %q", m.Op())
	}
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `user.Hooks(f(g(h())))`.
func (c *UserClient) Use(hooks ...Hook) {
	c.hooks.User = append(c.hooks.User, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `user.Intercept(f(g(h())))`.
func (c *UserClient) Intercept(interceptors ...Interceptor) {
	c.inters.User = append(c.inters.User, interceptors...)
}

// Create returns a builder for creating a User entity.
func (c *UserClient) Create() *UserCreate {
	mutation := newUserMutation(c.config, OpCreate)
	return &UserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of User entities.
func (c *UserClient) CreateBulk(builders ...*UserCreate) *UserCreateBulk {
	return &UserCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *UserClient) MapCreateBulk(slice any, setFunc func(*UserCreate, int)) *UserCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &UserCreateBulk{err: fmt.Errorf("calling to UserClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*UserCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &UserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	mutation := newUserMutation(c.config, OpUpdate)
	return &UserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(u *User) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUser(u))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id uuid.UUID) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUserID(id))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	mutation := newUserMutation(c.config, OpDelete)
	return &UserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserClient) DeleteOne(u *User) *UserDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserClient) DeleteOneID(id uuid.UUID) *UserDeleteOne {
	builder := c.Delete().Where(user.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeleteOne{builder}
}

// Query returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUser},
		inters: c.Interceptors(),
	}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id uuid.UUID) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id uuid.UUID) *User {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *UserClient) Hooks() []Hook {
	return c.hooks.User
}

// Interceptors returns the client interceptors.
func (c *UserClient) Interceptors() []Interceptor {
	return c.inters.User
}

func (c *UserClient) mutate(ctx context.Context, m *UserMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UserCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UserUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UserDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown User mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		Medicine, Prescription, PrescriptionItem, TakeHistory, TakeHistoryItem, Token,
		User []ent.Hook
	}
	inters struct {
		Medicine, Prescription, PrescriptionItem, TakeHistory, TakeHistoryItem, Token,
		User []ent.Interceptor
	}
)
