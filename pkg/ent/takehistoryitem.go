// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"nursing_api/pkg/ent/prescriptionitem"
	"nursing_api/pkg/ent/takehistoryitem"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// TakeHistoryItem is the model entity for the TakeHistoryItem schema.
type TakeHistoryItem struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID uuid.UUID `json:"user_id,omitempty"`
	// PrescriptionID holds the value of the "prescription_id" field.
	PrescriptionID uuid.UUID `json:"prescription_id,omitempty"`
	// PrescriptionItemID holds the value of the "prescription_item_id" field.
	PrescriptionItemID uuid.UUID `json:"prescription_item_id,omitempty"`
	// TimezoneID holds the value of the "timezone_id" field.
	TimezoneID uuid.UUID `json:"timezone_id,omitempty"`
	// MedicineID holds the value of the "medicine_id" field.
	MedicineID uuid.UUID `json:"medicine_id,omitempty"`
	// MedicineName holds the value of the "medicine_name" field.
	MedicineName string `json:"medicine_name,omitempty"`
	// TimezoneName holds the value of the "timezone_name" field.
	TimezoneName string `json:"timezone_name,omitempty"`
	// Midday holds the value of the "midday" field.
	Midday string `json:"midday,omitempty"`
	// Hour holds the value of the "hour" field.
	Hour string `json:"hour,omitempty"`
	// Minute holds the value of the "minute" field.
	Minute string `json:"minute,omitempty"`
	// TakeStatus holds the value of the "take_status" field.
	TakeStatus bool `json:"take_status,omitempty"`
	// TotalAmount holds the value of the "total_amount" field.
	TotalAmount float64 `json:"total_amount,omitempty"`
	// RemainAmount holds the value of the "remain_amount" field.
	RemainAmount float64 `json:"remain_amount,omitempty"`
	// TakeAmount holds the value of the "take_amount" field.
	TakeAmount float64 `json:"take_amount,omitempty"`
	// TakeUnit holds the value of the "take_unit" field.
	TakeUnit string `json:"take_unit,omitempty"`
	// TakeDate holds the value of the "take_date" field.
	TakeDate string `json:"take_date,omitempty"`
	// TakeTime holds the value of the "take_time" field.
	TakeTime string `json:"take_time,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TakeHistoryItemQuery when eager-loading is set.
	Edges        TakeHistoryItemEdges `json:"edges"`
	selectValues sql.SelectValues
}

// TakeHistoryItemEdges holds the relations/edges for other nodes in the graph.
type TakeHistoryItemEdges struct {
	// PrescriptionItem holds the value of the prescription_item edge.
	PrescriptionItem *PrescriptionItem `json:"prescription_item,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// PrescriptionItemOrErr returns the PrescriptionItem value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TakeHistoryItemEdges) PrescriptionItemOrErr() (*PrescriptionItem, error) {
	if e.loadedTypes[0] {
		if e.PrescriptionItem == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: prescriptionitem.Label}
		}
		return e.PrescriptionItem, nil
	}
	return nil, &NotLoadedError{edge: "prescription_item"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TakeHistoryItem) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case takehistoryitem.FieldTakeStatus:
			values[i] = new(sql.NullBool)
		case takehistoryitem.FieldTotalAmount, takehistoryitem.FieldRemainAmount, takehistoryitem.FieldTakeAmount:
			values[i] = new(sql.NullFloat64)
		case takehistoryitem.FieldMedicineName, takehistoryitem.FieldTimezoneName, takehistoryitem.FieldMidday, takehistoryitem.FieldHour, takehistoryitem.FieldMinute, takehistoryitem.FieldTakeUnit, takehistoryitem.FieldTakeDate, takehistoryitem.FieldTakeTime:
			values[i] = new(sql.NullString)
		case takehistoryitem.FieldCreatedAt, takehistoryitem.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case takehistoryitem.FieldID, takehistoryitem.FieldUserID, takehistoryitem.FieldPrescriptionID, takehistoryitem.FieldPrescriptionItemID, takehistoryitem.FieldTimezoneID, takehistoryitem.FieldMedicineID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TakeHistoryItem fields.
func (thi *TakeHistoryItem) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case takehistoryitem.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				thi.ID = *value
			}
		case takehistoryitem.FieldUserID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value != nil {
				thi.UserID = *value
			}
		case takehistoryitem.FieldPrescriptionID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field prescription_id", values[i])
			} else if value != nil {
				thi.PrescriptionID = *value
			}
		case takehistoryitem.FieldPrescriptionItemID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field prescription_item_id", values[i])
			} else if value != nil {
				thi.PrescriptionItemID = *value
			}
		case takehistoryitem.FieldTimezoneID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field timezone_id", values[i])
			} else if value != nil {
				thi.TimezoneID = *value
			}
		case takehistoryitem.FieldMedicineID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field medicine_id", values[i])
			} else if value != nil {
				thi.MedicineID = *value
			}
		case takehistoryitem.FieldMedicineName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field medicine_name", values[i])
			} else if value.Valid {
				thi.MedicineName = value.String
			}
		case takehistoryitem.FieldTimezoneName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field timezone_name", values[i])
			} else if value.Valid {
				thi.TimezoneName = value.String
			}
		case takehistoryitem.FieldMidday:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field midday", values[i])
			} else if value.Valid {
				thi.Midday = value.String
			}
		case takehistoryitem.FieldHour:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field hour", values[i])
			} else if value.Valid {
				thi.Hour = value.String
			}
		case takehistoryitem.FieldMinute:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field minute", values[i])
			} else if value.Valid {
				thi.Minute = value.String
			}
		case takehistoryitem.FieldTakeStatus:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field take_status", values[i])
			} else if value.Valid {
				thi.TakeStatus = value.Bool
			}
		case takehistoryitem.FieldTotalAmount:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field total_amount", values[i])
			} else if value.Valid {
				thi.TotalAmount = value.Float64
			}
		case takehistoryitem.FieldRemainAmount:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field remain_amount", values[i])
			} else if value.Valid {
				thi.RemainAmount = value.Float64
			}
		case takehistoryitem.FieldTakeAmount:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field take_amount", values[i])
			} else if value.Valid {
				thi.TakeAmount = value.Float64
			}
		case takehistoryitem.FieldTakeUnit:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field take_unit", values[i])
			} else if value.Valid {
				thi.TakeUnit = value.String
			}
		case takehistoryitem.FieldTakeDate:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field take_date", values[i])
			} else if value.Valid {
				thi.TakeDate = value.String
			}
		case takehistoryitem.FieldTakeTime:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field take_time", values[i])
			} else if value.Valid {
				thi.TakeTime = value.String
			}
		case takehistoryitem.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				thi.CreatedAt = value.Time
			}
		case takehistoryitem.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				thi.UpdatedAt = value.Time
			}
		default:
			thi.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the TakeHistoryItem.
// This includes values selected through modifiers, order, etc.
func (thi *TakeHistoryItem) Value(name string) (ent.Value, error) {
	return thi.selectValues.Get(name)
}

// QueryPrescriptionItem queries the "prescription_item" edge of the TakeHistoryItem entity.
func (thi *TakeHistoryItem) QueryPrescriptionItem() *PrescriptionItemQuery {
	return NewTakeHistoryItemClient(thi.config).QueryPrescriptionItem(thi)
}

// Update returns a builder for updating this TakeHistoryItem.
// Note that you need to call TakeHistoryItem.Unwrap() before calling this method if this TakeHistoryItem
// was returned from a transaction, and the transaction was committed or rolled back.
func (thi *TakeHistoryItem) Update() *TakeHistoryItemUpdateOne {
	return NewTakeHistoryItemClient(thi.config).UpdateOne(thi)
}

// Unwrap unwraps the TakeHistoryItem entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (thi *TakeHistoryItem) Unwrap() *TakeHistoryItem {
	_tx, ok := thi.config.driver.(*txDriver)
	if !ok {
		panic("ent: TakeHistoryItem is not a transactional entity")
	}
	thi.config.driver = _tx.drv
	return thi
}

// String implements the fmt.Stringer.
func (thi *TakeHistoryItem) String() string {
	var builder strings.Builder
	builder.WriteString("TakeHistoryItem(")
	builder.WriteString(fmt.Sprintf("id=%v, ", thi.ID))
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", thi.UserID))
	builder.WriteString(", ")
	builder.WriteString("prescription_id=")
	builder.WriteString(fmt.Sprintf("%v", thi.PrescriptionID))
	builder.WriteString(", ")
	builder.WriteString("prescription_item_id=")
	builder.WriteString(fmt.Sprintf("%v", thi.PrescriptionItemID))
	builder.WriteString(", ")
	builder.WriteString("timezone_id=")
	builder.WriteString(fmt.Sprintf("%v", thi.TimezoneID))
	builder.WriteString(", ")
	builder.WriteString("medicine_id=")
	builder.WriteString(fmt.Sprintf("%v", thi.MedicineID))
	builder.WriteString(", ")
	builder.WriteString("medicine_name=")
	builder.WriteString(thi.MedicineName)
	builder.WriteString(", ")
	builder.WriteString("timezone_name=")
	builder.WriteString(thi.TimezoneName)
	builder.WriteString(", ")
	builder.WriteString("midday=")
	builder.WriteString(thi.Midday)
	builder.WriteString(", ")
	builder.WriteString("hour=")
	builder.WriteString(thi.Hour)
	builder.WriteString(", ")
	builder.WriteString("minute=")
	builder.WriteString(thi.Minute)
	builder.WriteString(", ")
	builder.WriteString("take_status=")
	builder.WriteString(fmt.Sprintf("%v", thi.TakeStatus))
	builder.WriteString(", ")
	builder.WriteString("total_amount=")
	builder.WriteString(fmt.Sprintf("%v", thi.TotalAmount))
	builder.WriteString(", ")
	builder.WriteString("remain_amount=")
	builder.WriteString(fmt.Sprintf("%v", thi.RemainAmount))
	builder.WriteString(", ")
	builder.WriteString("take_amount=")
	builder.WriteString(fmt.Sprintf("%v", thi.TakeAmount))
	builder.WriteString(", ")
	builder.WriteString("take_unit=")
	builder.WriteString(thi.TakeUnit)
	builder.WriteString(", ")
	builder.WriteString("take_date=")
	builder.WriteString(thi.TakeDate)
	builder.WriteString(", ")
	builder.WriteString("take_time=")
	builder.WriteString(thi.TakeTime)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(thi.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(thi.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// TakeHistoryItems is a parsable slice of TakeHistoryItem.
type TakeHistoryItems []*TakeHistoryItem
