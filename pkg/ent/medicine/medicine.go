// Code generated by ent, DO NOT EDIT.

package medicine

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the medicine type in the database.
	Label = "medicine"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldMedicineName holds the string denoting the medicine_name field in the database.
	FieldMedicineName = "medicine_name"
	// FieldItemSeq holds the string denoting the item_seq field in the database.
	FieldItemSeq = "item_seq"
	// FieldCompanyName holds the string denoting the company_name field in the database.
	FieldCompanyName = "company_name"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldUsage holds the string denoting the usage field in the database.
	FieldUsage = "usage"
	// FieldEffect holds the string denoting the effect field in the database.
	FieldEffect = "effect"
	// FieldSideEffect holds the string denoting the side_effect field in the database.
	FieldSideEffect = "side_effect"
	// FieldCaution holds the string denoting the caution field in the database.
	FieldCaution = "caution"
	// FieldWarning holds the string denoting the warning field in the database.
	FieldWarning = "warning"
	// FieldInteraction holds the string denoting the interaction field in the database.
	FieldInteraction = "interaction"
	// FieldKeepMethod holds the string denoting the keep_method field in the database.
	FieldKeepMethod = "keep_method"
	// FieldAppearance holds the string denoting the appearance field in the database.
	FieldAppearance = "appearance"
	// FieldColorClass1 holds the string denoting the color_class1 field in the database.
	FieldColorClass1 = "color_class1"
	// FieldColorClass2 holds the string denoting the color_class2 field in the database.
	FieldColorClass2 = "color_class2"
	// FieldPillImage holds the string denoting the pill_image field in the database.
	FieldPillImage = "pill_image"
	// FieldClassName holds the string denoting the class_name field in the database.
	FieldClassName = "class_name"
	// FieldOtcName holds the string denoting the otc_name field in the database.
	FieldOtcName = "otc_name"
	// FieldFormCodeName holds the string denoting the form_code_name field in the database.
	FieldFormCodeName = "form_code_name"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// Table holds the table name of the medicine in the database.
	Table = "medicines"
)

// Columns holds all SQL columns for medicine fields.
var Columns = []string{
	FieldID,
	FieldMedicineName,
	FieldItemSeq,
	FieldCompanyName,
	FieldDescription,
	FieldUsage,
	FieldEffect,
	FieldSideEffect,
	FieldCaution,
	FieldWarning,
	FieldInteraction,
	FieldKeepMethod,
	FieldAppearance,
	FieldColorClass1,
	FieldColorClass2,
	FieldPillImage,
	FieldClassName,
	FieldOtcName,
	FieldFormCodeName,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the Medicine queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByMedicineName orders the results by the medicine_name field.
func ByMedicineName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMedicineName, opts...).ToFunc()
}

// ByItemSeq orders the results by the item_seq field.
func ByItemSeq(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldItemSeq, opts...).ToFunc()
}

// ByCompanyName orders the results by the company_name field.
func ByCompanyName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCompanyName, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByUsage orders the results by the usage field.
func ByUsage(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUsage, opts...).ToFunc()
}

// ByEffect orders the results by the effect field.
func ByEffect(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEffect, opts...).ToFunc()
}

// BySideEffect orders the results by the side_effect field.
func BySideEffect(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSideEffect, opts...).ToFunc()
}

// ByCaution orders the results by the caution field.
func ByCaution(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCaution, opts...).ToFunc()
}

// ByWarning orders the results by the warning field.
func ByWarning(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldWarning, opts...).ToFunc()
}

// ByInteraction orders the results by the interaction field.
func ByInteraction(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldInteraction, opts...).ToFunc()
}

// ByKeepMethod orders the results by the keep_method field.
func ByKeepMethod(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldKeepMethod, opts...).ToFunc()
}

// ByAppearance orders the results by the appearance field.
func ByAppearance(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAppearance, opts...).ToFunc()
}

// ByColorClass1 orders the results by the color_class1 field.
func ByColorClass1(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldColorClass1, opts...).ToFunc()
}

// ByColorClass2 orders the results by the color_class2 field.
func ByColorClass2(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldColorClass2, opts...).ToFunc()
}

// ByPillImage orders the results by the pill_image field.
func ByPillImage(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPillImage, opts...).ToFunc()
}

// ByClassName orders the results by the class_name field.
func ByClassName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldClassName, opts...).ToFunc()
}

// ByOtcName orders the results by the otc_name field.
func ByOtcName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOtcName, opts...).ToFunc()
}

// ByFormCodeName orders the results by the form_code_name field.
func ByFormCodeName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFormCodeName, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}
