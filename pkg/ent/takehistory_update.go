// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"nursing_api/pkg/ent/predicate"
	"nursing_api/pkg/ent/takehistory"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TakeHistoryUpdate is the builder for updating TakeHistory entities.
type TakeHistoryUpdate struct {
	config
	hooks    []Hook
	mutation *TakeHistoryMutation
}

// Where appends a list predicates to the TakeHistoryUpdate builder.
func (thu *TakeHistoryUpdate) Where(ps ...predicate.TakeHistory) *TakeHistoryUpdate {
	thu.mutation.Where(ps...)
	return thu
}

// Mutation returns the TakeHistoryMutation object of the builder.
func (thu *TakeHistoryUpdate) Mutation() *TakeHistoryMutation {
	return thu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (thu *TakeHistoryUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, thu.sqlSave, thu.mutation, thu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (thu *TakeHistoryUpdate) SaveX(ctx context.Context) int {
	affected, err := thu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (thu *TakeHistoryUpdate) Exec(ctx context.Context) error {
	_, err := thu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (thu *TakeHistoryUpdate) ExecX(ctx context.Context) {
	if err := thu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (thu *TakeHistoryUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(takehistory.Table, takehistory.Columns, sqlgraph.NewFieldSpec(takehistory.FieldID, field.TypeInt))
	if ps := thu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if n, err = sqlgraph.UpdateNodes(ctx, thu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{takehistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	thu.mutation.done = true
	return n, nil
}

// TakeHistoryUpdateOne is the builder for updating a single TakeHistory entity.
type TakeHistoryUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TakeHistoryMutation
}

// Mutation returns the TakeHistoryMutation object of the builder.
func (thuo *TakeHistoryUpdateOne) Mutation() *TakeHistoryMutation {
	return thuo.mutation
}

// Where appends a list predicates to the TakeHistoryUpdate builder.
func (thuo *TakeHistoryUpdateOne) Where(ps ...predicate.TakeHistory) *TakeHistoryUpdateOne {
	thuo.mutation.Where(ps...)
	return thuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (thuo *TakeHistoryUpdateOne) Select(field string, fields ...string) *TakeHistoryUpdateOne {
	thuo.fields = append([]string{field}, fields...)
	return thuo
}

// Save executes the query and returns the updated TakeHistory entity.
func (thuo *TakeHistoryUpdateOne) Save(ctx context.Context) (*TakeHistory, error) {
	return withHooks(ctx, thuo.sqlSave, thuo.mutation, thuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (thuo *TakeHistoryUpdateOne) SaveX(ctx context.Context) *TakeHistory {
	node, err := thuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (thuo *TakeHistoryUpdateOne) Exec(ctx context.Context) error {
	_, err := thuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (thuo *TakeHistoryUpdateOne) ExecX(ctx context.Context) {
	if err := thuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (thuo *TakeHistoryUpdateOne) sqlSave(ctx context.Context) (_node *TakeHistory, err error) {
	_spec := sqlgraph.NewUpdateSpec(takehistory.Table, takehistory.Columns, sqlgraph.NewFieldSpec(takehistory.FieldID, field.TypeInt))
	id, ok := thuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "TakeHistory.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := thuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, takehistory.FieldID)
		for _, f := range fields {
			if !takehistory.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != takehistory.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := thuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	_node = &TakeHistory{config: thuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, thuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{takehistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	thuo.mutation.done = true
	return _node, nil
}
