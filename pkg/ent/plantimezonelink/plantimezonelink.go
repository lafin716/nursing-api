// Code generated by ent, DO NOT EDIT.

package plantimezonelink

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the plantimezonelink type in the database.
	Label = "plan_time_zone_link"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldPrescriptionID holds the string denoting the prescription_id field in the database.
	FieldPrescriptionID = "prescription_id"
	// FieldTimezoneID holds the string denoting the timezone_id field in the database.
	FieldTimezoneID = "timezone_id"
	// FieldTimezoneName holds the string denoting the timezone_name field in the database.
	FieldTimezoneName = "timezone_name"
	// FieldUseAlert holds the string denoting the use_alert field in the database.
	FieldUseAlert = "use_alert"
	// FieldMeridiem holds the string denoting the meridiem field in the database.
	FieldMeridiem = "meridiem"
	// FieldHour holds the string denoting the hour field in the database.
	FieldHour = "hour"
	// FieldMinute holds the string denoting the minute field in the database.
	FieldMinute = "minute"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// Table holds the table name of the plantimezonelink in the database.
	Table = "plan_time_zone_links"
)

// Columns holds all SQL columns for plantimezonelink fields.
var Columns = []string{
	FieldID,
	FieldPrescriptionID,
	FieldTimezoneID,
	FieldTimezoneName,
	FieldUseAlert,
	FieldMeridiem,
	FieldHour,
	FieldMinute,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultUseAlert holds the default value on creation for the "use_alert" field.
	DefaultUseAlert bool
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the PlanTimeZoneLink queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByPrescriptionID orders the results by the prescription_id field.
func ByPrescriptionID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPrescriptionID, opts...).ToFunc()
}

// ByTimezoneID orders the results by the timezone_id field.
func ByTimezoneID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTimezoneID, opts...).ToFunc()
}

// ByTimezoneName orders the results by the timezone_name field.
func ByTimezoneName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTimezoneName, opts...).ToFunc()
}

// ByUseAlert orders the results by the use_alert field.
func ByUseAlert(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUseAlert, opts...).ToFunc()
}

// ByMeridiem orders the results by the meridiem field.
func ByMeridiem(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMeridiem, opts...).ToFunc()
}

// ByHour orders the results by the hour field.
func ByHour(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHour, opts...).ToFunc()
}

// ByMinute orders the results by the minute field.
func ByMinute(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMinute, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}
