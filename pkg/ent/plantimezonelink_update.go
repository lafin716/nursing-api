// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"nursing_api/pkg/ent/plantimezonelink"
	"nursing_api/pkg/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// PlanTimeZoneLinkUpdate is the builder for updating PlanTimeZoneLink entities.
type PlanTimeZoneLinkUpdate struct {
	config
	hooks    []Hook
	mutation *PlanTimeZoneLinkMutation
}

// Where appends a list predicates to the PlanTimeZoneLinkUpdate builder.
func (ptzlu *PlanTimeZoneLinkUpdate) Where(ps ...predicate.PlanTimeZoneLink) *PlanTimeZoneLinkUpdate {
	ptzlu.mutation.Where(ps...)
	return ptzlu
}

// SetPrescriptionID sets the "prescription_id" field.
func (ptzlu *PlanTimeZoneLinkUpdate) SetPrescriptionID(u uuid.UUID) *PlanTimeZoneLinkUpdate {
	ptzlu.mutation.SetPrescriptionID(u)
	return ptzlu
}

// SetNillablePrescriptionID sets the "prescription_id" field if the given value is not nil.
func (ptzlu *PlanTimeZoneLinkUpdate) SetNillablePrescriptionID(u *uuid.UUID) *PlanTimeZoneLinkUpdate {
	if u != nil {
		ptzlu.SetPrescriptionID(*u)
	}
	return ptzlu
}

// SetTimezoneID sets the "timezone_id" field.
func (ptzlu *PlanTimeZoneLinkUpdate) SetTimezoneID(u uuid.UUID) *PlanTimeZoneLinkUpdate {
	ptzlu.mutation.SetTimezoneID(u)
	return ptzlu
}

// SetNillableTimezoneID sets the "timezone_id" field if the given value is not nil.
func (ptzlu *PlanTimeZoneLinkUpdate) SetNillableTimezoneID(u *uuid.UUID) *PlanTimeZoneLinkUpdate {
	if u != nil {
		ptzlu.SetTimezoneID(*u)
	}
	return ptzlu
}

// SetTimezoneName sets the "timezone_name" field.
func (ptzlu *PlanTimeZoneLinkUpdate) SetTimezoneName(s string) *PlanTimeZoneLinkUpdate {
	ptzlu.mutation.SetTimezoneName(s)
	return ptzlu
}

// SetNillableTimezoneName sets the "timezone_name" field if the given value is not nil.
func (ptzlu *PlanTimeZoneLinkUpdate) SetNillableTimezoneName(s *string) *PlanTimeZoneLinkUpdate {
	if s != nil {
		ptzlu.SetTimezoneName(*s)
	}
	return ptzlu
}

// ClearTimezoneName clears the value of the "timezone_name" field.
func (ptzlu *PlanTimeZoneLinkUpdate) ClearTimezoneName() *PlanTimeZoneLinkUpdate {
	ptzlu.mutation.ClearTimezoneName()
	return ptzlu
}

// SetUseAlert sets the "use_alert" field.
func (ptzlu *PlanTimeZoneLinkUpdate) SetUseAlert(b bool) *PlanTimeZoneLinkUpdate {
	ptzlu.mutation.SetUseAlert(b)
	return ptzlu
}

// SetNillableUseAlert sets the "use_alert" field if the given value is not nil.
func (ptzlu *PlanTimeZoneLinkUpdate) SetNillableUseAlert(b *bool) *PlanTimeZoneLinkUpdate {
	if b != nil {
		ptzlu.SetUseAlert(*b)
	}
	return ptzlu
}

// SetMeridiem sets the "meridiem" field.
func (ptzlu *PlanTimeZoneLinkUpdate) SetMeridiem(s string) *PlanTimeZoneLinkUpdate {
	ptzlu.mutation.SetMeridiem(s)
	return ptzlu
}

// SetNillableMeridiem sets the "meridiem" field if the given value is not nil.
func (ptzlu *PlanTimeZoneLinkUpdate) SetNillableMeridiem(s *string) *PlanTimeZoneLinkUpdate {
	if s != nil {
		ptzlu.SetMeridiem(*s)
	}
	return ptzlu
}

// SetHour sets the "hour" field.
func (ptzlu *PlanTimeZoneLinkUpdate) SetHour(s string) *PlanTimeZoneLinkUpdate {
	ptzlu.mutation.SetHour(s)
	return ptzlu
}

// SetNillableHour sets the "hour" field if the given value is not nil.
func (ptzlu *PlanTimeZoneLinkUpdate) SetNillableHour(s *string) *PlanTimeZoneLinkUpdate {
	if s != nil {
		ptzlu.SetHour(*s)
	}
	return ptzlu
}

// SetMinute sets the "minute" field.
func (ptzlu *PlanTimeZoneLinkUpdate) SetMinute(s string) *PlanTimeZoneLinkUpdate {
	ptzlu.mutation.SetMinute(s)
	return ptzlu
}

// SetNillableMinute sets the "minute" field if the given value is not nil.
func (ptzlu *PlanTimeZoneLinkUpdate) SetNillableMinute(s *string) *PlanTimeZoneLinkUpdate {
	if s != nil {
		ptzlu.SetMinute(*s)
	}
	return ptzlu
}

// SetCreatedAt sets the "created_at" field.
func (ptzlu *PlanTimeZoneLinkUpdate) SetCreatedAt(t time.Time) *PlanTimeZoneLinkUpdate {
	ptzlu.mutation.SetCreatedAt(t)
	return ptzlu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ptzlu *PlanTimeZoneLinkUpdate) SetNillableCreatedAt(t *time.Time) *PlanTimeZoneLinkUpdate {
	if t != nil {
		ptzlu.SetCreatedAt(*t)
	}
	return ptzlu
}

// SetUpdatedAt sets the "updated_at" field.
func (ptzlu *PlanTimeZoneLinkUpdate) SetUpdatedAt(t time.Time) *PlanTimeZoneLinkUpdate {
	ptzlu.mutation.SetUpdatedAt(t)
	return ptzlu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ptzlu *PlanTimeZoneLinkUpdate) SetNillableUpdatedAt(t *time.Time) *PlanTimeZoneLinkUpdate {
	if t != nil {
		ptzlu.SetUpdatedAt(*t)
	}
	return ptzlu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (ptzlu *PlanTimeZoneLinkUpdate) ClearUpdatedAt() *PlanTimeZoneLinkUpdate {
	ptzlu.mutation.ClearUpdatedAt()
	return ptzlu
}

// Mutation returns the PlanTimeZoneLinkMutation object of the builder.
func (ptzlu *PlanTimeZoneLinkUpdate) Mutation() *PlanTimeZoneLinkMutation {
	return ptzlu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ptzlu *PlanTimeZoneLinkUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ptzlu.sqlSave, ptzlu.mutation, ptzlu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ptzlu *PlanTimeZoneLinkUpdate) SaveX(ctx context.Context) int {
	affected, err := ptzlu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ptzlu *PlanTimeZoneLinkUpdate) Exec(ctx context.Context) error {
	_, err := ptzlu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ptzlu *PlanTimeZoneLinkUpdate) ExecX(ctx context.Context) {
	if err := ptzlu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ptzlu *PlanTimeZoneLinkUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(plantimezonelink.Table, plantimezonelink.Columns, sqlgraph.NewFieldSpec(plantimezonelink.FieldID, field.TypeUUID))
	if ps := ptzlu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ptzlu.mutation.PrescriptionID(); ok {
		_spec.SetField(plantimezonelink.FieldPrescriptionID, field.TypeUUID, value)
	}
	if value, ok := ptzlu.mutation.TimezoneID(); ok {
		_spec.SetField(plantimezonelink.FieldTimezoneID, field.TypeUUID, value)
	}
	if value, ok := ptzlu.mutation.TimezoneName(); ok {
		_spec.SetField(plantimezonelink.FieldTimezoneName, field.TypeString, value)
	}
	if ptzlu.mutation.TimezoneNameCleared() {
		_spec.ClearField(plantimezonelink.FieldTimezoneName, field.TypeString)
	}
	if value, ok := ptzlu.mutation.UseAlert(); ok {
		_spec.SetField(plantimezonelink.FieldUseAlert, field.TypeBool, value)
	}
	if value, ok := ptzlu.mutation.Meridiem(); ok {
		_spec.SetField(plantimezonelink.FieldMeridiem, field.TypeString, value)
	}
	if value, ok := ptzlu.mutation.Hour(); ok {
		_spec.SetField(plantimezonelink.FieldHour, field.TypeString, value)
	}
	if value, ok := ptzlu.mutation.Minute(); ok {
		_spec.SetField(plantimezonelink.FieldMinute, field.TypeString, value)
	}
	if value, ok := ptzlu.mutation.CreatedAt(); ok {
		_spec.SetField(plantimezonelink.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := ptzlu.mutation.UpdatedAt(); ok {
		_spec.SetField(plantimezonelink.FieldUpdatedAt, field.TypeTime, value)
	}
	if ptzlu.mutation.UpdatedAtCleared() {
		_spec.ClearField(plantimezonelink.FieldUpdatedAt, field.TypeTime)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ptzlu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{plantimezonelink.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ptzlu.mutation.done = true
	return n, nil
}

// PlanTimeZoneLinkUpdateOne is the builder for updating a single PlanTimeZoneLink entity.
type PlanTimeZoneLinkUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PlanTimeZoneLinkMutation
}

// SetPrescriptionID sets the "prescription_id" field.
func (ptzluo *PlanTimeZoneLinkUpdateOne) SetPrescriptionID(u uuid.UUID) *PlanTimeZoneLinkUpdateOne {
	ptzluo.mutation.SetPrescriptionID(u)
	return ptzluo
}

// SetNillablePrescriptionID sets the "prescription_id" field if the given value is not nil.
func (ptzluo *PlanTimeZoneLinkUpdateOne) SetNillablePrescriptionID(u *uuid.UUID) *PlanTimeZoneLinkUpdateOne {
	if u != nil {
		ptzluo.SetPrescriptionID(*u)
	}
	return ptzluo
}

// SetTimezoneID sets the "timezone_id" field.
func (ptzluo *PlanTimeZoneLinkUpdateOne) SetTimezoneID(u uuid.UUID) *PlanTimeZoneLinkUpdateOne {
	ptzluo.mutation.SetTimezoneID(u)
	return ptzluo
}

// SetNillableTimezoneID sets the "timezone_id" field if the given value is not nil.
func (ptzluo *PlanTimeZoneLinkUpdateOne) SetNillableTimezoneID(u *uuid.UUID) *PlanTimeZoneLinkUpdateOne {
	if u != nil {
		ptzluo.SetTimezoneID(*u)
	}
	return ptzluo
}

// SetTimezoneName sets the "timezone_name" field.
func (ptzluo *PlanTimeZoneLinkUpdateOne) SetTimezoneName(s string) *PlanTimeZoneLinkUpdateOne {
	ptzluo.mutation.SetTimezoneName(s)
	return ptzluo
}

// SetNillableTimezoneName sets the "timezone_name" field if the given value is not nil.
func (ptzluo *PlanTimeZoneLinkUpdateOne) SetNillableTimezoneName(s *string) *PlanTimeZoneLinkUpdateOne {
	if s != nil {
		ptzluo.SetTimezoneName(*s)
	}
	return ptzluo
}

// ClearTimezoneName clears the value of the "timezone_name" field.
func (ptzluo *PlanTimeZoneLinkUpdateOne) ClearTimezoneName() *PlanTimeZoneLinkUpdateOne {
	ptzluo.mutation.ClearTimezoneName()
	return ptzluo
}

// SetUseAlert sets the "use_alert" field.
func (ptzluo *PlanTimeZoneLinkUpdateOne) SetUseAlert(b bool) *PlanTimeZoneLinkUpdateOne {
	ptzluo.mutation.SetUseAlert(b)
	return ptzluo
}

// SetNillableUseAlert sets the "use_alert" field if the given value is not nil.
func (ptzluo *PlanTimeZoneLinkUpdateOne) SetNillableUseAlert(b *bool) *PlanTimeZoneLinkUpdateOne {
	if b != nil {
		ptzluo.SetUseAlert(*b)
	}
	return ptzluo
}

// SetMeridiem sets the "meridiem" field.
func (ptzluo *PlanTimeZoneLinkUpdateOne) SetMeridiem(s string) *PlanTimeZoneLinkUpdateOne {
	ptzluo.mutation.SetMeridiem(s)
	return ptzluo
}

// SetNillableMeridiem sets the "meridiem" field if the given value is not nil.
func (ptzluo *PlanTimeZoneLinkUpdateOne) SetNillableMeridiem(s *string) *PlanTimeZoneLinkUpdateOne {
	if s != nil {
		ptzluo.SetMeridiem(*s)
	}
	return ptzluo
}

// SetHour sets the "hour" field.
func (ptzluo *PlanTimeZoneLinkUpdateOne) SetHour(s string) *PlanTimeZoneLinkUpdateOne {
	ptzluo.mutation.SetHour(s)
	return ptzluo
}

// SetNillableHour sets the "hour" field if the given value is not nil.
func (ptzluo *PlanTimeZoneLinkUpdateOne) SetNillableHour(s *string) *PlanTimeZoneLinkUpdateOne {
	if s != nil {
		ptzluo.SetHour(*s)
	}
	return ptzluo
}

// SetMinute sets the "minute" field.
func (ptzluo *PlanTimeZoneLinkUpdateOne) SetMinute(s string) *PlanTimeZoneLinkUpdateOne {
	ptzluo.mutation.SetMinute(s)
	return ptzluo
}

// SetNillableMinute sets the "minute" field if the given value is not nil.
func (ptzluo *PlanTimeZoneLinkUpdateOne) SetNillableMinute(s *string) *PlanTimeZoneLinkUpdateOne {
	if s != nil {
		ptzluo.SetMinute(*s)
	}
	return ptzluo
}

// SetCreatedAt sets the "created_at" field.
func (ptzluo *PlanTimeZoneLinkUpdateOne) SetCreatedAt(t time.Time) *PlanTimeZoneLinkUpdateOne {
	ptzluo.mutation.SetCreatedAt(t)
	return ptzluo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ptzluo *PlanTimeZoneLinkUpdateOne) SetNillableCreatedAt(t *time.Time) *PlanTimeZoneLinkUpdateOne {
	if t != nil {
		ptzluo.SetCreatedAt(*t)
	}
	return ptzluo
}

// SetUpdatedAt sets the "updated_at" field.
func (ptzluo *PlanTimeZoneLinkUpdateOne) SetUpdatedAt(t time.Time) *PlanTimeZoneLinkUpdateOne {
	ptzluo.mutation.SetUpdatedAt(t)
	return ptzluo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ptzluo *PlanTimeZoneLinkUpdateOne) SetNillableUpdatedAt(t *time.Time) *PlanTimeZoneLinkUpdateOne {
	if t != nil {
		ptzluo.SetUpdatedAt(*t)
	}
	return ptzluo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (ptzluo *PlanTimeZoneLinkUpdateOne) ClearUpdatedAt() *PlanTimeZoneLinkUpdateOne {
	ptzluo.mutation.ClearUpdatedAt()
	return ptzluo
}

// Mutation returns the PlanTimeZoneLinkMutation object of the builder.
func (ptzluo *PlanTimeZoneLinkUpdateOne) Mutation() *PlanTimeZoneLinkMutation {
	return ptzluo.mutation
}

// Where appends a list predicates to the PlanTimeZoneLinkUpdate builder.
func (ptzluo *PlanTimeZoneLinkUpdateOne) Where(ps ...predicate.PlanTimeZoneLink) *PlanTimeZoneLinkUpdateOne {
	ptzluo.mutation.Where(ps...)
	return ptzluo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ptzluo *PlanTimeZoneLinkUpdateOne) Select(field string, fields ...string) *PlanTimeZoneLinkUpdateOne {
	ptzluo.fields = append([]string{field}, fields...)
	return ptzluo
}

// Save executes the query and returns the updated PlanTimeZoneLink entity.
func (ptzluo *PlanTimeZoneLinkUpdateOne) Save(ctx context.Context) (*PlanTimeZoneLink, error) {
	return withHooks(ctx, ptzluo.sqlSave, ptzluo.mutation, ptzluo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ptzluo *PlanTimeZoneLinkUpdateOne) SaveX(ctx context.Context) *PlanTimeZoneLink {
	node, err := ptzluo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ptzluo *PlanTimeZoneLinkUpdateOne) Exec(ctx context.Context) error {
	_, err := ptzluo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ptzluo *PlanTimeZoneLinkUpdateOne) ExecX(ctx context.Context) {
	if err := ptzluo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ptzluo *PlanTimeZoneLinkUpdateOne) sqlSave(ctx context.Context) (_node *PlanTimeZoneLink, err error) {
	_spec := sqlgraph.NewUpdateSpec(plantimezonelink.Table, plantimezonelink.Columns, sqlgraph.NewFieldSpec(plantimezonelink.FieldID, field.TypeUUID))
	id, ok := ptzluo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "PlanTimeZoneLink.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ptzluo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, plantimezonelink.FieldID)
		for _, f := range fields {
			if !plantimezonelink.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != plantimezonelink.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ptzluo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ptzluo.mutation.PrescriptionID(); ok {
		_spec.SetField(plantimezonelink.FieldPrescriptionID, field.TypeUUID, value)
	}
	if value, ok := ptzluo.mutation.TimezoneID(); ok {
		_spec.SetField(plantimezonelink.FieldTimezoneID, field.TypeUUID, value)
	}
	if value, ok := ptzluo.mutation.TimezoneName(); ok {
		_spec.SetField(plantimezonelink.FieldTimezoneName, field.TypeString, value)
	}
	if ptzluo.mutation.TimezoneNameCleared() {
		_spec.ClearField(plantimezonelink.FieldTimezoneName, field.TypeString)
	}
	if value, ok := ptzluo.mutation.UseAlert(); ok {
		_spec.SetField(plantimezonelink.FieldUseAlert, field.TypeBool, value)
	}
	if value, ok := ptzluo.mutation.Meridiem(); ok {
		_spec.SetField(plantimezonelink.FieldMeridiem, field.TypeString, value)
	}
	if value, ok := ptzluo.mutation.Hour(); ok {
		_spec.SetField(plantimezonelink.FieldHour, field.TypeString, value)
	}
	if value, ok := ptzluo.mutation.Minute(); ok {
		_spec.SetField(plantimezonelink.FieldMinute, field.TypeString, value)
	}
	if value, ok := ptzluo.mutation.CreatedAt(); ok {
		_spec.SetField(plantimezonelink.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := ptzluo.mutation.UpdatedAt(); ok {
		_spec.SetField(plantimezonelink.FieldUpdatedAt, field.TypeTime, value)
	}
	if ptzluo.mutation.UpdatedAtCleared() {
		_spec.ClearField(plantimezonelink.FieldUpdatedAt, field.TypeTime)
	}
	_node = &PlanTimeZoneLink{config: ptzluo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ptzluo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{plantimezonelink.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ptzluo.mutation.done = true
	return _node, nil
}
