// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"nursing_api/pkg/ent/predicate"
	"nursing_api/pkg/ent/prescriptionitem"
	"nursing_api/pkg/ent/takehistoryitem"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// TakeHistoryItemUpdate is the builder for updating TakeHistoryItem entities.
type TakeHistoryItemUpdate struct {
	config
	hooks    []Hook
	mutation *TakeHistoryItemMutation
}

// Where appends a list predicates to the TakeHistoryItemUpdate builder.
func (thiu *TakeHistoryItemUpdate) Where(ps ...predicate.TakeHistoryItem) *TakeHistoryItemUpdate {
	thiu.mutation.Where(ps...)
	return thiu
}

// SetUserID sets the "user_id" field.
func (thiu *TakeHistoryItemUpdate) SetUserID(u uuid.UUID) *TakeHistoryItemUpdate {
	thiu.mutation.SetUserID(u)
	return thiu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (thiu *TakeHistoryItemUpdate) SetNillableUserID(u *uuid.UUID) *TakeHistoryItemUpdate {
	if u != nil {
		thiu.SetUserID(*u)
	}
	return thiu
}

// SetPrescriptionID sets the "prescription_id" field.
func (thiu *TakeHistoryItemUpdate) SetPrescriptionID(u uuid.UUID) *TakeHistoryItemUpdate {
	thiu.mutation.SetPrescriptionID(u)
	return thiu
}

// SetNillablePrescriptionID sets the "prescription_id" field if the given value is not nil.
func (thiu *TakeHistoryItemUpdate) SetNillablePrescriptionID(u *uuid.UUID) *TakeHistoryItemUpdate {
	if u != nil {
		thiu.SetPrescriptionID(*u)
	}
	return thiu
}

// ClearPrescriptionID clears the value of the "prescription_id" field.
func (thiu *TakeHistoryItemUpdate) ClearPrescriptionID() *TakeHistoryItemUpdate {
	thiu.mutation.ClearPrescriptionID()
	return thiu
}

// SetPrescriptionItemID sets the "prescription_item_id" field.
func (thiu *TakeHistoryItemUpdate) SetPrescriptionItemID(u uuid.UUID) *TakeHistoryItemUpdate {
	thiu.mutation.SetPrescriptionItemID(u)
	return thiu
}

// SetNillablePrescriptionItemID sets the "prescription_item_id" field if the given value is not nil.
func (thiu *TakeHistoryItemUpdate) SetNillablePrescriptionItemID(u *uuid.UUID) *TakeHistoryItemUpdate {
	if u != nil {
		thiu.SetPrescriptionItemID(*u)
	}
	return thiu
}

// ClearPrescriptionItemID clears the value of the "prescription_item_id" field.
func (thiu *TakeHistoryItemUpdate) ClearPrescriptionItemID() *TakeHistoryItemUpdate {
	thiu.mutation.ClearPrescriptionItemID()
	return thiu
}

// SetTimezoneID sets the "timezone_id" field.
func (thiu *TakeHistoryItemUpdate) SetTimezoneID(u uuid.UUID) *TakeHistoryItemUpdate {
	thiu.mutation.SetTimezoneID(u)
	return thiu
}

// SetNillableTimezoneID sets the "timezone_id" field if the given value is not nil.
func (thiu *TakeHistoryItemUpdate) SetNillableTimezoneID(u *uuid.UUID) *TakeHistoryItemUpdate {
	if u != nil {
		thiu.SetTimezoneID(*u)
	}
	return thiu
}

// ClearTimezoneID clears the value of the "timezone_id" field.
func (thiu *TakeHistoryItemUpdate) ClearTimezoneID() *TakeHistoryItemUpdate {
	thiu.mutation.ClearTimezoneID()
	return thiu
}

// SetMedicineID sets the "medicine_id" field.
func (thiu *TakeHistoryItemUpdate) SetMedicineID(u uuid.UUID) *TakeHistoryItemUpdate {
	thiu.mutation.SetMedicineID(u)
	return thiu
}

// SetNillableMedicineID sets the "medicine_id" field if the given value is not nil.
func (thiu *TakeHistoryItemUpdate) SetNillableMedicineID(u *uuid.UUID) *TakeHistoryItemUpdate {
	if u != nil {
		thiu.SetMedicineID(*u)
	}
	return thiu
}

// ClearMedicineID clears the value of the "medicine_id" field.
func (thiu *TakeHistoryItemUpdate) ClearMedicineID() *TakeHistoryItemUpdate {
	thiu.mutation.ClearMedicineID()
	return thiu
}

// SetMedicineName sets the "medicine_name" field.
func (thiu *TakeHistoryItemUpdate) SetMedicineName(s string) *TakeHistoryItemUpdate {
	thiu.mutation.SetMedicineName(s)
	return thiu
}

// SetNillableMedicineName sets the "medicine_name" field if the given value is not nil.
func (thiu *TakeHistoryItemUpdate) SetNillableMedicineName(s *string) *TakeHistoryItemUpdate {
	if s != nil {
		thiu.SetMedicineName(*s)
	}
	return thiu
}

// SetTimezoneName sets the "timezone_name" field.
func (thiu *TakeHistoryItemUpdate) SetTimezoneName(s string) *TakeHistoryItemUpdate {
	thiu.mutation.SetTimezoneName(s)
	return thiu
}

// SetNillableTimezoneName sets the "timezone_name" field if the given value is not nil.
func (thiu *TakeHistoryItemUpdate) SetNillableTimezoneName(s *string) *TakeHistoryItemUpdate {
	if s != nil {
		thiu.SetTimezoneName(*s)
	}
	return thiu
}

// ClearTimezoneName clears the value of the "timezone_name" field.
func (thiu *TakeHistoryItemUpdate) ClearTimezoneName() *TakeHistoryItemUpdate {
	thiu.mutation.ClearTimezoneName()
	return thiu
}

// SetMidday sets the "midday" field.
func (thiu *TakeHistoryItemUpdate) SetMidday(s string) *TakeHistoryItemUpdate {
	thiu.mutation.SetMidday(s)
	return thiu
}

// SetNillableMidday sets the "midday" field if the given value is not nil.
func (thiu *TakeHistoryItemUpdate) SetNillableMidday(s *string) *TakeHistoryItemUpdate {
	if s != nil {
		thiu.SetMidday(*s)
	}
	return thiu
}

// SetHour sets the "hour" field.
func (thiu *TakeHistoryItemUpdate) SetHour(s string) *TakeHistoryItemUpdate {
	thiu.mutation.SetHour(s)
	return thiu
}

// SetNillableHour sets the "hour" field if the given value is not nil.
func (thiu *TakeHistoryItemUpdate) SetNillableHour(s *string) *TakeHistoryItemUpdate {
	if s != nil {
		thiu.SetHour(*s)
	}
	return thiu
}

// SetMinute sets the "minute" field.
func (thiu *TakeHistoryItemUpdate) SetMinute(s string) *TakeHistoryItemUpdate {
	thiu.mutation.SetMinute(s)
	return thiu
}

// SetNillableMinute sets the "minute" field if the given value is not nil.
func (thiu *TakeHistoryItemUpdate) SetNillableMinute(s *string) *TakeHistoryItemUpdate {
	if s != nil {
		thiu.SetMinute(*s)
	}
	return thiu
}

// SetTakeStatus sets the "take_status" field.
func (thiu *TakeHistoryItemUpdate) SetTakeStatus(b bool) *TakeHistoryItemUpdate {
	thiu.mutation.SetTakeStatus(b)
	return thiu
}

// SetNillableTakeStatus sets the "take_status" field if the given value is not nil.
func (thiu *TakeHistoryItemUpdate) SetNillableTakeStatus(b *bool) *TakeHistoryItemUpdate {
	if b != nil {
		thiu.SetTakeStatus(*b)
	}
	return thiu
}

// SetTotalAmount sets the "total_amount" field.
func (thiu *TakeHistoryItemUpdate) SetTotalAmount(f float64) *TakeHistoryItemUpdate {
	thiu.mutation.ResetTotalAmount()
	thiu.mutation.SetTotalAmount(f)
	return thiu
}

// SetNillableTotalAmount sets the "total_amount" field if the given value is not nil.
func (thiu *TakeHistoryItemUpdate) SetNillableTotalAmount(f *float64) *TakeHistoryItemUpdate {
	if f != nil {
		thiu.SetTotalAmount(*f)
	}
	return thiu
}

// AddTotalAmount adds f to the "total_amount" field.
func (thiu *TakeHistoryItemUpdate) AddTotalAmount(f float64) *TakeHistoryItemUpdate {
	thiu.mutation.AddTotalAmount(f)
	return thiu
}

// SetRemainAmount sets the "remain_amount" field.
func (thiu *TakeHistoryItemUpdate) SetRemainAmount(f float64) *TakeHistoryItemUpdate {
	thiu.mutation.ResetRemainAmount()
	thiu.mutation.SetRemainAmount(f)
	return thiu
}

// SetNillableRemainAmount sets the "remain_amount" field if the given value is not nil.
func (thiu *TakeHistoryItemUpdate) SetNillableRemainAmount(f *float64) *TakeHistoryItemUpdate {
	if f != nil {
		thiu.SetRemainAmount(*f)
	}
	return thiu
}

// AddRemainAmount adds f to the "remain_amount" field.
func (thiu *TakeHistoryItemUpdate) AddRemainAmount(f float64) *TakeHistoryItemUpdate {
	thiu.mutation.AddRemainAmount(f)
	return thiu
}

// SetTakeAmount sets the "take_amount" field.
func (thiu *TakeHistoryItemUpdate) SetTakeAmount(f float64) *TakeHistoryItemUpdate {
	thiu.mutation.ResetTakeAmount()
	thiu.mutation.SetTakeAmount(f)
	return thiu
}

// SetNillableTakeAmount sets the "take_amount" field if the given value is not nil.
func (thiu *TakeHistoryItemUpdate) SetNillableTakeAmount(f *float64) *TakeHistoryItemUpdate {
	if f != nil {
		thiu.SetTakeAmount(*f)
	}
	return thiu
}

// AddTakeAmount adds f to the "take_amount" field.
func (thiu *TakeHistoryItemUpdate) AddTakeAmount(f float64) *TakeHistoryItemUpdate {
	thiu.mutation.AddTakeAmount(f)
	return thiu
}

// SetTakeUnit sets the "take_unit" field.
func (thiu *TakeHistoryItemUpdate) SetTakeUnit(s string) *TakeHistoryItemUpdate {
	thiu.mutation.SetTakeUnit(s)
	return thiu
}

// SetNillableTakeUnit sets the "take_unit" field if the given value is not nil.
func (thiu *TakeHistoryItemUpdate) SetNillableTakeUnit(s *string) *TakeHistoryItemUpdate {
	if s != nil {
		thiu.SetTakeUnit(*s)
	}
	return thiu
}

// SetTakeDate sets the "take_date" field.
func (thiu *TakeHistoryItemUpdate) SetTakeDate(s string) *TakeHistoryItemUpdate {
	thiu.mutation.SetTakeDate(s)
	return thiu
}

// SetNillableTakeDate sets the "take_date" field if the given value is not nil.
func (thiu *TakeHistoryItemUpdate) SetNillableTakeDate(s *string) *TakeHistoryItemUpdate {
	if s != nil {
		thiu.SetTakeDate(*s)
	}
	return thiu
}

// SetTakeTime sets the "take_time" field.
func (thiu *TakeHistoryItemUpdate) SetTakeTime(s string) *TakeHistoryItemUpdate {
	thiu.mutation.SetTakeTime(s)
	return thiu
}

// SetNillableTakeTime sets the "take_time" field if the given value is not nil.
func (thiu *TakeHistoryItemUpdate) SetNillableTakeTime(s *string) *TakeHistoryItemUpdate {
	if s != nil {
		thiu.SetTakeTime(*s)
	}
	return thiu
}

// SetCreatedAt sets the "created_at" field.
func (thiu *TakeHistoryItemUpdate) SetCreatedAt(t time.Time) *TakeHistoryItemUpdate {
	thiu.mutation.SetCreatedAt(t)
	return thiu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (thiu *TakeHistoryItemUpdate) SetNillableCreatedAt(t *time.Time) *TakeHistoryItemUpdate {
	if t != nil {
		thiu.SetCreatedAt(*t)
	}
	return thiu
}

// SetUpdatedAt sets the "updated_at" field.
func (thiu *TakeHistoryItemUpdate) SetUpdatedAt(t time.Time) *TakeHistoryItemUpdate {
	thiu.mutation.SetUpdatedAt(t)
	return thiu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (thiu *TakeHistoryItemUpdate) SetNillableUpdatedAt(t *time.Time) *TakeHistoryItemUpdate {
	if t != nil {
		thiu.SetUpdatedAt(*t)
	}
	return thiu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (thiu *TakeHistoryItemUpdate) ClearUpdatedAt() *TakeHistoryItemUpdate {
	thiu.mutation.ClearUpdatedAt()
	return thiu
}

// SetPrescriptionItem sets the "prescription_item" edge to the PrescriptionItem entity.
func (thiu *TakeHistoryItemUpdate) SetPrescriptionItem(p *PrescriptionItem) *TakeHistoryItemUpdate {
	return thiu.SetPrescriptionItemID(p.ID)
}

// Mutation returns the TakeHistoryItemMutation object of the builder.
func (thiu *TakeHistoryItemUpdate) Mutation() *TakeHistoryItemMutation {
	return thiu.mutation
}

// ClearPrescriptionItem clears the "prescription_item" edge to the PrescriptionItem entity.
func (thiu *TakeHistoryItemUpdate) ClearPrescriptionItem() *TakeHistoryItemUpdate {
	thiu.mutation.ClearPrescriptionItem()
	return thiu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (thiu *TakeHistoryItemUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, thiu.sqlSave, thiu.mutation, thiu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (thiu *TakeHistoryItemUpdate) SaveX(ctx context.Context) int {
	affected, err := thiu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (thiu *TakeHistoryItemUpdate) Exec(ctx context.Context) error {
	_, err := thiu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (thiu *TakeHistoryItemUpdate) ExecX(ctx context.Context) {
	if err := thiu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (thiu *TakeHistoryItemUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(takehistoryitem.Table, takehistoryitem.Columns, sqlgraph.NewFieldSpec(takehistoryitem.FieldID, field.TypeUUID))
	if ps := thiu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := thiu.mutation.UserID(); ok {
		_spec.SetField(takehistoryitem.FieldUserID, field.TypeUUID, value)
	}
	if value, ok := thiu.mutation.PrescriptionID(); ok {
		_spec.SetField(takehistoryitem.FieldPrescriptionID, field.TypeUUID, value)
	}
	if thiu.mutation.PrescriptionIDCleared() {
		_spec.ClearField(takehistoryitem.FieldPrescriptionID, field.TypeUUID)
	}
	if value, ok := thiu.mutation.TimezoneID(); ok {
		_spec.SetField(takehistoryitem.FieldTimezoneID, field.TypeUUID, value)
	}
	if thiu.mutation.TimezoneIDCleared() {
		_spec.ClearField(takehistoryitem.FieldTimezoneID, field.TypeUUID)
	}
	if value, ok := thiu.mutation.MedicineID(); ok {
		_spec.SetField(takehistoryitem.FieldMedicineID, field.TypeUUID, value)
	}
	if thiu.mutation.MedicineIDCleared() {
		_spec.ClearField(takehistoryitem.FieldMedicineID, field.TypeUUID)
	}
	if value, ok := thiu.mutation.MedicineName(); ok {
		_spec.SetField(takehistoryitem.FieldMedicineName, field.TypeString, value)
	}
	if value, ok := thiu.mutation.TimezoneName(); ok {
		_spec.SetField(takehistoryitem.FieldTimezoneName, field.TypeString, value)
	}
	if thiu.mutation.TimezoneNameCleared() {
		_spec.ClearField(takehistoryitem.FieldTimezoneName, field.TypeString)
	}
	if value, ok := thiu.mutation.Midday(); ok {
		_spec.SetField(takehistoryitem.FieldMidday, field.TypeString, value)
	}
	if value, ok := thiu.mutation.Hour(); ok {
		_spec.SetField(takehistoryitem.FieldHour, field.TypeString, value)
	}
	if value, ok := thiu.mutation.Minute(); ok {
		_spec.SetField(takehistoryitem.FieldMinute, field.TypeString, value)
	}
	if value, ok := thiu.mutation.TakeStatus(); ok {
		_spec.SetField(takehistoryitem.FieldTakeStatus, field.TypeBool, value)
	}
	if value, ok := thiu.mutation.TotalAmount(); ok {
		_spec.SetField(takehistoryitem.FieldTotalAmount, field.TypeFloat64, value)
	}
	if value, ok := thiu.mutation.AddedTotalAmount(); ok {
		_spec.AddField(takehistoryitem.FieldTotalAmount, field.TypeFloat64, value)
	}
	if value, ok := thiu.mutation.RemainAmount(); ok {
		_spec.SetField(takehistoryitem.FieldRemainAmount, field.TypeFloat64, value)
	}
	if value, ok := thiu.mutation.AddedRemainAmount(); ok {
		_spec.AddField(takehistoryitem.FieldRemainAmount, field.TypeFloat64, value)
	}
	if value, ok := thiu.mutation.TakeAmount(); ok {
		_spec.SetField(takehistoryitem.FieldTakeAmount, field.TypeFloat64, value)
	}
	if value, ok := thiu.mutation.AddedTakeAmount(); ok {
		_spec.AddField(takehistoryitem.FieldTakeAmount, field.TypeFloat64, value)
	}
	if value, ok := thiu.mutation.TakeUnit(); ok {
		_spec.SetField(takehistoryitem.FieldTakeUnit, field.TypeString, value)
	}
	if value, ok := thiu.mutation.TakeDate(); ok {
		_spec.SetField(takehistoryitem.FieldTakeDate, field.TypeString, value)
	}
	if value, ok := thiu.mutation.TakeTime(); ok {
		_spec.SetField(takehistoryitem.FieldTakeTime, field.TypeString, value)
	}
	if value, ok := thiu.mutation.CreatedAt(); ok {
		_spec.SetField(takehistoryitem.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := thiu.mutation.UpdatedAt(); ok {
		_spec.SetField(takehistoryitem.FieldUpdatedAt, field.TypeTime, value)
	}
	if thiu.mutation.UpdatedAtCleared() {
		_spec.ClearField(takehistoryitem.FieldUpdatedAt, field.TypeTime)
	}
	if thiu.mutation.PrescriptionItemCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   takehistoryitem.PrescriptionItemTable,
			Columns: []string{takehistoryitem.PrescriptionItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(prescriptionitem.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := thiu.mutation.PrescriptionItemIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   takehistoryitem.PrescriptionItemTable,
			Columns: []string{takehistoryitem.PrescriptionItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(prescriptionitem.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, thiu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{takehistoryitem.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	thiu.mutation.done = true
	return n, nil
}

// TakeHistoryItemUpdateOne is the builder for updating a single TakeHistoryItem entity.
type TakeHistoryItemUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TakeHistoryItemMutation
}

// SetUserID sets the "user_id" field.
func (thiuo *TakeHistoryItemUpdateOne) SetUserID(u uuid.UUID) *TakeHistoryItemUpdateOne {
	thiuo.mutation.SetUserID(u)
	return thiuo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (thiuo *TakeHistoryItemUpdateOne) SetNillableUserID(u *uuid.UUID) *TakeHistoryItemUpdateOne {
	if u != nil {
		thiuo.SetUserID(*u)
	}
	return thiuo
}

// SetPrescriptionID sets the "prescription_id" field.
func (thiuo *TakeHistoryItemUpdateOne) SetPrescriptionID(u uuid.UUID) *TakeHistoryItemUpdateOne {
	thiuo.mutation.SetPrescriptionID(u)
	return thiuo
}

// SetNillablePrescriptionID sets the "prescription_id" field if the given value is not nil.
func (thiuo *TakeHistoryItemUpdateOne) SetNillablePrescriptionID(u *uuid.UUID) *TakeHistoryItemUpdateOne {
	if u != nil {
		thiuo.SetPrescriptionID(*u)
	}
	return thiuo
}

// ClearPrescriptionID clears the value of the "prescription_id" field.
func (thiuo *TakeHistoryItemUpdateOne) ClearPrescriptionID() *TakeHistoryItemUpdateOne {
	thiuo.mutation.ClearPrescriptionID()
	return thiuo
}

// SetPrescriptionItemID sets the "prescription_item_id" field.
func (thiuo *TakeHistoryItemUpdateOne) SetPrescriptionItemID(u uuid.UUID) *TakeHistoryItemUpdateOne {
	thiuo.mutation.SetPrescriptionItemID(u)
	return thiuo
}

// SetNillablePrescriptionItemID sets the "prescription_item_id" field if the given value is not nil.
func (thiuo *TakeHistoryItemUpdateOne) SetNillablePrescriptionItemID(u *uuid.UUID) *TakeHistoryItemUpdateOne {
	if u != nil {
		thiuo.SetPrescriptionItemID(*u)
	}
	return thiuo
}

// ClearPrescriptionItemID clears the value of the "prescription_item_id" field.
func (thiuo *TakeHistoryItemUpdateOne) ClearPrescriptionItemID() *TakeHistoryItemUpdateOne {
	thiuo.mutation.ClearPrescriptionItemID()
	return thiuo
}

// SetTimezoneID sets the "timezone_id" field.
func (thiuo *TakeHistoryItemUpdateOne) SetTimezoneID(u uuid.UUID) *TakeHistoryItemUpdateOne {
	thiuo.mutation.SetTimezoneID(u)
	return thiuo
}

// SetNillableTimezoneID sets the "timezone_id" field if the given value is not nil.
func (thiuo *TakeHistoryItemUpdateOne) SetNillableTimezoneID(u *uuid.UUID) *TakeHistoryItemUpdateOne {
	if u != nil {
		thiuo.SetTimezoneID(*u)
	}
	return thiuo
}

// ClearTimezoneID clears the value of the "timezone_id" field.
func (thiuo *TakeHistoryItemUpdateOne) ClearTimezoneID() *TakeHistoryItemUpdateOne {
	thiuo.mutation.ClearTimezoneID()
	return thiuo
}

// SetMedicineID sets the "medicine_id" field.
func (thiuo *TakeHistoryItemUpdateOne) SetMedicineID(u uuid.UUID) *TakeHistoryItemUpdateOne {
	thiuo.mutation.SetMedicineID(u)
	return thiuo
}

// SetNillableMedicineID sets the "medicine_id" field if the given value is not nil.
func (thiuo *TakeHistoryItemUpdateOne) SetNillableMedicineID(u *uuid.UUID) *TakeHistoryItemUpdateOne {
	if u != nil {
		thiuo.SetMedicineID(*u)
	}
	return thiuo
}

// ClearMedicineID clears the value of the "medicine_id" field.
func (thiuo *TakeHistoryItemUpdateOne) ClearMedicineID() *TakeHistoryItemUpdateOne {
	thiuo.mutation.ClearMedicineID()
	return thiuo
}

// SetMedicineName sets the "medicine_name" field.
func (thiuo *TakeHistoryItemUpdateOne) SetMedicineName(s string) *TakeHistoryItemUpdateOne {
	thiuo.mutation.SetMedicineName(s)
	return thiuo
}

// SetNillableMedicineName sets the "medicine_name" field if the given value is not nil.
func (thiuo *TakeHistoryItemUpdateOne) SetNillableMedicineName(s *string) *TakeHistoryItemUpdateOne {
	if s != nil {
		thiuo.SetMedicineName(*s)
	}
	return thiuo
}

// SetTimezoneName sets the "timezone_name" field.
func (thiuo *TakeHistoryItemUpdateOne) SetTimezoneName(s string) *TakeHistoryItemUpdateOne {
	thiuo.mutation.SetTimezoneName(s)
	return thiuo
}

// SetNillableTimezoneName sets the "timezone_name" field if the given value is not nil.
func (thiuo *TakeHistoryItemUpdateOne) SetNillableTimezoneName(s *string) *TakeHistoryItemUpdateOne {
	if s != nil {
		thiuo.SetTimezoneName(*s)
	}
	return thiuo
}

// ClearTimezoneName clears the value of the "timezone_name" field.
func (thiuo *TakeHistoryItemUpdateOne) ClearTimezoneName() *TakeHistoryItemUpdateOne {
	thiuo.mutation.ClearTimezoneName()
	return thiuo
}

// SetMidday sets the "midday" field.
func (thiuo *TakeHistoryItemUpdateOne) SetMidday(s string) *TakeHistoryItemUpdateOne {
	thiuo.mutation.SetMidday(s)
	return thiuo
}

// SetNillableMidday sets the "midday" field if the given value is not nil.
func (thiuo *TakeHistoryItemUpdateOne) SetNillableMidday(s *string) *TakeHistoryItemUpdateOne {
	if s != nil {
		thiuo.SetMidday(*s)
	}
	return thiuo
}

// SetHour sets the "hour" field.
func (thiuo *TakeHistoryItemUpdateOne) SetHour(s string) *TakeHistoryItemUpdateOne {
	thiuo.mutation.SetHour(s)
	return thiuo
}

// SetNillableHour sets the "hour" field if the given value is not nil.
func (thiuo *TakeHistoryItemUpdateOne) SetNillableHour(s *string) *TakeHistoryItemUpdateOne {
	if s != nil {
		thiuo.SetHour(*s)
	}
	return thiuo
}

// SetMinute sets the "minute" field.
func (thiuo *TakeHistoryItemUpdateOne) SetMinute(s string) *TakeHistoryItemUpdateOne {
	thiuo.mutation.SetMinute(s)
	return thiuo
}

// SetNillableMinute sets the "minute" field if the given value is not nil.
func (thiuo *TakeHistoryItemUpdateOne) SetNillableMinute(s *string) *TakeHistoryItemUpdateOne {
	if s != nil {
		thiuo.SetMinute(*s)
	}
	return thiuo
}

// SetTakeStatus sets the "take_status" field.
func (thiuo *TakeHistoryItemUpdateOne) SetTakeStatus(b bool) *TakeHistoryItemUpdateOne {
	thiuo.mutation.SetTakeStatus(b)
	return thiuo
}

// SetNillableTakeStatus sets the "take_status" field if the given value is not nil.
func (thiuo *TakeHistoryItemUpdateOne) SetNillableTakeStatus(b *bool) *TakeHistoryItemUpdateOne {
	if b != nil {
		thiuo.SetTakeStatus(*b)
	}
	return thiuo
}

// SetTotalAmount sets the "total_amount" field.
func (thiuo *TakeHistoryItemUpdateOne) SetTotalAmount(f float64) *TakeHistoryItemUpdateOne {
	thiuo.mutation.ResetTotalAmount()
	thiuo.mutation.SetTotalAmount(f)
	return thiuo
}

// SetNillableTotalAmount sets the "total_amount" field if the given value is not nil.
func (thiuo *TakeHistoryItemUpdateOne) SetNillableTotalAmount(f *float64) *TakeHistoryItemUpdateOne {
	if f != nil {
		thiuo.SetTotalAmount(*f)
	}
	return thiuo
}

// AddTotalAmount adds f to the "total_amount" field.
func (thiuo *TakeHistoryItemUpdateOne) AddTotalAmount(f float64) *TakeHistoryItemUpdateOne {
	thiuo.mutation.AddTotalAmount(f)
	return thiuo
}

// SetRemainAmount sets the "remain_amount" field.
func (thiuo *TakeHistoryItemUpdateOne) SetRemainAmount(f float64) *TakeHistoryItemUpdateOne {
	thiuo.mutation.ResetRemainAmount()
	thiuo.mutation.SetRemainAmount(f)
	return thiuo
}

// SetNillableRemainAmount sets the "remain_amount" field if the given value is not nil.
func (thiuo *TakeHistoryItemUpdateOne) SetNillableRemainAmount(f *float64) *TakeHistoryItemUpdateOne {
	if f != nil {
		thiuo.SetRemainAmount(*f)
	}
	return thiuo
}

// AddRemainAmount adds f to the "remain_amount" field.
func (thiuo *TakeHistoryItemUpdateOne) AddRemainAmount(f float64) *TakeHistoryItemUpdateOne {
	thiuo.mutation.AddRemainAmount(f)
	return thiuo
}

// SetTakeAmount sets the "take_amount" field.
func (thiuo *TakeHistoryItemUpdateOne) SetTakeAmount(f float64) *TakeHistoryItemUpdateOne {
	thiuo.mutation.ResetTakeAmount()
	thiuo.mutation.SetTakeAmount(f)
	return thiuo
}

// SetNillableTakeAmount sets the "take_amount" field if the given value is not nil.
func (thiuo *TakeHistoryItemUpdateOne) SetNillableTakeAmount(f *float64) *TakeHistoryItemUpdateOne {
	if f != nil {
		thiuo.SetTakeAmount(*f)
	}
	return thiuo
}

// AddTakeAmount adds f to the "take_amount" field.
func (thiuo *TakeHistoryItemUpdateOne) AddTakeAmount(f float64) *TakeHistoryItemUpdateOne {
	thiuo.mutation.AddTakeAmount(f)
	return thiuo
}

// SetTakeUnit sets the "take_unit" field.
func (thiuo *TakeHistoryItemUpdateOne) SetTakeUnit(s string) *TakeHistoryItemUpdateOne {
	thiuo.mutation.SetTakeUnit(s)
	return thiuo
}

// SetNillableTakeUnit sets the "take_unit" field if the given value is not nil.
func (thiuo *TakeHistoryItemUpdateOne) SetNillableTakeUnit(s *string) *TakeHistoryItemUpdateOne {
	if s != nil {
		thiuo.SetTakeUnit(*s)
	}
	return thiuo
}

// SetTakeDate sets the "take_date" field.
func (thiuo *TakeHistoryItemUpdateOne) SetTakeDate(s string) *TakeHistoryItemUpdateOne {
	thiuo.mutation.SetTakeDate(s)
	return thiuo
}

// SetNillableTakeDate sets the "take_date" field if the given value is not nil.
func (thiuo *TakeHistoryItemUpdateOne) SetNillableTakeDate(s *string) *TakeHistoryItemUpdateOne {
	if s != nil {
		thiuo.SetTakeDate(*s)
	}
	return thiuo
}

// SetTakeTime sets the "take_time" field.
func (thiuo *TakeHistoryItemUpdateOne) SetTakeTime(s string) *TakeHistoryItemUpdateOne {
	thiuo.mutation.SetTakeTime(s)
	return thiuo
}

// SetNillableTakeTime sets the "take_time" field if the given value is not nil.
func (thiuo *TakeHistoryItemUpdateOne) SetNillableTakeTime(s *string) *TakeHistoryItemUpdateOne {
	if s != nil {
		thiuo.SetTakeTime(*s)
	}
	return thiuo
}

// SetCreatedAt sets the "created_at" field.
func (thiuo *TakeHistoryItemUpdateOne) SetCreatedAt(t time.Time) *TakeHistoryItemUpdateOne {
	thiuo.mutation.SetCreatedAt(t)
	return thiuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (thiuo *TakeHistoryItemUpdateOne) SetNillableCreatedAt(t *time.Time) *TakeHistoryItemUpdateOne {
	if t != nil {
		thiuo.SetCreatedAt(*t)
	}
	return thiuo
}

// SetUpdatedAt sets the "updated_at" field.
func (thiuo *TakeHistoryItemUpdateOne) SetUpdatedAt(t time.Time) *TakeHistoryItemUpdateOne {
	thiuo.mutation.SetUpdatedAt(t)
	return thiuo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (thiuo *TakeHistoryItemUpdateOne) SetNillableUpdatedAt(t *time.Time) *TakeHistoryItemUpdateOne {
	if t != nil {
		thiuo.SetUpdatedAt(*t)
	}
	return thiuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (thiuo *TakeHistoryItemUpdateOne) ClearUpdatedAt() *TakeHistoryItemUpdateOne {
	thiuo.mutation.ClearUpdatedAt()
	return thiuo
}

// SetPrescriptionItem sets the "prescription_item" edge to the PrescriptionItem entity.
func (thiuo *TakeHistoryItemUpdateOne) SetPrescriptionItem(p *PrescriptionItem) *TakeHistoryItemUpdateOne {
	return thiuo.SetPrescriptionItemID(p.ID)
}

// Mutation returns the TakeHistoryItemMutation object of the builder.
func (thiuo *TakeHistoryItemUpdateOne) Mutation() *TakeHistoryItemMutation {
	return thiuo.mutation
}

// ClearPrescriptionItem clears the "prescription_item" edge to the PrescriptionItem entity.
func (thiuo *TakeHistoryItemUpdateOne) ClearPrescriptionItem() *TakeHistoryItemUpdateOne {
	thiuo.mutation.ClearPrescriptionItem()
	return thiuo
}

// Where appends a list predicates to the TakeHistoryItemUpdate builder.
func (thiuo *TakeHistoryItemUpdateOne) Where(ps ...predicate.TakeHistoryItem) *TakeHistoryItemUpdateOne {
	thiuo.mutation.Where(ps...)
	return thiuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (thiuo *TakeHistoryItemUpdateOne) Select(field string, fields ...string) *TakeHistoryItemUpdateOne {
	thiuo.fields = append([]string{field}, fields...)
	return thiuo
}

// Save executes the query and returns the updated TakeHistoryItem entity.
func (thiuo *TakeHistoryItemUpdateOne) Save(ctx context.Context) (*TakeHistoryItem, error) {
	return withHooks(ctx, thiuo.sqlSave, thiuo.mutation, thiuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (thiuo *TakeHistoryItemUpdateOne) SaveX(ctx context.Context) *TakeHistoryItem {
	node, err := thiuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (thiuo *TakeHistoryItemUpdateOne) Exec(ctx context.Context) error {
	_, err := thiuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (thiuo *TakeHistoryItemUpdateOne) ExecX(ctx context.Context) {
	if err := thiuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (thiuo *TakeHistoryItemUpdateOne) sqlSave(ctx context.Context) (_node *TakeHistoryItem, err error) {
	_spec := sqlgraph.NewUpdateSpec(takehistoryitem.Table, takehistoryitem.Columns, sqlgraph.NewFieldSpec(takehistoryitem.FieldID, field.TypeUUID))
	id, ok := thiuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "TakeHistoryItem.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := thiuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, takehistoryitem.FieldID)
		for _, f := range fields {
			if !takehistoryitem.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != takehistoryitem.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := thiuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := thiuo.mutation.UserID(); ok {
		_spec.SetField(takehistoryitem.FieldUserID, field.TypeUUID, value)
	}
	if value, ok := thiuo.mutation.PrescriptionID(); ok {
		_spec.SetField(takehistoryitem.FieldPrescriptionID, field.TypeUUID, value)
	}
	if thiuo.mutation.PrescriptionIDCleared() {
		_spec.ClearField(takehistoryitem.FieldPrescriptionID, field.TypeUUID)
	}
	if value, ok := thiuo.mutation.TimezoneID(); ok {
		_spec.SetField(takehistoryitem.FieldTimezoneID, field.TypeUUID, value)
	}
	if thiuo.mutation.TimezoneIDCleared() {
		_spec.ClearField(takehistoryitem.FieldTimezoneID, field.TypeUUID)
	}
	if value, ok := thiuo.mutation.MedicineID(); ok {
		_spec.SetField(takehistoryitem.FieldMedicineID, field.TypeUUID, value)
	}
	if thiuo.mutation.MedicineIDCleared() {
		_spec.ClearField(takehistoryitem.FieldMedicineID, field.TypeUUID)
	}
	if value, ok := thiuo.mutation.MedicineName(); ok {
		_spec.SetField(takehistoryitem.FieldMedicineName, field.TypeString, value)
	}
	if value, ok := thiuo.mutation.TimezoneName(); ok {
		_spec.SetField(takehistoryitem.FieldTimezoneName, field.TypeString, value)
	}
	if thiuo.mutation.TimezoneNameCleared() {
		_spec.ClearField(takehistoryitem.FieldTimezoneName, field.TypeString)
	}
	if value, ok := thiuo.mutation.Midday(); ok {
		_spec.SetField(takehistoryitem.FieldMidday, field.TypeString, value)
	}
	if value, ok := thiuo.mutation.Hour(); ok {
		_spec.SetField(takehistoryitem.FieldHour, field.TypeString, value)
	}
	if value, ok := thiuo.mutation.Minute(); ok {
		_spec.SetField(takehistoryitem.FieldMinute, field.TypeString, value)
	}
	if value, ok := thiuo.mutation.TakeStatus(); ok {
		_spec.SetField(takehistoryitem.FieldTakeStatus, field.TypeBool, value)
	}
	if value, ok := thiuo.mutation.TotalAmount(); ok {
		_spec.SetField(takehistoryitem.FieldTotalAmount, field.TypeFloat64, value)
	}
	if value, ok := thiuo.mutation.AddedTotalAmount(); ok {
		_spec.AddField(takehistoryitem.FieldTotalAmount, field.TypeFloat64, value)
	}
	if value, ok := thiuo.mutation.RemainAmount(); ok {
		_spec.SetField(takehistoryitem.FieldRemainAmount, field.TypeFloat64, value)
	}
	if value, ok := thiuo.mutation.AddedRemainAmount(); ok {
		_spec.AddField(takehistoryitem.FieldRemainAmount, field.TypeFloat64, value)
	}
	if value, ok := thiuo.mutation.TakeAmount(); ok {
		_spec.SetField(takehistoryitem.FieldTakeAmount, field.TypeFloat64, value)
	}
	if value, ok := thiuo.mutation.AddedTakeAmount(); ok {
		_spec.AddField(takehistoryitem.FieldTakeAmount, field.TypeFloat64, value)
	}
	if value, ok := thiuo.mutation.TakeUnit(); ok {
		_spec.SetField(takehistoryitem.FieldTakeUnit, field.TypeString, value)
	}
	if value, ok := thiuo.mutation.TakeDate(); ok {
		_spec.SetField(takehistoryitem.FieldTakeDate, field.TypeString, value)
	}
	if value, ok := thiuo.mutation.TakeTime(); ok {
		_spec.SetField(takehistoryitem.FieldTakeTime, field.TypeString, value)
	}
	if value, ok := thiuo.mutation.CreatedAt(); ok {
		_spec.SetField(takehistoryitem.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := thiuo.mutation.UpdatedAt(); ok {
		_spec.SetField(takehistoryitem.FieldUpdatedAt, field.TypeTime, value)
	}
	if thiuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(takehistoryitem.FieldUpdatedAt, field.TypeTime)
	}
	if thiuo.mutation.PrescriptionItemCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   takehistoryitem.PrescriptionItemTable,
			Columns: []string{takehistoryitem.PrescriptionItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(prescriptionitem.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := thiuo.mutation.PrescriptionItemIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   takehistoryitem.PrescriptionItemTable,
			Columns: []string{takehistoryitem.PrescriptionItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(prescriptionitem.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &TakeHistoryItem{config: thiuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, thiuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{takehistoryitem.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	thiuo.mutation.done = true
	return _node, nil
}
