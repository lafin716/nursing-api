// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"nursing_api/pkg/ent/predicate"
	"nursing_api/pkg/ent/takehistoryitem"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// TakeHistoryItemUpdate is the builder for updating TakeHistoryItem entities.
type TakeHistoryItemUpdate struct {
	config
	hooks    []Hook
	mutation *TakeHistoryItemMutation
}

// Where appends a list predicates to the TakeHistoryItemUpdate builder.
func (thiu *TakeHistoryItemUpdate) Where(ps ...predicate.TakeHistoryItem) *TakeHistoryItemUpdate {
	thiu.mutation.Where(ps...)
	return thiu
}

// SetUserID sets the "user_id" field.
func (thiu *TakeHistoryItemUpdate) SetUserID(u uuid.UUID) *TakeHistoryItemUpdate {
	thiu.mutation.SetUserID(u)
	return thiu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (thiu *TakeHistoryItemUpdate) SetNillableUserID(u *uuid.UUID) *TakeHistoryItemUpdate {
	if u != nil {
		thiu.SetUserID(*u)
	}
	return thiu
}

// SetTakeHistoryID sets the "take_history_id" field.
func (thiu *TakeHistoryItemUpdate) SetTakeHistoryID(u uuid.UUID) *TakeHistoryItemUpdate {
	thiu.mutation.SetTakeHistoryID(u)
	return thiu
}

// SetNillableTakeHistoryID sets the "take_history_id" field if the given value is not nil.
func (thiu *TakeHistoryItemUpdate) SetNillableTakeHistoryID(u *uuid.UUID) *TakeHistoryItemUpdate {
	if u != nil {
		thiu.SetTakeHistoryID(*u)
	}
	return thiu
}

// SetPrescriptionItemID sets the "prescription_item_id" field.
func (thiu *TakeHistoryItemUpdate) SetPrescriptionItemID(u uuid.UUID) *TakeHistoryItemUpdate {
	thiu.mutation.SetPrescriptionItemID(u)
	return thiu
}

// SetNillablePrescriptionItemID sets the "prescription_item_id" field if the given value is not nil.
func (thiu *TakeHistoryItemUpdate) SetNillablePrescriptionItemID(u *uuid.UUID) *TakeHistoryItemUpdate {
	if u != nil {
		thiu.SetPrescriptionItemID(*u)
	}
	return thiu
}

// SetTakeStatus sets the "take_status" field.
func (thiu *TakeHistoryItemUpdate) SetTakeStatus(s string) *TakeHistoryItemUpdate {
	thiu.mutation.SetTakeStatus(s)
	return thiu
}

// SetNillableTakeStatus sets the "take_status" field if the given value is not nil.
func (thiu *TakeHistoryItemUpdate) SetNillableTakeStatus(s *string) *TakeHistoryItemUpdate {
	if s != nil {
		thiu.SetTakeStatus(*s)
	}
	return thiu
}

// SetTakeAmount sets the "take_amount" field.
func (thiu *TakeHistoryItemUpdate) SetTakeAmount(f float64) *TakeHistoryItemUpdate {
	thiu.mutation.ResetTakeAmount()
	thiu.mutation.SetTakeAmount(f)
	return thiu
}

// SetNillableTakeAmount sets the "take_amount" field if the given value is not nil.
func (thiu *TakeHistoryItemUpdate) SetNillableTakeAmount(f *float64) *TakeHistoryItemUpdate {
	if f != nil {
		thiu.SetTakeAmount(*f)
	}
	return thiu
}

// AddTakeAmount adds f to the "take_amount" field.
func (thiu *TakeHistoryItemUpdate) AddTakeAmount(f float64) *TakeHistoryItemUpdate {
	thiu.mutation.AddTakeAmount(f)
	return thiu
}

// SetTakeUnit sets the "take_unit" field.
func (thiu *TakeHistoryItemUpdate) SetTakeUnit(s string) *TakeHistoryItemUpdate {
	thiu.mutation.SetTakeUnit(s)
	return thiu
}

// SetNillableTakeUnit sets the "take_unit" field if the given value is not nil.
func (thiu *TakeHistoryItemUpdate) SetNillableTakeUnit(s *string) *TakeHistoryItemUpdate {
	if s != nil {
		thiu.SetTakeUnit(*s)
	}
	return thiu
}

// SetMemo sets the "memo" field.
func (thiu *TakeHistoryItemUpdate) SetMemo(s string) *TakeHistoryItemUpdate {
	thiu.mutation.SetMemo(s)
	return thiu
}

// SetNillableMemo sets the "memo" field if the given value is not nil.
func (thiu *TakeHistoryItemUpdate) SetNillableMemo(s *string) *TakeHistoryItemUpdate {
	if s != nil {
		thiu.SetMemo(*s)
	}
	return thiu
}

// ClearMemo clears the value of the "memo" field.
func (thiu *TakeHistoryItemUpdate) ClearMemo() *TakeHistoryItemUpdate {
	thiu.mutation.ClearMemo()
	return thiu
}

// SetTakeDate sets the "take_date" field.
func (thiu *TakeHistoryItemUpdate) SetTakeDate(t time.Time) *TakeHistoryItemUpdate {
	thiu.mutation.SetTakeDate(t)
	return thiu
}

// SetNillableTakeDate sets the "take_date" field if the given value is not nil.
func (thiu *TakeHistoryItemUpdate) SetNillableTakeDate(t *time.Time) *TakeHistoryItemUpdate {
	if t != nil {
		thiu.SetTakeDate(*t)
	}
	return thiu
}

// SetCreatedAt sets the "created_at" field.
func (thiu *TakeHistoryItemUpdate) SetCreatedAt(t time.Time) *TakeHistoryItemUpdate {
	thiu.mutation.SetCreatedAt(t)
	return thiu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (thiu *TakeHistoryItemUpdate) SetNillableCreatedAt(t *time.Time) *TakeHistoryItemUpdate {
	if t != nil {
		thiu.SetCreatedAt(*t)
	}
	return thiu
}

// SetUpdatedAt sets the "updated_at" field.
func (thiu *TakeHistoryItemUpdate) SetUpdatedAt(t time.Time) *TakeHistoryItemUpdate {
	thiu.mutation.SetUpdatedAt(t)
	return thiu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (thiu *TakeHistoryItemUpdate) SetNillableUpdatedAt(t *time.Time) *TakeHistoryItemUpdate {
	if t != nil {
		thiu.SetUpdatedAt(*t)
	}
	return thiu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (thiu *TakeHistoryItemUpdate) ClearUpdatedAt() *TakeHistoryItemUpdate {
	thiu.mutation.ClearUpdatedAt()
	return thiu
}

// Mutation returns the TakeHistoryItemMutation object of the builder.
func (thiu *TakeHistoryItemUpdate) Mutation() *TakeHistoryItemMutation {
	return thiu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (thiu *TakeHistoryItemUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, thiu.sqlSave, thiu.mutation, thiu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (thiu *TakeHistoryItemUpdate) SaveX(ctx context.Context) int {
	affected, err := thiu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (thiu *TakeHistoryItemUpdate) Exec(ctx context.Context) error {
	_, err := thiu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (thiu *TakeHistoryItemUpdate) ExecX(ctx context.Context) {
	if err := thiu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (thiu *TakeHistoryItemUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(takehistoryitem.Table, takehistoryitem.Columns, sqlgraph.NewFieldSpec(takehistoryitem.FieldID, field.TypeUUID))
	if ps := thiu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := thiu.mutation.UserID(); ok {
		_spec.SetField(takehistoryitem.FieldUserID, field.TypeUUID, value)
	}
	if value, ok := thiu.mutation.TakeHistoryID(); ok {
		_spec.SetField(takehistoryitem.FieldTakeHistoryID, field.TypeUUID, value)
	}
	if value, ok := thiu.mutation.PrescriptionItemID(); ok {
		_spec.SetField(takehistoryitem.FieldPrescriptionItemID, field.TypeUUID, value)
	}
	if value, ok := thiu.mutation.TakeStatus(); ok {
		_spec.SetField(takehistoryitem.FieldTakeStatus, field.TypeString, value)
	}
	if value, ok := thiu.mutation.TakeAmount(); ok {
		_spec.SetField(takehistoryitem.FieldTakeAmount, field.TypeFloat64, value)
	}
	if value, ok := thiu.mutation.AddedTakeAmount(); ok {
		_spec.AddField(takehistoryitem.FieldTakeAmount, field.TypeFloat64, value)
	}
	if value, ok := thiu.mutation.TakeUnit(); ok {
		_spec.SetField(takehistoryitem.FieldTakeUnit, field.TypeString, value)
	}
	if value, ok := thiu.mutation.Memo(); ok {
		_spec.SetField(takehistoryitem.FieldMemo, field.TypeString, value)
	}
	if thiu.mutation.MemoCleared() {
		_spec.ClearField(takehistoryitem.FieldMemo, field.TypeString)
	}
	if value, ok := thiu.mutation.TakeDate(); ok {
		_spec.SetField(takehistoryitem.FieldTakeDate, field.TypeTime, value)
	}
	if value, ok := thiu.mutation.CreatedAt(); ok {
		_spec.SetField(takehistoryitem.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := thiu.mutation.UpdatedAt(); ok {
		_spec.SetField(takehistoryitem.FieldUpdatedAt, field.TypeTime, value)
	}
	if thiu.mutation.UpdatedAtCleared() {
		_spec.ClearField(takehistoryitem.FieldUpdatedAt, field.TypeTime)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, thiu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{takehistoryitem.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	thiu.mutation.done = true
	return n, nil
}

// TakeHistoryItemUpdateOne is the builder for updating a single TakeHistoryItem entity.
type TakeHistoryItemUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TakeHistoryItemMutation
}

// SetUserID sets the "user_id" field.
func (thiuo *TakeHistoryItemUpdateOne) SetUserID(u uuid.UUID) *TakeHistoryItemUpdateOne {
	thiuo.mutation.SetUserID(u)
	return thiuo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (thiuo *TakeHistoryItemUpdateOne) SetNillableUserID(u *uuid.UUID) *TakeHistoryItemUpdateOne {
	if u != nil {
		thiuo.SetUserID(*u)
	}
	return thiuo
}

// SetTakeHistoryID sets the "take_history_id" field.
func (thiuo *TakeHistoryItemUpdateOne) SetTakeHistoryID(u uuid.UUID) *TakeHistoryItemUpdateOne {
	thiuo.mutation.SetTakeHistoryID(u)
	return thiuo
}

// SetNillableTakeHistoryID sets the "take_history_id" field if the given value is not nil.
func (thiuo *TakeHistoryItemUpdateOne) SetNillableTakeHistoryID(u *uuid.UUID) *TakeHistoryItemUpdateOne {
	if u != nil {
		thiuo.SetTakeHistoryID(*u)
	}
	return thiuo
}

// SetPrescriptionItemID sets the "prescription_item_id" field.
func (thiuo *TakeHistoryItemUpdateOne) SetPrescriptionItemID(u uuid.UUID) *TakeHistoryItemUpdateOne {
	thiuo.mutation.SetPrescriptionItemID(u)
	return thiuo
}

// SetNillablePrescriptionItemID sets the "prescription_item_id" field if the given value is not nil.
func (thiuo *TakeHistoryItemUpdateOne) SetNillablePrescriptionItemID(u *uuid.UUID) *TakeHistoryItemUpdateOne {
	if u != nil {
		thiuo.SetPrescriptionItemID(*u)
	}
	return thiuo
}

// SetTakeStatus sets the "take_status" field.
func (thiuo *TakeHistoryItemUpdateOne) SetTakeStatus(s string) *TakeHistoryItemUpdateOne {
	thiuo.mutation.SetTakeStatus(s)
	return thiuo
}

// SetNillableTakeStatus sets the "take_status" field if the given value is not nil.
func (thiuo *TakeHistoryItemUpdateOne) SetNillableTakeStatus(s *string) *TakeHistoryItemUpdateOne {
	if s != nil {
		thiuo.SetTakeStatus(*s)
	}
	return thiuo
}

// SetTakeAmount sets the "take_amount" field.
func (thiuo *TakeHistoryItemUpdateOne) SetTakeAmount(f float64) *TakeHistoryItemUpdateOne {
	thiuo.mutation.ResetTakeAmount()
	thiuo.mutation.SetTakeAmount(f)
	return thiuo
}

// SetNillableTakeAmount sets the "take_amount" field if the given value is not nil.
func (thiuo *TakeHistoryItemUpdateOne) SetNillableTakeAmount(f *float64) *TakeHistoryItemUpdateOne {
	if f != nil {
		thiuo.SetTakeAmount(*f)
	}
	return thiuo
}

// AddTakeAmount adds f to the "take_amount" field.
func (thiuo *TakeHistoryItemUpdateOne) AddTakeAmount(f float64) *TakeHistoryItemUpdateOne {
	thiuo.mutation.AddTakeAmount(f)
	return thiuo
}

// SetTakeUnit sets the "take_unit" field.
func (thiuo *TakeHistoryItemUpdateOne) SetTakeUnit(s string) *TakeHistoryItemUpdateOne {
	thiuo.mutation.SetTakeUnit(s)
	return thiuo
}

// SetNillableTakeUnit sets the "take_unit" field if the given value is not nil.
func (thiuo *TakeHistoryItemUpdateOne) SetNillableTakeUnit(s *string) *TakeHistoryItemUpdateOne {
	if s != nil {
		thiuo.SetTakeUnit(*s)
	}
	return thiuo
}

// SetMemo sets the "memo" field.
func (thiuo *TakeHistoryItemUpdateOne) SetMemo(s string) *TakeHistoryItemUpdateOne {
	thiuo.mutation.SetMemo(s)
	return thiuo
}

// SetNillableMemo sets the "memo" field if the given value is not nil.
func (thiuo *TakeHistoryItemUpdateOne) SetNillableMemo(s *string) *TakeHistoryItemUpdateOne {
	if s != nil {
		thiuo.SetMemo(*s)
	}
	return thiuo
}

// ClearMemo clears the value of the "memo" field.
func (thiuo *TakeHistoryItemUpdateOne) ClearMemo() *TakeHistoryItemUpdateOne {
	thiuo.mutation.ClearMemo()
	return thiuo
}

// SetTakeDate sets the "take_date" field.
func (thiuo *TakeHistoryItemUpdateOne) SetTakeDate(t time.Time) *TakeHistoryItemUpdateOne {
	thiuo.mutation.SetTakeDate(t)
	return thiuo
}

// SetNillableTakeDate sets the "take_date" field if the given value is not nil.
func (thiuo *TakeHistoryItemUpdateOne) SetNillableTakeDate(t *time.Time) *TakeHistoryItemUpdateOne {
	if t != nil {
		thiuo.SetTakeDate(*t)
	}
	return thiuo
}

// SetCreatedAt sets the "created_at" field.
func (thiuo *TakeHistoryItemUpdateOne) SetCreatedAt(t time.Time) *TakeHistoryItemUpdateOne {
	thiuo.mutation.SetCreatedAt(t)
	return thiuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (thiuo *TakeHistoryItemUpdateOne) SetNillableCreatedAt(t *time.Time) *TakeHistoryItemUpdateOne {
	if t != nil {
		thiuo.SetCreatedAt(*t)
	}
	return thiuo
}

// SetUpdatedAt sets the "updated_at" field.
func (thiuo *TakeHistoryItemUpdateOne) SetUpdatedAt(t time.Time) *TakeHistoryItemUpdateOne {
	thiuo.mutation.SetUpdatedAt(t)
	return thiuo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (thiuo *TakeHistoryItemUpdateOne) SetNillableUpdatedAt(t *time.Time) *TakeHistoryItemUpdateOne {
	if t != nil {
		thiuo.SetUpdatedAt(*t)
	}
	return thiuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (thiuo *TakeHistoryItemUpdateOne) ClearUpdatedAt() *TakeHistoryItemUpdateOne {
	thiuo.mutation.ClearUpdatedAt()
	return thiuo
}

// Mutation returns the TakeHistoryItemMutation object of the builder.
func (thiuo *TakeHistoryItemUpdateOne) Mutation() *TakeHistoryItemMutation {
	return thiuo.mutation
}

// Where appends a list predicates to the TakeHistoryItemUpdate builder.
func (thiuo *TakeHistoryItemUpdateOne) Where(ps ...predicate.TakeHistoryItem) *TakeHistoryItemUpdateOne {
	thiuo.mutation.Where(ps...)
	return thiuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (thiuo *TakeHistoryItemUpdateOne) Select(field string, fields ...string) *TakeHistoryItemUpdateOne {
	thiuo.fields = append([]string{field}, fields...)
	return thiuo
}

// Save executes the query and returns the updated TakeHistoryItem entity.
func (thiuo *TakeHistoryItemUpdateOne) Save(ctx context.Context) (*TakeHistoryItem, error) {
	return withHooks(ctx, thiuo.sqlSave, thiuo.mutation, thiuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (thiuo *TakeHistoryItemUpdateOne) SaveX(ctx context.Context) *TakeHistoryItem {
	node, err := thiuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (thiuo *TakeHistoryItemUpdateOne) Exec(ctx context.Context) error {
	_, err := thiuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (thiuo *TakeHistoryItemUpdateOne) ExecX(ctx context.Context) {
	if err := thiuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (thiuo *TakeHistoryItemUpdateOne) sqlSave(ctx context.Context) (_node *TakeHistoryItem, err error) {
	_spec := sqlgraph.NewUpdateSpec(takehistoryitem.Table, takehistoryitem.Columns, sqlgraph.NewFieldSpec(takehistoryitem.FieldID, field.TypeUUID))
	id, ok := thiuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "TakeHistoryItem.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := thiuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, takehistoryitem.FieldID)
		for _, f := range fields {
			if !takehistoryitem.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != takehistoryitem.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := thiuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := thiuo.mutation.UserID(); ok {
		_spec.SetField(takehistoryitem.FieldUserID, field.TypeUUID, value)
	}
	if value, ok := thiuo.mutation.TakeHistoryID(); ok {
		_spec.SetField(takehistoryitem.FieldTakeHistoryID, field.TypeUUID, value)
	}
	if value, ok := thiuo.mutation.PrescriptionItemID(); ok {
		_spec.SetField(takehistoryitem.FieldPrescriptionItemID, field.TypeUUID, value)
	}
	if value, ok := thiuo.mutation.TakeStatus(); ok {
		_spec.SetField(takehistoryitem.FieldTakeStatus, field.TypeString, value)
	}
	if value, ok := thiuo.mutation.TakeAmount(); ok {
		_spec.SetField(takehistoryitem.FieldTakeAmount, field.TypeFloat64, value)
	}
	if value, ok := thiuo.mutation.AddedTakeAmount(); ok {
		_spec.AddField(takehistoryitem.FieldTakeAmount, field.TypeFloat64, value)
	}
	if value, ok := thiuo.mutation.TakeUnit(); ok {
		_spec.SetField(takehistoryitem.FieldTakeUnit, field.TypeString, value)
	}
	if value, ok := thiuo.mutation.Memo(); ok {
		_spec.SetField(takehistoryitem.FieldMemo, field.TypeString, value)
	}
	if thiuo.mutation.MemoCleared() {
		_spec.ClearField(takehistoryitem.FieldMemo, field.TypeString)
	}
	if value, ok := thiuo.mutation.TakeDate(); ok {
		_spec.SetField(takehistoryitem.FieldTakeDate, field.TypeTime, value)
	}
	if value, ok := thiuo.mutation.CreatedAt(); ok {
		_spec.SetField(takehistoryitem.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := thiuo.mutation.UpdatedAt(); ok {
		_spec.SetField(takehistoryitem.FieldUpdatedAt, field.TypeTime, value)
	}
	if thiuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(takehistoryitem.FieldUpdatedAt, field.TypeTime)
	}
	_node = &TakeHistoryItem{config: thiuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, thiuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{takehistoryitem.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	thiuo.mutation.done = true
	return _node, nil
}
