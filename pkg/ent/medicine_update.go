// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"nursing_api/pkg/ent/medicine"
	"nursing_api/pkg/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MedicineUpdate is the builder for updating Medicine entities.
type MedicineUpdate struct {
	config
	hooks    []Hook
	mutation *MedicineMutation
}

// Where appends a list predicates to the MedicineUpdate builder.
func (mu *MedicineUpdate) Where(ps ...predicate.Medicine) *MedicineUpdate {
	mu.mutation.Where(ps...)
	return mu
}

// SetMedicineName sets the "medicine_name" field.
func (mu *MedicineUpdate) SetMedicineName(s string) *MedicineUpdate {
	mu.mutation.SetMedicineName(s)
	return mu
}

// SetNillableMedicineName sets the "medicine_name" field if the given value is not nil.
func (mu *MedicineUpdate) SetNillableMedicineName(s *string) *MedicineUpdate {
	if s != nil {
		mu.SetMedicineName(*s)
	}
	return mu
}

// SetItemSeq sets the "item_seq" field.
func (mu *MedicineUpdate) SetItemSeq(s string) *MedicineUpdate {
	mu.mutation.SetItemSeq(s)
	return mu
}

// SetNillableItemSeq sets the "item_seq" field if the given value is not nil.
func (mu *MedicineUpdate) SetNillableItemSeq(s *string) *MedicineUpdate {
	if s != nil {
		mu.SetItemSeq(*s)
	}
	return mu
}

// SetCompanyName sets the "company_name" field.
func (mu *MedicineUpdate) SetCompanyName(s string) *MedicineUpdate {
	mu.mutation.SetCompanyName(s)
	return mu
}

// SetNillableCompanyName sets the "company_name" field if the given value is not nil.
func (mu *MedicineUpdate) SetNillableCompanyName(s *string) *MedicineUpdate {
	if s != nil {
		mu.SetCompanyName(*s)
	}
	return mu
}

// ClearCompanyName clears the value of the "company_name" field.
func (mu *MedicineUpdate) ClearCompanyName() *MedicineUpdate {
	mu.mutation.ClearCompanyName()
	return mu
}

// SetDescription sets the "description" field.
func (mu *MedicineUpdate) SetDescription(s string) *MedicineUpdate {
	mu.mutation.SetDescription(s)
	return mu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (mu *MedicineUpdate) SetNillableDescription(s *string) *MedicineUpdate {
	if s != nil {
		mu.SetDescription(*s)
	}
	return mu
}

// ClearDescription clears the value of the "description" field.
func (mu *MedicineUpdate) ClearDescription() *MedicineUpdate {
	mu.mutation.ClearDescription()
	return mu
}

// SetUsage sets the "usage" field.
func (mu *MedicineUpdate) SetUsage(s string) *MedicineUpdate {
	mu.mutation.SetUsage(s)
	return mu
}

// SetNillableUsage sets the "usage" field if the given value is not nil.
func (mu *MedicineUpdate) SetNillableUsage(s *string) *MedicineUpdate {
	if s != nil {
		mu.SetUsage(*s)
	}
	return mu
}

// ClearUsage clears the value of the "usage" field.
func (mu *MedicineUpdate) ClearUsage() *MedicineUpdate {
	mu.mutation.ClearUsage()
	return mu
}

// SetEffect sets the "effect" field.
func (mu *MedicineUpdate) SetEffect(s string) *MedicineUpdate {
	mu.mutation.SetEffect(s)
	return mu
}

// SetNillableEffect sets the "effect" field if the given value is not nil.
func (mu *MedicineUpdate) SetNillableEffect(s *string) *MedicineUpdate {
	if s != nil {
		mu.SetEffect(*s)
	}
	return mu
}

// ClearEffect clears the value of the "effect" field.
func (mu *MedicineUpdate) ClearEffect() *MedicineUpdate {
	mu.mutation.ClearEffect()
	return mu
}

// SetSideEffect sets the "side_effect" field.
func (mu *MedicineUpdate) SetSideEffect(s string) *MedicineUpdate {
	mu.mutation.SetSideEffect(s)
	return mu
}

// SetNillableSideEffect sets the "side_effect" field if the given value is not nil.
func (mu *MedicineUpdate) SetNillableSideEffect(s *string) *MedicineUpdate {
	if s != nil {
		mu.SetSideEffect(*s)
	}
	return mu
}

// ClearSideEffect clears the value of the "side_effect" field.
func (mu *MedicineUpdate) ClearSideEffect() *MedicineUpdate {
	mu.mutation.ClearSideEffect()
	return mu
}

// SetCaution sets the "caution" field.
func (mu *MedicineUpdate) SetCaution(s string) *MedicineUpdate {
	mu.mutation.SetCaution(s)
	return mu
}

// SetNillableCaution sets the "caution" field if the given value is not nil.
func (mu *MedicineUpdate) SetNillableCaution(s *string) *MedicineUpdate {
	if s != nil {
		mu.SetCaution(*s)
	}
	return mu
}

// ClearCaution clears the value of the "caution" field.
func (mu *MedicineUpdate) ClearCaution() *MedicineUpdate {
	mu.mutation.ClearCaution()
	return mu
}

// SetWarning sets the "warning" field.
func (mu *MedicineUpdate) SetWarning(s string) *MedicineUpdate {
	mu.mutation.SetWarning(s)
	return mu
}

// SetNillableWarning sets the "warning" field if the given value is not nil.
func (mu *MedicineUpdate) SetNillableWarning(s *string) *MedicineUpdate {
	if s != nil {
		mu.SetWarning(*s)
	}
	return mu
}

// ClearWarning clears the value of the "warning" field.
func (mu *MedicineUpdate) ClearWarning() *MedicineUpdate {
	mu.mutation.ClearWarning()
	return mu
}

// SetInteraction sets the "interaction" field.
func (mu *MedicineUpdate) SetInteraction(s string) *MedicineUpdate {
	mu.mutation.SetInteraction(s)
	return mu
}

// SetNillableInteraction sets the "interaction" field if the given value is not nil.
func (mu *MedicineUpdate) SetNillableInteraction(s *string) *MedicineUpdate {
	if s != nil {
		mu.SetInteraction(*s)
	}
	return mu
}

// ClearInteraction clears the value of the "interaction" field.
func (mu *MedicineUpdate) ClearInteraction() *MedicineUpdate {
	mu.mutation.ClearInteraction()
	return mu
}

// SetKeepMethod sets the "keep_method" field.
func (mu *MedicineUpdate) SetKeepMethod(s string) *MedicineUpdate {
	mu.mutation.SetKeepMethod(s)
	return mu
}

// SetNillableKeepMethod sets the "keep_method" field if the given value is not nil.
func (mu *MedicineUpdate) SetNillableKeepMethod(s *string) *MedicineUpdate {
	if s != nil {
		mu.SetKeepMethod(*s)
	}
	return mu
}

// ClearKeepMethod clears the value of the "keep_method" field.
func (mu *MedicineUpdate) ClearKeepMethod() *MedicineUpdate {
	mu.mutation.ClearKeepMethod()
	return mu
}

// SetAppearance sets the "appearance" field.
func (mu *MedicineUpdate) SetAppearance(s string) *MedicineUpdate {
	mu.mutation.SetAppearance(s)
	return mu
}

// SetNillableAppearance sets the "appearance" field if the given value is not nil.
func (mu *MedicineUpdate) SetNillableAppearance(s *string) *MedicineUpdate {
	if s != nil {
		mu.SetAppearance(*s)
	}
	return mu
}

// ClearAppearance clears the value of the "appearance" field.
func (mu *MedicineUpdate) ClearAppearance() *MedicineUpdate {
	mu.mutation.ClearAppearance()
	return mu
}

// SetColorClass1 sets the "color_class1" field.
func (mu *MedicineUpdate) SetColorClass1(s string) *MedicineUpdate {
	mu.mutation.SetColorClass1(s)
	return mu
}

// SetNillableColorClass1 sets the "color_class1" field if the given value is not nil.
func (mu *MedicineUpdate) SetNillableColorClass1(s *string) *MedicineUpdate {
	if s != nil {
		mu.SetColorClass1(*s)
	}
	return mu
}

// ClearColorClass1 clears the value of the "color_class1" field.
func (mu *MedicineUpdate) ClearColorClass1() *MedicineUpdate {
	mu.mutation.ClearColorClass1()
	return mu
}

// SetColorClass2 sets the "color_class2" field.
func (mu *MedicineUpdate) SetColorClass2(s string) *MedicineUpdate {
	mu.mutation.SetColorClass2(s)
	return mu
}

// SetNillableColorClass2 sets the "color_class2" field if the given value is not nil.
func (mu *MedicineUpdate) SetNillableColorClass2(s *string) *MedicineUpdate {
	if s != nil {
		mu.SetColorClass2(*s)
	}
	return mu
}

// ClearColorClass2 clears the value of the "color_class2" field.
func (mu *MedicineUpdate) ClearColorClass2() *MedicineUpdate {
	mu.mutation.ClearColorClass2()
	return mu
}

// SetPillImage sets the "pill_image" field.
func (mu *MedicineUpdate) SetPillImage(s string) *MedicineUpdate {
	mu.mutation.SetPillImage(s)
	return mu
}

// SetNillablePillImage sets the "pill_image" field if the given value is not nil.
func (mu *MedicineUpdate) SetNillablePillImage(s *string) *MedicineUpdate {
	if s != nil {
		mu.SetPillImage(*s)
	}
	return mu
}

// ClearPillImage clears the value of the "pill_image" field.
func (mu *MedicineUpdate) ClearPillImage() *MedicineUpdate {
	mu.mutation.ClearPillImage()
	return mu
}

// SetClassName sets the "class_name" field.
func (mu *MedicineUpdate) SetClassName(s string) *MedicineUpdate {
	mu.mutation.SetClassName(s)
	return mu
}

// SetNillableClassName sets the "class_name" field if the given value is not nil.
func (mu *MedicineUpdate) SetNillableClassName(s *string) *MedicineUpdate {
	if s != nil {
		mu.SetClassName(*s)
	}
	return mu
}

// ClearClassName clears the value of the "class_name" field.
func (mu *MedicineUpdate) ClearClassName() *MedicineUpdate {
	mu.mutation.ClearClassName()
	return mu
}

// SetOtcName sets the "otc_name" field.
func (mu *MedicineUpdate) SetOtcName(s string) *MedicineUpdate {
	mu.mutation.SetOtcName(s)
	return mu
}

// SetNillableOtcName sets the "otc_name" field if the given value is not nil.
func (mu *MedicineUpdate) SetNillableOtcName(s *string) *MedicineUpdate {
	if s != nil {
		mu.SetOtcName(*s)
	}
	return mu
}

// ClearOtcName clears the value of the "otc_name" field.
func (mu *MedicineUpdate) ClearOtcName() *MedicineUpdate {
	mu.mutation.ClearOtcName()
	return mu
}

// SetFormCodeName sets the "form_code_name" field.
func (mu *MedicineUpdate) SetFormCodeName(s string) *MedicineUpdate {
	mu.mutation.SetFormCodeName(s)
	return mu
}

// SetNillableFormCodeName sets the "form_code_name" field if the given value is not nil.
func (mu *MedicineUpdate) SetNillableFormCodeName(s *string) *MedicineUpdate {
	if s != nil {
		mu.SetFormCodeName(*s)
	}
	return mu
}

// ClearFormCodeName clears the value of the "form_code_name" field.
func (mu *MedicineUpdate) ClearFormCodeName() *MedicineUpdate {
	mu.mutation.ClearFormCodeName()
	return mu
}

// SetCreatedAt sets the "created_at" field.
func (mu *MedicineUpdate) SetCreatedAt(t time.Time) *MedicineUpdate {
	mu.mutation.SetCreatedAt(t)
	return mu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (mu *MedicineUpdate) SetNillableCreatedAt(t *time.Time) *MedicineUpdate {
	if t != nil {
		mu.SetCreatedAt(*t)
	}
	return mu
}

// SetUpdatedAt sets the "updated_at" field.
func (mu *MedicineUpdate) SetUpdatedAt(t time.Time) *MedicineUpdate {
	mu.mutation.SetUpdatedAt(t)
	return mu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (mu *MedicineUpdate) SetNillableUpdatedAt(t *time.Time) *MedicineUpdate {
	if t != nil {
		mu.SetUpdatedAt(*t)
	}
	return mu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (mu *MedicineUpdate) ClearUpdatedAt() *MedicineUpdate {
	mu.mutation.ClearUpdatedAt()
	return mu
}

// Mutation returns the MedicineMutation object of the builder.
func (mu *MedicineUpdate) Mutation() *MedicineMutation {
	return mu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mu *MedicineUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, mu.sqlSave, mu.mutation, mu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mu *MedicineUpdate) SaveX(ctx context.Context) int {
	affected, err := mu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mu *MedicineUpdate) Exec(ctx context.Context) error {
	_, err := mu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mu *MedicineUpdate) ExecX(ctx context.Context) {
	if err := mu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (mu *MedicineUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(medicine.Table, medicine.Columns, sqlgraph.NewFieldSpec(medicine.FieldID, field.TypeUUID))
	if ps := mu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mu.mutation.MedicineName(); ok {
		_spec.SetField(medicine.FieldMedicineName, field.TypeString, value)
	}
	if value, ok := mu.mutation.ItemSeq(); ok {
		_spec.SetField(medicine.FieldItemSeq, field.TypeString, value)
	}
	if value, ok := mu.mutation.CompanyName(); ok {
		_spec.SetField(medicine.FieldCompanyName, field.TypeString, value)
	}
	if mu.mutation.CompanyNameCleared() {
		_spec.ClearField(medicine.FieldCompanyName, field.TypeString)
	}
	if value, ok := mu.mutation.Description(); ok {
		_spec.SetField(medicine.FieldDescription, field.TypeString, value)
	}
	if mu.mutation.DescriptionCleared() {
		_spec.ClearField(medicine.FieldDescription, field.TypeString)
	}
	if value, ok := mu.mutation.Usage(); ok {
		_spec.SetField(medicine.FieldUsage, field.TypeString, value)
	}
	if mu.mutation.UsageCleared() {
		_spec.ClearField(medicine.FieldUsage, field.TypeString)
	}
	if value, ok := mu.mutation.Effect(); ok {
		_spec.SetField(medicine.FieldEffect, field.TypeString, value)
	}
	if mu.mutation.EffectCleared() {
		_spec.ClearField(medicine.FieldEffect, field.TypeString)
	}
	if value, ok := mu.mutation.SideEffect(); ok {
		_spec.SetField(medicine.FieldSideEffect, field.TypeString, value)
	}
	if mu.mutation.SideEffectCleared() {
		_spec.ClearField(medicine.FieldSideEffect, field.TypeString)
	}
	if value, ok := mu.mutation.Caution(); ok {
		_spec.SetField(medicine.FieldCaution, field.TypeString, value)
	}
	if mu.mutation.CautionCleared() {
		_spec.ClearField(medicine.FieldCaution, field.TypeString)
	}
	if value, ok := mu.mutation.Warning(); ok {
		_spec.SetField(medicine.FieldWarning, field.TypeString, value)
	}
	if mu.mutation.WarningCleared() {
		_spec.ClearField(medicine.FieldWarning, field.TypeString)
	}
	if value, ok := mu.mutation.Interaction(); ok {
		_spec.SetField(medicine.FieldInteraction, field.TypeString, value)
	}
	if mu.mutation.InteractionCleared() {
		_spec.ClearField(medicine.FieldInteraction, field.TypeString)
	}
	if value, ok := mu.mutation.KeepMethod(); ok {
		_spec.SetField(medicine.FieldKeepMethod, field.TypeString, value)
	}
	if mu.mutation.KeepMethodCleared() {
		_spec.ClearField(medicine.FieldKeepMethod, field.TypeString)
	}
	if value, ok := mu.mutation.Appearance(); ok {
		_spec.SetField(medicine.FieldAppearance, field.TypeString, value)
	}
	if mu.mutation.AppearanceCleared() {
		_spec.ClearField(medicine.FieldAppearance, field.TypeString)
	}
	if value, ok := mu.mutation.ColorClass1(); ok {
		_spec.SetField(medicine.FieldColorClass1, field.TypeString, value)
	}
	if mu.mutation.ColorClass1Cleared() {
		_spec.ClearField(medicine.FieldColorClass1, field.TypeString)
	}
	if value, ok := mu.mutation.ColorClass2(); ok {
		_spec.SetField(medicine.FieldColorClass2, field.TypeString, value)
	}
	if mu.mutation.ColorClass2Cleared() {
		_spec.ClearField(medicine.FieldColorClass2, field.TypeString)
	}
	if value, ok := mu.mutation.PillImage(); ok {
		_spec.SetField(medicine.FieldPillImage, field.TypeString, value)
	}
	if mu.mutation.PillImageCleared() {
		_spec.ClearField(medicine.FieldPillImage, field.TypeString)
	}
	if value, ok := mu.mutation.ClassName(); ok {
		_spec.SetField(medicine.FieldClassName, field.TypeString, value)
	}
	if mu.mutation.ClassNameCleared() {
		_spec.ClearField(medicine.FieldClassName, field.TypeString)
	}
	if value, ok := mu.mutation.OtcName(); ok {
		_spec.SetField(medicine.FieldOtcName, field.TypeString, value)
	}
	if mu.mutation.OtcNameCleared() {
		_spec.ClearField(medicine.FieldOtcName, field.TypeString)
	}
	if value, ok := mu.mutation.FormCodeName(); ok {
		_spec.SetField(medicine.FieldFormCodeName, field.TypeString, value)
	}
	if mu.mutation.FormCodeNameCleared() {
		_spec.ClearField(medicine.FieldFormCodeName, field.TypeString)
	}
	if value, ok := mu.mutation.CreatedAt(); ok {
		_spec.SetField(medicine.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := mu.mutation.UpdatedAt(); ok {
		_spec.SetField(medicine.FieldUpdatedAt, field.TypeTime, value)
	}
	if mu.mutation.UpdatedAtCleared() {
		_spec.ClearField(medicine.FieldUpdatedAt, field.TypeTime)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, mu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{medicine.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	mu.mutation.done = true
	return n, nil
}

// MedicineUpdateOne is the builder for updating a single Medicine entity.
type MedicineUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MedicineMutation
}

// SetMedicineName sets the "medicine_name" field.
func (muo *MedicineUpdateOne) SetMedicineName(s string) *MedicineUpdateOne {
	muo.mutation.SetMedicineName(s)
	return muo
}

// SetNillableMedicineName sets the "medicine_name" field if the given value is not nil.
func (muo *MedicineUpdateOne) SetNillableMedicineName(s *string) *MedicineUpdateOne {
	if s != nil {
		muo.SetMedicineName(*s)
	}
	return muo
}

// SetItemSeq sets the "item_seq" field.
func (muo *MedicineUpdateOne) SetItemSeq(s string) *MedicineUpdateOne {
	muo.mutation.SetItemSeq(s)
	return muo
}

// SetNillableItemSeq sets the "item_seq" field if the given value is not nil.
func (muo *MedicineUpdateOne) SetNillableItemSeq(s *string) *MedicineUpdateOne {
	if s != nil {
		muo.SetItemSeq(*s)
	}
	return muo
}

// SetCompanyName sets the "company_name" field.
func (muo *MedicineUpdateOne) SetCompanyName(s string) *MedicineUpdateOne {
	muo.mutation.SetCompanyName(s)
	return muo
}

// SetNillableCompanyName sets the "company_name" field if the given value is not nil.
func (muo *MedicineUpdateOne) SetNillableCompanyName(s *string) *MedicineUpdateOne {
	if s != nil {
		muo.SetCompanyName(*s)
	}
	return muo
}

// ClearCompanyName clears the value of the "company_name" field.
func (muo *MedicineUpdateOne) ClearCompanyName() *MedicineUpdateOne {
	muo.mutation.ClearCompanyName()
	return muo
}

// SetDescription sets the "description" field.
func (muo *MedicineUpdateOne) SetDescription(s string) *MedicineUpdateOne {
	muo.mutation.SetDescription(s)
	return muo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (muo *MedicineUpdateOne) SetNillableDescription(s *string) *MedicineUpdateOne {
	if s != nil {
		muo.SetDescription(*s)
	}
	return muo
}

// ClearDescription clears the value of the "description" field.
func (muo *MedicineUpdateOne) ClearDescription() *MedicineUpdateOne {
	muo.mutation.ClearDescription()
	return muo
}

// SetUsage sets the "usage" field.
func (muo *MedicineUpdateOne) SetUsage(s string) *MedicineUpdateOne {
	muo.mutation.SetUsage(s)
	return muo
}

// SetNillableUsage sets the "usage" field if the given value is not nil.
func (muo *MedicineUpdateOne) SetNillableUsage(s *string) *MedicineUpdateOne {
	if s != nil {
		muo.SetUsage(*s)
	}
	return muo
}

// ClearUsage clears the value of the "usage" field.
func (muo *MedicineUpdateOne) ClearUsage() *MedicineUpdateOne {
	muo.mutation.ClearUsage()
	return muo
}

// SetEffect sets the "effect" field.
func (muo *MedicineUpdateOne) SetEffect(s string) *MedicineUpdateOne {
	muo.mutation.SetEffect(s)
	return muo
}

// SetNillableEffect sets the "effect" field if the given value is not nil.
func (muo *MedicineUpdateOne) SetNillableEffect(s *string) *MedicineUpdateOne {
	if s != nil {
		muo.SetEffect(*s)
	}
	return muo
}

// ClearEffect clears the value of the "effect" field.
func (muo *MedicineUpdateOne) ClearEffect() *MedicineUpdateOne {
	muo.mutation.ClearEffect()
	return muo
}

// SetSideEffect sets the "side_effect" field.
func (muo *MedicineUpdateOne) SetSideEffect(s string) *MedicineUpdateOne {
	muo.mutation.SetSideEffect(s)
	return muo
}

// SetNillableSideEffect sets the "side_effect" field if the given value is not nil.
func (muo *MedicineUpdateOne) SetNillableSideEffect(s *string) *MedicineUpdateOne {
	if s != nil {
		muo.SetSideEffect(*s)
	}
	return muo
}

// ClearSideEffect clears the value of the "side_effect" field.
func (muo *MedicineUpdateOne) ClearSideEffect() *MedicineUpdateOne {
	muo.mutation.ClearSideEffect()
	return muo
}

// SetCaution sets the "caution" field.
func (muo *MedicineUpdateOne) SetCaution(s string) *MedicineUpdateOne {
	muo.mutation.SetCaution(s)
	return muo
}

// SetNillableCaution sets the "caution" field if the given value is not nil.
func (muo *MedicineUpdateOne) SetNillableCaution(s *string) *MedicineUpdateOne {
	if s != nil {
		muo.SetCaution(*s)
	}
	return muo
}

// ClearCaution clears the value of the "caution" field.
func (muo *MedicineUpdateOne) ClearCaution() *MedicineUpdateOne {
	muo.mutation.ClearCaution()
	return muo
}

// SetWarning sets the "warning" field.
func (muo *MedicineUpdateOne) SetWarning(s string) *MedicineUpdateOne {
	muo.mutation.SetWarning(s)
	return muo
}

// SetNillableWarning sets the "warning" field if the given value is not nil.
func (muo *MedicineUpdateOne) SetNillableWarning(s *string) *MedicineUpdateOne {
	if s != nil {
		muo.SetWarning(*s)
	}
	return muo
}

// ClearWarning clears the value of the "warning" field.
func (muo *MedicineUpdateOne) ClearWarning() *MedicineUpdateOne {
	muo.mutation.ClearWarning()
	return muo
}

// SetInteraction sets the "interaction" field.
func (muo *MedicineUpdateOne) SetInteraction(s string) *MedicineUpdateOne {
	muo.mutation.SetInteraction(s)
	return muo
}

// SetNillableInteraction sets the "interaction" field if the given value is not nil.
func (muo *MedicineUpdateOne) SetNillableInteraction(s *string) *MedicineUpdateOne {
	if s != nil {
		muo.SetInteraction(*s)
	}
	return muo
}

// ClearInteraction clears the value of the "interaction" field.
func (muo *MedicineUpdateOne) ClearInteraction() *MedicineUpdateOne {
	muo.mutation.ClearInteraction()
	return muo
}

// SetKeepMethod sets the "keep_method" field.
func (muo *MedicineUpdateOne) SetKeepMethod(s string) *MedicineUpdateOne {
	muo.mutation.SetKeepMethod(s)
	return muo
}

// SetNillableKeepMethod sets the "keep_method" field if the given value is not nil.
func (muo *MedicineUpdateOne) SetNillableKeepMethod(s *string) *MedicineUpdateOne {
	if s != nil {
		muo.SetKeepMethod(*s)
	}
	return muo
}

// ClearKeepMethod clears the value of the "keep_method" field.
func (muo *MedicineUpdateOne) ClearKeepMethod() *MedicineUpdateOne {
	muo.mutation.ClearKeepMethod()
	return muo
}

// SetAppearance sets the "appearance" field.
func (muo *MedicineUpdateOne) SetAppearance(s string) *MedicineUpdateOne {
	muo.mutation.SetAppearance(s)
	return muo
}

// SetNillableAppearance sets the "appearance" field if the given value is not nil.
func (muo *MedicineUpdateOne) SetNillableAppearance(s *string) *MedicineUpdateOne {
	if s != nil {
		muo.SetAppearance(*s)
	}
	return muo
}

// ClearAppearance clears the value of the "appearance" field.
func (muo *MedicineUpdateOne) ClearAppearance() *MedicineUpdateOne {
	muo.mutation.ClearAppearance()
	return muo
}

// SetColorClass1 sets the "color_class1" field.
func (muo *MedicineUpdateOne) SetColorClass1(s string) *MedicineUpdateOne {
	muo.mutation.SetColorClass1(s)
	return muo
}

// SetNillableColorClass1 sets the "color_class1" field if the given value is not nil.
func (muo *MedicineUpdateOne) SetNillableColorClass1(s *string) *MedicineUpdateOne {
	if s != nil {
		muo.SetColorClass1(*s)
	}
	return muo
}

// ClearColorClass1 clears the value of the "color_class1" field.
func (muo *MedicineUpdateOne) ClearColorClass1() *MedicineUpdateOne {
	muo.mutation.ClearColorClass1()
	return muo
}

// SetColorClass2 sets the "color_class2" field.
func (muo *MedicineUpdateOne) SetColorClass2(s string) *MedicineUpdateOne {
	muo.mutation.SetColorClass2(s)
	return muo
}

// SetNillableColorClass2 sets the "color_class2" field if the given value is not nil.
func (muo *MedicineUpdateOne) SetNillableColorClass2(s *string) *MedicineUpdateOne {
	if s != nil {
		muo.SetColorClass2(*s)
	}
	return muo
}

// ClearColorClass2 clears the value of the "color_class2" field.
func (muo *MedicineUpdateOne) ClearColorClass2() *MedicineUpdateOne {
	muo.mutation.ClearColorClass2()
	return muo
}

// SetPillImage sets the "pill_image" field.
func (muo *MedicineUpdateOne) SetPillImage(s string) *MedicineUpdateOne {
	muo.mutation.SetPillImage(s)
	return muo
}

// SetNillablePillImage sets the "pill_image" field if the given value is not nil.
func (muo *MedicineUpdateOne) SetNillablePillImage(s *string) *MedicineUpdateOne {
	if s != nil {
		muo.SetPillImage(*s)
	}
	return muo
}

// ClearPillImage clears the value of the "pill_image" field.
func (muo *MedicineUpdateOne) ClearPillImage() *MedicineUpdateOne {
	muo.mutation.ClearPillImage()
	return muo
}

// SetClassName sets the "class_name" field.
func (muo *MedicineUpdateOne) SetClassName(s string) *MedicineUpdateOne {
	muo.mutation.SetClassName(s)
	return muo
}

// SetNillableClassName sets the "class_name" field if the given value is not nil.
func (muo *MedicineUpdateOne) SetNillableClassName(s *string) *MedicineUpdateOne {
	if s != nil {
		muo.SetClassName(*s)
	}
	return muo
}

// ClearClassName clears the value of the "class_name" field.
func (muo *MedicineUpdateOne) ClearClassName() *MedicineUpdateOne {
	muo.mutation.ClearClassName()
	return muo
}

// SetOtcName sets the "otc_name" field.
func (muo *MedicineUpdateOne) SetOtcName(s string) *MedicineUpdateOne {
	muo.mutation.SetOtcName(s)
	return muo
}

// SetNillableOtcName sets the "otc_name" field if the given value is not nil.
func (muo *MedicineUpdateOne) SetNillableOtcName(s *string) *MedicineUpdateOne {
	if s != nil {
		muo.SetOtcName(*s)
	}
	return muo
}

// ClearOtcName clears the value of the "otc_name" field.
func (muo *MedicineUpdateOne) ClearOtcName() *MedicineUpdateOne {
	muo.mutation.ClearOtcName()
	return muo
}

// SetFormCodeName sets the "form_code_name" field.
func (muo *MedicineUpdateOne) SetFormCodeName(s string) *MedicineUpdateOne {
	muo.mutation.SetFormCodeName(s)
	return muo
}

// SetNillableFormCodeName sets the "form_code_name" field if the given value is not nil.
func (muo *MedicineUpdateOne) SetNillableFormCodeName(s *string) *MedicineUpdateOne {
	if s != nil {
		muo.SetFormCodeName(*s)
	}
	return muo
}

// ClearFormCodeName clears the value of the "form_code_name" field.
func (muo *MedicineUpdateOne) ClearFormCodeName() *MedicineUpdateOne {
	muo.mutation.ClearFormCodeName()
	return muo
}

// SetCreatedAt sets the "created_at" field.
func (muo *MedicineUpdateOne) SetCreatedAt(t time.Time) *MedicineUpdateOne {
	muo.mutation.SetCreatedAt(t)
	return muo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (muo *MedicineUpdateOne) SetNillableCreatedAt(t *time.Time) *MedicineUpdateOne {
	if t != nil {
		muo.SetCreatedAt(*t)
	}
	return muo
}

// SetUpdatedAt sets the "updated_at" field.
func (muo *MedicineUpdateOne) SetUpdatedAt(t time.Time) *MedicineUpdateOne {
	muo.mutation.SetUpdatedAt(t)
	return muo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (muo *MedicineUpdateOne) SetNillableUpdatedAt(t *time.Time) *MedicineUpdateOne {
	if t != nil {
		muo.SetUpdatedAt(*t)
	}
	return muo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (muo *MedicineUpdateOne) ClearUpdatedAt() *MedicineUpdateOne {
	muo.mutation.ClearUpdatedAt()
	return muo
}

// Mutation returns the MedicineMutation object of the builder.
func (muo *MedicineUpdateOne) Mutation() *MedicineMutation {
	return muo.mutation
}

// Where appends a list predicates to the MedicineUpdate builder.
func (muo *MedicineUpdateOne) Where(ps ...predicate.Medicine) *MedicineUpdateOne {
	muo.mutation.Where(ps...)
	return muo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (muo *MedicineUpdateOne) Select(field string, fields ...string) *MedicineUpdateOne {
	muo.fields = append([]string{field}, fields...)
	return muo
}

// Save executes the query and returns the updated Medicine entity.
func (muo *MedicineUpdateOne) Save(ctx context.Context) (*Medicine, error) {
	return withHooks(ctx, muo.sqlSave, muo.mutation, muo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (muo *MedicineUpdateOne) SaveX(ctx context.Context) *Medicine {
	node, err := muo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (muo *MedicineUpdateOne) Exec(ctx context.Context) error {
	_, err := muo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (muo *MedicineUpdateOne) ExecX(ctx context.Context) {
	if err := muo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (muo *MedicineUpdateOne) sqlSave(ctx context.Context) (_node *Medicine, err error) {
	_spec := sqlgraph.NewUpdateSpec(medicine.Table, medicine.Columns, sqlgraph.NewFieldSpec(medicine.FieldID, field.TypeUUID))
	id, ok := muo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Medicine.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := muo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, medicine.FieldID)
		for _, f := range fields {
			if !medicine.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != medicine.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := muo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := muo.mutation.MedicineName(); ok {
		_spec.SetField(medicine.FieldMedicineName, field.TypeString, value)
	}
	if value, ok := muo.mutation.ItemSeq(); ok {
		_spec.SetField(medicine.FieldItemSeq, field.TypeString, value)
	}
	if value, ok := muo.mutation.CompanyName(); ok {
		_spec.SetField(medicine.FieldCompanyName, field.TypeString, value)
	}
	if muo.mutation.CompanyNameCleared() {
		_spec.ClearField(medicine.FieldCompanyName, field.TypeString)
	}
	if value, ok := muo.mutation.Description(); ok {
		_spec.SetField(medicine.FieldDescription, field.TypeString, value)
	}
	if muo.mutation.DescriptionCleared() {
		_spec.ClearField(medicine.FieldDescription, field.TypeString)
	}
	if value, ok := muo.mutation.Usage(); ok {
		_spec.SetField(medicine.FieldUsage, field.TypeString, value)
	}
	if muo.mutation.UsageCleared() {
		_spec.ClearField(medicine.FieldUsage, field.TypeString)
	}
	if value, ok := muo.mutation.Effect(); ok {
		_spec.SetField(medicine.FieldEffect, field.TypeString, value)
	}
	if muo.mutation.EffectCleared() {
		_spec.ClearField(medicine.FieldEffect, field.TypeString)
	}
	if value, ok := muo.mutation.SideEffect(); ok {
		_spec.SetField(medicine.FieldSideEffect, field.TypeString, value)
	}
	if muo.mutation.SideEffectCleared() {
		_spec.ClearField(medicine.FieldSideEffect, field.TypeString)
	}
	if value, ok := muo.mutation.Caution(); ok {
		_spec.SetField(medicine.FieldCaution, field.TypeString, value)
	}
	if muo.mutation.CautionCleared() {
		_spec.ClearField(medicine.FieldCaution, field.TypeString)
	}
	if value, ok := muo.mutation.Warning(); ok {
		_spec.SetField(medicine.FieldWarning, field.TypeString, value)
	}
	if muo.mutation.WarningCleared() {
		_spec.ClearField(medicine.FieldWarning, field.TypeString)
	}
	if value, ok := muo.mutation.Interaction(); ok {
		_spec.SetField(medicine.FieldInteraction, field.TypeString, value)
	}
	if muo.mutation.InteractionCleared() {
		_spec.ClearField(medicine.FieldInteraction, field.TypeString)
	}
	if value, ok := muo.mutation.KeepMethod(); ok {
		_spec.SetField(medicine.FieldKeepMethod, field.TypeString, value)
	}
	if muo.mutation.KeepMethodCleared() {
		_spec.ClearField(medicine.FieldKeepMethod, field.TypeString)
	}
	if value, ok := muo.mutation.Appearance(); ok {
		_spec.SetField(medicine.FieldAppearance, field.TypeString, value)
	}
	if muo.mutation.AppearanceCleared() {
		_spec.ClearField(medicine.FieldAppearance, field.TypeString)
	}
	if value, ok := muo.mutation.ColorClass1(); ok {
		_spec.SetField(medicine.FieldColorClass1, field.TypeString, value)
	}
	if muo.mutation.ColorClass1Cleared() {
		_spec.ClearField(medicine.FieldColorClass1, field.TypeString)
	}
	if value, ok := muo.mutation.ColorClass2(); ok {
		_spec.SetField(medicine.FieldColorClass2, field.TypeString, value)
	}
	if muo.mutation.ColorClass2Cleared() {
		_spec.ClearField(medicine.FieldColorClass2, field.TypeString)
	}
	if value, ok := muo.mutation.PillImage(); ok {
		_spec.SetField(medicine.FieldPillImage, field.TypeString, value)
	}
	if muo.mutation.PillImageCleared() {
		_spec.ClearField(medicine.FieldPillImage, field.TypeString)
	}
	if value, ok := muo.mutation.ClassName(); ok {
		_spec.SetField(medicine.FieldClassName, field.TypeString, value)
	}
	if muo.mutation.ClassNameCleared() {
		_spec.ClearField(medicine.FieldClassName, field.TypeString)
	}
	if value, ok := muo.mutation.OtcName(); ok {
		_spec.SetField(medicine.FieldOtcName, field.TypeString, value)
	}
	if muo.mutation.OtcNameCleared() {
		_spec.ClearField(medicine.FieldOtcName, field.TypeString)
	}
	if value, ok := muo.mutation.FormCodeName(); ok {
		_spec.SetField(medicine.FieldFormCodeName, field.TypeString, value)
	}
	if muo.mutation.FormCodeNameCleared() {
		_spec.ClearField(medicine.FieldFormCodeName, field.TypeString)
	}
	if value, ok := muo.mutation.CreatedAt(); ok {
		_spec.SetField(medicine.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := muo.mutation.UpdatedAt(); ok {
		_spec.SetField(medicine.FieldUpdatedAt, field.TypeTime, value)
	}
	if muo.mutation.UpdatedAtCleared() {
		_spec.ClearField(medicine.FieldUpdatedAt, field.TypeTime)
	}
	_node = &Medicine{config: muo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, muo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{medicine.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	muo.mutation.done = true
	return _node, nil
}
