// Code generated by ent, DO NOT EDIT.

package ent

import (
	"nursing_api/pkg/ent/medicine"
	"nursing_api/pkg/ent/predicate"
	"nursing_api/pkg/ent/prescription"
	"nursing_api/pkg/ent/prescriptionitem"
	"nursing_api/pkg/ent/takehistory"
	"nursing_api/pkg/ent/takehistoryitem"
	"nursing_api/pkg/ent/token"
	"nursing_api/pkg/ent/user"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/entql"
	"entgo.io/ent/schema/field"
)

// schemaGraph holds a representation of ent/schema at runtime.
var schemaGraph = func() *sqlgraph.Schema {
	graph := &sqlgraph.Schema{Nodes: make([]*sqlgraph.Node, 7)}
	graph.Nodes[0] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   medicine.Table,
			Columns: medicine.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: medicine.FieldID,
			},
		},
		Type: "Medicine",
		Fields: map[string]*sqlgraph.FieldSpec{
			medicine.FieldMedicineName: {Type: field.TypeString, Column: medicine.FieldMedicineName},
			medicine.FieldItemSeq:      {Type: field.TypeString, Column: medicine.FieldItemSeq},
			medicine.FieldCompanyName:  {Type: field.TypeString, Column: medicine.FieldCompanyName},
			medicine.FieldDescription:  {Type: field.TypeString, Column: medicine.FieldDescription},
			medicine.FieldUsage:        {Type: field.TypeString, Column: medicine.FieldUsage},
			medicine.FieldEffect:       {Type: field.TypeString, Column: medicine.FieldEffect},
			medicine.FieldSideEffect:   {Type: field.TypeString, Column: medicine.FieldSideEffect},
			medicine.FieldCaution:      {Type: field.TypeString, Column: medicine.FieldCaution},
			medicine.FieldWarning:      {Type: field.TypeString, Column: medicine.FieldWarning},
			medicine.FieldInteraction:  {Type: field.TypeString, Column: medicine.FieldInteraction},
			medicine.FieldKeepMethod:   {Type: field.TypeString, Column: medicine.FieldKeepMethod},
			medicine.FieldAppearance:   {Type: field.TypeString, Column: medicine.FieldAppearance},
			medicine.FieldColorClass1:  {Type: field.TypeString, Column: medicine.FieldColorClass1},
			medicine.FieldColorClass2:  {Type: field.TypeString, Column: medicine.FieldColorClass2},
			medicine.FieldPillImage:    {Type: field.TypeString, Column: medicine.FieldPillImage},
			medicine.FieldClassName:    {Type: field.TypeString, Column: medicine.FieldClassName},
			medicine.FieldOtcName:      {Type: field.TypeString, Column: medicine.FieldOtcName},
			medicine.FieldFormCodeName: {Type: field.TypeString, Column: medicine.FieldFormCodeName},
			medicine.FieldCreatedAt:    {Type: field.TypeTime, Column: medicine.FieldCreatedAt},
			medicine.FieldUpdatedAt:    {Type: field.TypeTime, Column: medicine.FieldUpdatedAt},
		},
	}
	graph.Nodes[1] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   prescription.Table,
			Columns: prescription.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: prescription.FieldID,
			},
		},
		Type: "Prescription",
		Fields: map[string]*sqlgraph.FieldSpec{
			prescription.FieldUserID:           {Type: field.TypeUUID, Column: prescription.FieldUserID},
			prescription.FieldPrescriptionName: {Type: field.TypeString, Column: prescription.FieldPrescriptionName},
			prescription.FieldHospitalName:     {Type: field.TypeString, Column: prescription.FieldHospitalName},
			prescription.FieldTakeDays:         {Type: field.TypeInt, Column: prescription.FieldTakeDays},
			prescription.FieldStartedAt:        {Type: field.TypeTime, Column: prescription.FieldStartedAt},
			prescription.FieldFinishedAt:       {Type: field.TypeTime, Column: prescription.FieldFinishedAt},
			prescription.FieldMemo:             {Type: field.TypeString, Column: prescription.FieldMemo},
			prescription.FieldCreatedAt:        {Type: field.TypeTime, Column: prescription.FieldCreatedAt},
			prescription.FieldUpdatedAt:        {Type: field.TypeTime, Column: prescription.FieldUpdatedAt},
		},
	}
	graph.Nodes[2] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   prescriptionitem.Table,
			Columns: prescriptionitem.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: prescriptionitem.FieldID,
			},
		},
		Type: "PrescriptionItem",
		Fields: map[string]*sqlgraph.FieldSpec{
			prescriptionitem.FieldUserID:         {Type: field.TypeUUID, Column: prescriptionitem.FieldUserID},
			prescriptionitem.FieldPrescriptionID: {Type: field.TypeUUID, Column: prescriptionitem.FieldPrescriptionID},
			prescriptionitem.FieldMedicineID:     {Type: field.TypeUUID, Column: prescriptionitem.FieldMedicineID},
			prescriptionitem.FieldMedicineName:   {Type: field.TypeString, Column: prescriptionitem.FieldMedicineName},
			prescriptionitem.FieldTakeTimeZone:   {Type: field.TypeString, Column: prescriptionitem.FieldTakeTimeZone},
			prescriptionitem.FieldTakeMoment:     {Type: field.TypeString, Column: prescriptionitem.FieldTakeMoment},
			prescriptionitem.FieldTakeEtc:        {Type: field.TypeString, Column: prescriptionitem.FieldTakeEtc},
			prescriptionitem.FieldTakeAmount:     {Type: field.TypeFloat64, Column: prescriptionitem.FieldTakeAmount},
			prescriptionitem.FieldMedicineUnit:   {Type: field.TypeString, Column: prescriptionitem.FieldMedicineUnit},
			prescriptionitem.FieldMemo:           {Type: field.TypeString, Column: prescriptionitem.FieldMemo},
			prescriptionitem.FieldCreatedAt:      {Type: field.TypeTime, Column: prescriptionitem.FieldCreatedAt},
			prescriptionitem.FieldUpdatedAt:      {Type: field.TypeTime, Column: prescriptionitem.FieldUpdatedAt},
		},
	}
	graph.Nodes[3] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   takehistory.Table,
			Columns: takehistory.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: takehistory.FieldID,
			},
		},
		Type: "TakeHistory",
		Fields: map[string]*sqlgraph.FieldSpec{
			takehistory.FieldUserID:         {Type: field.TypeUUID, Column: takehistory.FieldUserID},
			takehistory.FieldPrescriptionID: {Type: field.TypeUUID, Column: takehistory.FieldPrescriptionID},
			takehistory.FieldTakeDate:       {Type: field.TypeTime, Column: takehistory.FieldTakeDate},
			takehistory.FieldTakeStatus:     {Type: field.TypeString, Column: takehistory.FieldTakeStatus},
			takehistory.FieldMemo:           {Type: field.TypeString, Column: takehistory.FieldMemo},
			takehistory.FieldCreatedAt:      {Type: field.TypeTime, Column: takehistory.FieldCreatedAt},
			takehistory.FieldUpdatedAt:      {Type: field.TypeTime, Column: takehistory.FieldUpdatedAt},
		},
	}
	graph.Nodes[4] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   takehistoryitem.Table,
			Columns: takehistoryitem.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: takehistoryitem.FieldID,
			},
		},
		Type: "TakeHistoryItem",
		Fields: map[string]*sqlgraph.FieldSpec{
			takehistoryitem.FieldUserID:             {Type: field.TypeUUID, Column: takehistoryitem.FieldUserID},
			takehistoryitem.FieldTakeHistoryID:      {Type: field.TypeUUID, Column: takehistoryitem.FieldTakeHistoryID},
			takehistoryitem.FieldPrescriptionItemID: {Type: field.TypeUUID, Column: takehistoryitem.FieldPrescriptionItemID},
			takehistoryitem.FieldTakeStatus:         {Type: field.TypeString, Column: takehistoryitem.FieldTakeStatus},
			takehistoryitem.FieldTakeAmount:         {Type: field.TypeFloat64, Column: takehistoryitem.FieldTakeAmount},
			takehistoryitem.FieldTakeTimeZone:       {Type: field.TypeString, Column: takehistoryitem.FieldTakeTimeZone},
			takehistoryitem.FieldTakeMoment:         {Type: field.TypeString, Column: takehistoryitem.FieldTakeMoment},
			takehistoryitem.FieldTakeEtc:            {Type: field.TypeString, Column: takehistoryitem.FieldTakeEtc},
			takehistoryitem.FieldCreatedAt:          {Type: field.TypeTime, Column: takehistoryitem.FieldCreatedAt},
			takehistoryitem.FieldUpdatedAt:          {Type: field.TypeTime, Column: takehistoryitem.FieldUpdatedAt},
		},
	}
	graph.Nodes[5] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   token.Table,
			Columns: token.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: token.FieldID,
			},
		},
		Type: "Token",
		Fields: map[string]*sqlgraph.FieldSpec{
			token.FieldUserID:              {Type: field.TypeUUID, Column: token.FieldUserID},
			token.FieldAccessToken:         {Type: field.TypeString, Column: token.FieldAccessToken},
			token.FieldRefreshToken:        {Type: field.TypeString, Column: token.FieldRefreshToken},
			token.FieldAccessTokenExpires:  {Type: field.TypeTime, Column: token.FieldAccessTokenExpires},
			token.FieldRefreshTokenExpires: {Type: field.TypeTime, Column: token.FieldRefreshTokenExpires},
			token.FieldAutoLogin:           {Type: field.TypeBool, Column: token.FieldAutoLogin},
			token.FieldCreatedAt:           {Type: field.TypeTime, Column: token.FieldCreatedAt},
			token.FieldUpdatedAt:           {Type: field.TypeTime, Column: token.FieldUpdatedAt},
		},
	}
	graph.Nodes[6] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   user.Table,
			Columns: user.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: user.FieldID,
			},
		},
		Type: "User",
		Fields: map[string]*sqlgraph.FieldSpec{
			user.FieldUserName:     {Type: field.TypeString, Column: user.FieldUserName},
			user.FieldUserEmail:    {Type: field.TypeString, Column: user.FieldUserEmail},
			user.FieldUserPassword: {Type: field.TypeString, Column: user.FieldUserPassword},
			user.FieldUserStatus:   {Type: field.TypeString, Column: user.FieldUserStatus},
			user.FieldUserType:     {Type: field.TypeString, Column: user.FieldUserType},
			user.FieldFailCount:    {Type: field.TypeInt, Column: user.FieldFailCount},
			user.FieldLastSignedIn: {Type: field.TypeTime, Column: user.FieldLastSignedIn},
			user.FieldCreatedAt:    {Type: field.TypeTime, Column: user.FieldCreatedAt},
			user.FieldUpdatedAt:    {Type: field.TypeTime, Column: user.FieldUpdatedAt},
		},
	}
	graph.MustAddE(
		"items",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   prescription.ItemsTable,
			Columns: []string{prescription.ItemsColumn},
			Bidi:    false,
		},
		"Prescription",
		"PrescriptionItem",
	)
	graph.MustAddE(
		"prescription",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   prescriptionitem.PrescriptionTable,
			Columns: []string{prescriptionitem.PrescriptionColumn},
			Bidi:    false,
		},
		"PrescriptionItem",
		"Prescription",
	)
	return graph
}()

// predicateAdder wraps the addPredicate method.
// All update, update-one and query builders implement this interface.
type predicateAdder interface {
	addPredicate(func(s *sql.Selector))
}

// addPredicate implements the predicateAdder interface.
func (mq *MedicineQuery) addPredicate(pred func(s *sql.Selector)) {
	mq.predicates = append(mq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the MedicineQuery builder.
func (mq *MedicineQuery) Filter() *MedicineFilter {
	return &MedicineFilter{config: mq.config, predicateAdder: mq}
}

// addPredicate implements the predicateAdder interface.
func (m *MedicineMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the MedicineMutation builder.
func (m *MedicineMutation) Filter() *MedicineFilter {
	return &MedicineFilter{config: m.config, predicateAdder: m}
}

// MedicineFilter provides a generic filtering capability at runtime for MedicineQuery.
type MedicineFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *MedicineFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[0].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *MedicineFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(medicine.FieldID))
}

// WhereMedicineName applies the entql string predicate on the medicine_name field.
func (f *MedicineFilter) WhereMedicineName(p entql.StringP) {
	f.Where(p.Field(medicine.FieldMedicineName))
}

// WhereItemSeq applies the entql string predicate on the item_seq field.
func (f *MedicineFilter) WhereItemSeq(p entql.StringP) {
	f.Where(p.Field(medicine.FieldItemSeq))
}

// WhereCompanyName applies the entql string predicate on the company_name field.
func (f *MedicineFilter) WhereCompanyName(p entql.StringP) {
	f.Where(p.Field(medicine.FieldCompanyName))
}

// WhereDescription applies the entql string predicate on the description field.
func (f *MedicineFilter) WhereDescription(p entql.StringP) {
	f.Where(p.Field(medicine.FieldDescription))
}

// WhereUsage applies the entql string predicate on the usage field.
func (f *MedicineFilter) WhereUsage(p entql.StringP) {
	f.Where(p.Field(medicine.FieldUsage))
}

// WhereEffect applies the entql string predicate on the effect field.
func (f *MedicineFilter) WhereEffect(p entql.StringP) {
	f.Where(p.Field(medicine.FieldEffect))
}

// WhereSideEffect applies the entql string predicate on the side_effect field.
func (f *MedicineFilter) WhereSideEffect(p entql.StringP) {
	f.Where(p.Field(medicine.FieldSideEffect))
}

// WhereCaution applies the entql string predicate on the caution field.
func (f *MedicineFilter) WhereCaution(p entql.StringP) {
	f.Where(p.Field(medicine.FieldCaution))
}

// WhereWarning applies the entql string predicate on the warning field.
func (f *MedicineFilter) WhereWarning(p entql.StringP) {
	f.Where(p.Field(medicine.FieldWarning))
}

// WhereInteraction applies the entql string predicate on the interaction field.
func (f *MedicineFilter) WhereInteraction(p entql.StringP) {
	f.Where(p.Field(medicine.FieldInteraction))
}

// WhereKeepMethod applies the entql string predicate on the keep_method field.
func (f *MedicineFilter) WhereKeepMethod(p entql.StringP) {
	f.Where(p.Field(medicine.FieldKeepMethod))
}

// WhereAppearance applies the entql string predicate on the appearance field.
func (f *MedicineFilter) WhereAppearance(p entql.StringP) {
	f.Where(p.Field(medicine.FieldAppearance))
}

// WhereColorClass1 applies the entql string predicate on the color_class1 field.
func (f *MedicineFilter) WhereColorClass1(p entql.StringP) {
	f.Where(p.Field(medicine.FieldColorClass1))
}

// WhereColorClass2 applies the entql string predicate on the color_class2 field.
func (f *MedicineFilter) WhereColorClass2(p entql.StringP) {
	f.Where(p.Field(medicine.FieldColorClass2))
}

// WherePillImage applies the entql string predicate on the pill_image field.
func (f *MedicineFilter) WherePillImage(p entql.StringP) {
	f.Where(p.Field(medicine.FieldPillImage))
}

// WhereClassName applies the entql string predicate on the class_name field.
func (f *MedicineFilter) WhereClassName(p entql.StringP) {
	f.Where(p.Field(medicine.FieldClassName))
}

// WhereOtcName applies the entql string predicate on the otc_name field.
func (f *MedicineFilter) WhereOtcName(p entql.StringP) {
	f.Where(p.Field(medicine.FieldOtcName))
}

// WhereFormCodeName applies the entql string predicate on the form_code_name field.
func (f *MedicineFilter) WhereFormCodeName(p entql.StringP) {
	f.Where(p.Field(medicine.FieldFormCodeName))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *MedicineFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(medicine.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *MedicineFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(medicine.FieldUpdatedAt))
}

// addPredicate implements the predicateAdder interface.
func (pq *PrescriptionQuery) addPredicate(pred func(s *sql.Selector)) {
	pq.predicates = append(pq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the PrescriptionQuery builder.
func (pq *PrescriptionQuery) Filter() *PrescriptionFilter {
	return &PrescriptionFilter{config: pq.config, predicateAdder: pq}
}

// addPredicate implements the predicateAdder interface.
func (m *PrescriptionMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the PrescriptionMutation builder.
func (m *PrescriptionMutation) Filter() *PrescriptionFilter {
	return &PrescriptionFilter{config: m.config, predicateAdder: m}
}

// PrescriptionFilter provides a generic filtering capability at runtime for PrescriptionQuery.
type PrescriptionFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *PrescriptionFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[1].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *PrescriptionFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(prescription.FieldID))
}

// WhereUserID applies the entql [16]byte predicate on the user_id field.
func (f *PrescriptionFilter) WhereUserID(p entql.ValueP) {
	f.Where(p.Field(prescription.FieldUserID))
}

// WherePrescriptionName applies the entql string predicate on the prescription_name field.
func (f *PrescriptionFilter) WherePrescriptionName(p entql.StringP) {
	f.Where(p.Field(prescription.FieldPrescriptionName))
}

// WhereHospitalName applies the entql string predicate on the hospital_name field.
func (f *PrescriptionFilter) WhereHospitalName(p entql.StringP) {
	f.Where(p.Field(prescription.FieldHospitalName))
}

// WhereTakeDays applies the entql int predicate on the take_days field.
func (f *PrescriptionFilter) WhereTakeDays(p entql.IntP) {
	f.Where(p.Field(prescription.FieldTakeDays))
}

// WhereStartedAt applies the entql time.Time predicate on the started_at field.
func (f *PrescriptionFilter) WhereStartedAt(p entql.TimeP) {
	f.Where(p.Field(prescription.FieldStartedAt))
}

// WhereFinishedAt applies the entql time.Time predicate on the finished_at field.
func (f *PrescriptionFilter) WhereFinishedAt(p entql.TimeP) {
	f.Where(p.Field(prescription.FieldFinishedAt))
}

// WhereMemo applies the entql string predicate on the memo field.
func (f *PrescriptionFilter) WhereMemo(p entql.StringP) {
	f.Where(p.Field(prescription.FieldMemo))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *PrescriptionFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(prescription.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *PrescriptionFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(prescription.FieldUpdatedAt))
}

// WhereHasItems applies a predicate to check if query has an edge items.
func (f *PrescriptionFilter) WhereHasItems() {
	f.Where(entql.HasEdge("items"))
}

// WhereHasItemsWith applies a predicate to check if query has an edge items with a given conditions (other predicates).
func (f *PrescriptionFilter) WhereHasItemsWith(preds ...predicate.PrescriptionItem) {
	f.Where(entql.HasEdgeWith("items", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (piq *PrescriptionItemQuery) addPredicate(pred func(s *sql.Selector)) {
	piq.predicates = append(piq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the PrescriptionItemQuery builder.
func (piq *PrescriptionItemQuery) Filter() *PrescriptionItemFilter {
	return &PrescriptionItemFilter{config: piq.config, predicateAdder: piq}
}

// addPredicate implements the predicateAdder interface.
func (m *PrescriptionItemMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the PrescriptionItemMutation builder.
func (m *PrescriptionItemMutation) Filter() *PrescriptionItemFilter {
	return &PrescriptionItemFilter{config: m.config, predicateAdder: m}
}

// PrescriptionItemFilter provides a generic filtering capability at runtime for PrescriptionItemQuery.
type PrescriptionItemFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *PrescriptionItemFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[2].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *PrescriptionItemFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(prescriptionitem.FieldID))
}

// WhereUserID applies the entql [16]byte predicate on the user_id field.
func (f *PrescriptionItemFilter) WhereUserID(p entql.ValueP) {
	f.Where(p.Field(prescriptionitem.FieldUserID))
}

// WherePrescriptionID applies the entql [16]byte predicate on the prescription_id field.
func (f *PrescriptionItemFilter) WherePrescriptionID(p entql.ValueP) {
	f.Where(p.Field(prescriptionitem.FieldPrescriptionID))
}

// WhereMedicineID applies the entql [16]byte predicate on the medicine_id field.
func (f *PrescriptionItemFilter) WhereMedicineID(p entql.ValueP) {
	f.Where(p.Field(prescriptionitem.FieldMedicineID))
}

// WhereMedicineName applies the entql string predicate on the medicine_name field.
func (f *PrescriptionItemFilter) WhereMedicineName(p entql.StringP) {
	f.Where(p.Field(prescriptionitem.FieldMedicineName))
}

// WhereTakeTimeZone applies the entql string predicate on the take_time_zone field.
func (f *PrescriptionItemFilter) WhereTakeTimeZone(p entql.StringP) {
	f.Where(p.Field(prescriptionitem.FieldTakeTimeZone))
}

// WhereTakeMoment applies the entql string predicate on the take_moment field.
func (f *PrescriptionItemFilter) WhereTakeMoment(p entql.StringP) {
	f.Where(p.Field(prescriptionitem.FieldTakeMoment))
}

// WhereTakeEtc applies the entql string predicate on the take_etc field.
func (f *PrescriptionItemFilter) WhereTakeEtc(p entql.StringP) {
	f.Where(p.Field(prescriptionitem.FieldTakeEtc))
}

// WhereTakeAmount applies the entql float64 predicate on the take_amount field.
func (f *PrescriptionItemFilter) WhereTakeAmount(p entql.Float64P) {
	f.Where(p.Field(prescriptionitem.FieldTakeAmount))
}

// WhereMedicineUnit applies the entql string predicate on the medicine_unit field.
func (f *PrescriptionItemFilter) WhereMedicineUnit(p entql.StringP) {
	f.Where(p.Field(prescriptionitem.FieldMedicineUnit))
}

// WhereMemo applies the entql string predicate on the memo field.
func (f *PrescriptionItemFilter) WhereMemo(p entql.StringP) {
	f.Where(p.Field(prescriptionitem.FieldMemo))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *PrescriptionItemFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(prescriptionitem.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *PrescriptionItemFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(prescriptionitem.FieldUpdatedAt))
}

// WhereHasPrescription applies a predicate to check if query has an edge prescription.
func (f *PrescriptionItemFilter) WhereHasPrescription() {
	f.Where(entql.HasEdge("prescription"))
}

// WhereHasPrescriptionWith applies a predicate to check if query has an edge prescription with a given conditions (other predicates).
func (f *PrescriptionItemFilter) WhereHasPrescriptionWith(preds ...predicate.Prescription) {
	f.Where(entql.HasEdgeWith("prescription", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (thq *TakeHistoryQuery) addPredicate(pred func(s *sql.Selector)) {
	thq.predicates = append(thq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the TakeHistoryQuery builder.
func (thq *TakeHistoryQuery) Filter() *TakeHistoryFilter {
	return &TakeHistoryFilter{config: thq.config, predicateAdder: thq}
}

// addPredicate implements the predicateAdder interface.
func (m *TakeHistoryMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the TakeHistoryMutation builder.
func (m *TakeHistoryMutation) Filter() *TakeHistoryFilter {
	return &TakeHistoryFilter{config: m.config, predicateAdder: m}
}

// TakeHistoryFilter provides a generic filtering capability at runtime for TakeHistoryQuery.
type TakeHistoryFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *TakeHistoryFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[3].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *TakeHistoryFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(takehistory.FieldID))
}

// WhereUserID applies the entql [16]byte predicate on the user_id field.
func (f *TakeHistoryFilter) WhereUserID(p entql.ValueP) {
	f.Where(p.Field(takehistory.FieldUserID))
}

// WherePrescriptionID applies the entql [16]byte predicate on the prescription_id field.
func (f *TakeHistoryFilter) WherePrescriptionID(p entql.ValueP) {
	f.Where(p.Field(takehistory.FieldPrescriptionID))
}

// WhereTakeDate applies the entql time.Time predicate on the take_date field.
func (f *TakeHistoryFilter) WhereTakeDate(p entql.TimeP) {
	f.Where(p.Field(takehistory.FieldTakeDate))
}

// WhereTakeStatus applies the entql string predicate on the take_status field.
func (f *TakeHistoryFilter) WhereTakeStatus(p entql.StringP) {
	f.Where(p.Field(takehistory.FieldTakeStatus))
}

// WhereMemo applies the entql string predicate on the memo field.
func (f *TakeHistoryFilter) WhereMemo(p entql.StringP) {
	f.Where(p.Field(takehistory.FieldMemo))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *TakeHistoryFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(takehistory.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *TakeHistoryFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(takehistory.FieldUpdatedAt))
}

// addPredicate implements the predicateAdder interface.
func (thiq *TakeHistoryItemQuery) addPredicate(pred func(s *sql.Selector)) {
	thiq.predicates = append(thiq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the TakeHistoryItemQuery builder.
func (thiq *TakeHistoryItemQuery) Filter() *TakeHistoryItemFilter {
	return &TakeHistoryItemFilter{config: thiq.config, predicateAdder: thiq}
}

// addPredicate implements the predicateAdder interface.
func (m *TakeHistoryItemMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the TakeHistoryItemMutation builder.
func (m *TakeHistoryItemMutation) Filter() *TakeHistoryItemFilter {
	return &TakeHistoryItemFilter{config: m.config, predicateAdder: m}
}

// TakeHistoryItemFilter provides a generic filtering capability at runtime for TakeHistoryItemQuery.
type TakeHistoryItemFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *TakeHistoryItemFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[4].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *TakeHistoryItemFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(takehistoryitem.FieldID))
}

// WhereUserID applies the entql [16]byte predicate on the user_id field.
func (f *TakeHistoryItemFilter) WhereUserID(p entql.ValueP) {
	f.Where(p.Field(takehistoryitem.FieldUserID))
}

// WhereTakeHistoryID applies the entql [16]byte predicate on the take_history_id field.
func (f *TakeHistoryItemFilter) WhereTakeHistoryID(p entql.ValueP) {
	f.Where(p.Field(takehistoryitem.FieldTakeHistoryID))
}

// WherePrescriptionItemID applies the entql [16]byte predicate on the prescription_item_id field.
func (f *TakeHistoryItemFilter) WherePrescriptionItemID(p entql.ValueP) {
	f.Where(p.Field(takehistoryitem.FieldPrescriptionItemID))
}

// WhereTakeStatus applies the entql string predicate on the take_status field.
func (f *TakeHistoryItemFilter) WhereTakeStatus(p entql.StringP) {
	f.Where(p.Field(takehistoryitem.FieldTakeStatus))
}

// WhereTakeAmount applies the entql float64 predicate on the take_amount field.
func (f *TakeHistoryItemFilter) WhereTakeAmount(p entql.Float64P) {
	f.Where(p.Field(takehistoryitem.FieldTakeAmount))
}

// WhereTakeTimeZone applies the entql string predicate on the take_time_zone field.
func (f *TakeHistoryItemFilter) WhereTakeTimeZone(p entql.StringP) {
	f.Where(p.Field(takehistoryitem.FieldTakeTimeZone))
}

// WhereTakeMoment applies the entql string predicate on the take_moment field.
func (f *TakeHistoryItemFilter) WhereTakeMoment(p entql.StringP) {
	f.Where(p.Field(takehistoryitem.FieldTakeMoment))
}

// WhereTakeEtc applies the entql string predicate on the take_etc field.
func (f *TakeHistoryItemFilter) WhereTakeEtc(p entql.StringP) {
	f.Where(p.Field(takehistoryitem.FieldTakeEtc))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *TakeHistoryItemFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(takehistoryitem.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *TakeHistoryItemFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(takehistoryitem.FieldUpdatedAt))
}

// addPredicate implements the predicateAdder interface.
func (tq *TokenQuery) addPredicate(pred func(s *sql.Selector)) {
	tq.predicates = append(tq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the TokenQuery builder.
func (tq *TokenQuery) Filter() *TokenFilter {
	return &TokenFilter{config: tq.config, predicateAdder: tq}
}

// addPredicate implements the predicateAdder interface.
func (m *TokenMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the TokenMutation builder.
func (m *TokenMutation) Filter() *TokenFilter {
	return &TokenFilter{config: m.config, predicateAdder: m}
}

// TokenFilter provides a generic filtering capability at runtime for TokenQuery.
type TokenFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *TokenFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[5].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *TokenFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(token.FieldID))
}

// WhereUserID applies the entql [16]byte predicate on the user_id field.
func (f *TokenFilter) WhereUserID(p entql.ValueP) {
	f.Where(p.Field(token.FieldUserID))
}

// WhereAccessToken applies the entql string predicate on the access_token field.
func (f *TokenFilter) WhereAccessToken(p entql.StringP) {
	f.Where(p.Field(token.FieldAccessToken))
}

// WhereRefreshToken applies the entql string predicate on the refresh_token field.
func (f *TokenFilter) WhereRefreshToken(p entql.StringP) {
	f.Where(p.Field(token.FieldRefreshToken))
}

// WhereAccessTokenExpires applies the entql time.Time predicate on the access_token_expires field.
func (f *TokenFilter) WhereAccessTokenExpires(p entql.TimeP) {
	f.Where(p.Field(token.FieldAccessTokenExpires))
}

// WhereRefreshTokenExpires applies the entql time.Time predicate on the refresh_token_expires field.
func (f *TokenFilter) WhereRefreshTokenExpires(p entql.TimeP) {
	f.Where(p.Field(token.FieldRefreshTokenExpires))
}

// WhereAutoLogin applies the entql bool predicate on the auto_login field.
func (f *TokenFilter) WhereAutoLogin(p entql.BoolP) {
	f.Where(p.Field(token.FieldAutoLogin))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *TokenFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(token.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *TokenFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(token.FieldUpdatedAt))
}

// addPredicate implements the predicateAdder interface.
func (uq *UserQuery) addPredicate(pred func(s *sql.Selector)) {
	uq.predicates = append(uq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the UserQuery builder.
func (uq *UserQuery) Filter() *UserFilter {
	return &UserFilter{config: uq.config, predicateAdder: uq}
}

// addPredicate implements the predicateAdder interface.
func (m *UserMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the UserMutation builder.
func (m *UserMutation) Filter() *UserFilter {
	return &UserFilter{config: m.config, predicateAdder: m}
}

// UserFilter provides a generic filtering capability at runtime for UserQuery.
type UserFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *UserFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[6].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *UserFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(user.FieldID))
}

// WhereUserName applies the entql string predicate on the user_name field.
func (f *UserFilter) WhereUserName(p entql.StringP) {
	f.Where(p.Field(user.FieldUserName))
}

// WhereUserEmail applies the entql string predicate on the user_email field.
func (f *UserFilter) WhereUserEmail(p entql.StringP) {
	f.Where(p.Field(user.FieldUserEmail))
}

// WhereUserPassword applies the entql string predicate on the user_password field.
func (f *UserFilter) WhereUserPassword(p entql.StringP) {
	f.Where(p.Field(user.FieldUserPassword))
}

// WhereUserStatus applies the entql string predicate on the user_status field.
func (f *UserFilter) WhereUserStatus(p entql.StringP) {
	f.Where(p.Field(user.FieldUserStatus))
}

// WhereUserType applies the entql string predicate on the user_type field.
func (f *UserFilter) WhereUserType(p entql.StringP) {
	f.Where(p.Field(user.FieldUserType))
}

// WhereFailCount applies the entql int predicate on the fail_count field.
func (f *UserFilter) WhereFailCount(p entql.IntP) {
	f.Where(p.Field(user.FieldFailCount))
}

// WhereLastSignedIn applies the entql time.Time predicate on the last_signed_in field.
func (f *UserFilter) WhereLastSignedIn(p entql.TimeP) {
	f.Where(p.Field(user.FieldLastSignedIn))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *UserFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(user.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *UserFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(user.FieldUpdatedAt))
}
