// Code generated by ent, DO NOT EDIT.

package plantimezone

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the plantimezone type in the database.
	Label = "plan_time_zone"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// FieldTimezoneName holds the string denoting the timezone_name field in the database.
	FieldTimezoneName = "timezone_name"
	// FieldUseAlerm holds the string denoting the use_alerm field in the database.
	FieldUseAlerm = "use_alerm"
	// FieldScheduledAt holds the string denoting the scheduled_at field in the database.
	FieldScheduledAt = "scheduled_at"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// Table holds the table name of the plantimezone in the database.
	Table = "plan_time_zones"
)

// Columns holds all SQL columns for plantimezone fields.
var Columns = []string{
	FieldID,
	FieldUserID,
	FieldTimezoneName,
	FieldUseAlerm,
	FieldScheduledAt,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultUseAlerm holds the default value on creation for the "use_alerm" field.
	DefaultUseAlerm string
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the PlanTimeZone queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByUserID orders the results by the user_id field.
func ByUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserID, opts...).ToFunc()
}

// ByTimezoneName orders the results by the timezone_name field.
func ByTimezoneName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTimezoneName, opts...).ToFunc()
}

// ByUseAlerm orders the results by the use_alerm field.
func ByUseAlerm(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUseAlerm, opts...).ToFunc()
}

// ByScheduledAt orders the results by the scheduled_at field.
func ByScheduledAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldScheduledAt, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}
