// Code generated by ent, DO NOT EDIT.

package plantimezone

import (
	"nursing_api/pkg/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.PlanTimeZone {
	return predicate.PlanTimeZone(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.PlanTimeZone {
	return predicate.PlanTimeZone(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.PlanTimeZone {
	return predicate.PlanTimeZone(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.PlanTimeZone {
	return predicate.PlanTimeZone(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.PlanTimeZone {
	return predicate.PlanTimeZone(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.PlanTimeZone {
	return predicate.PlanTimeZone(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.PlanTimeZone {
	return predicate.PlanTimeZone(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.PlanTimeZone {
	return predicate.PlanTimeZone(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.PlanTimeZone {
	return predicate.PlanTimeZone(sql.FieldLTE(FieldID, id))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v uuid.UUID) predicate.PlanTimeZone {
	return predicate.PlanTimeZone(sql.FieldEQ(FieldUserID, v))
}

// TimezoneName applies equality check predicate on the "timezone_name" field. It's identical to TimezoneNameEQ.
func TimezoneName(v string) predicate.PlanTimeZone {
	return predicate.PlanTimeZone(sql.FieldEQ(FieldTimezoneName, v))
}

// IsDefault applies equality check predicate on the "is_default" field. It's identical to IsDefaultEQ.
func IsDefault(v bool) predicate.PlanTimeZone {
	return predicate.PlanTimeZone(sql.FieldEQ(FieldIsDefault, v))
}

// Midday applies equality check predicate on the "midday" field. It's identical to MiddayEQ.
func Midday(v string) predicate.PlanTimeZone {
	return predicate.PlanTimeZone(sql.FieldEQ(FieldMidday, v))
}

// Hour applies equality check predicate on the "hour" field. It's identical to HourEQ.
func Hour(v string) predicate.PlanTimeZone {
	return predicate.PlanTimeZone(sql.FieldEQ(FieldHour, v))
}

// Minute applies equality check predicate on the "minute" field. It's identical to MinuteEQ.
func Minute(v string) predicate.PlanTimeZone {
	return predicate.PlanTimeZone(sql.FieldEQ(FieldMinute, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.PlanTimeZone {
	return predicate.PlanTimeZone(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.PlanTimeZone {
	return predicate.PlanTimeZone(sql.FieldEQ(FieldUpdatedAt, v))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v uuid.UUID) predicate.PlanTimeZone {
	return predicate.PlanTimeZone(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v uuid.UUID) predicate.PlanTimeZone {
	return predicate.PlanTimeZone(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...uuid.UUID) predicate.PlanTimeZone {
	return predicate.PlanTimeZone(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...uuid.UUID) predicate.PlanTimeZone {
	return predicate.PlanTimeZone(sql.FieldNotIn(FieldUserID, vs...))
}

// UserIDGT applies the GT predicate on the "user_id" field.
func UserIDGT(v uuid.UUID) predicate.PlanTimeZone {
	return predicate.PlanTimeZone(sql.FieldGT(FieldUserID, v))
}

// UserIDGTE applies the GTE predicate on the "user_id" field.
func UserIDGTE(v uuid.UUID) predicate.PlanTimeZone {
	return predicate.PlanTimeZone(sql.FieldGTE(FieldUserID, v))
}

// UserIDLT applies the LT predicate on the "user_id" field.
func UserIDLT(v uuid.UUID) predicate.PlanTimeZone {
	return predicate.PlanTimeZone(sql.FieldLT(FieldUserID, v))
}

// UserIDLTE applies the LTE predicate on the "user_id" field.
func UserIDLTE(v uuid.UUID) predicate.PlanTimeZone {
	return predicate.PlanTimeZone(sql.FieldLTE(FieldUserID, v))
}

// TimezoneNameEQ applies the EQ predicate on the "timezone_name" field.
func TimezoneNameEQ(v string) predicate.PlanTimeZone {
	return predicate.PlanTimeZone(sql.FieldEQ(FieldTimezoneName, v))
}

// TimezoneNameNEQ applies the NEQ predicate on the "timezone_name" field.
func TimezoneNameNEQ(v string) predicate.PlanTimeZone {
	return predicate.PlanTimeZone(sql.FieldNEQ(FieldTimezoneName, v))
}

// TimezoneNameIn applies the In predicate on the "timezone_name" field.
func TimezoneNameIn(vs ...string) predicate.PlanTimeZone {
	return predicate.PlanTimeZone(sql.FieldIn(FieldTimezoneName, vs...))
}

// TimezoneNameNotIn applies the NotIn predicate on the "timezone_name" field.
func TimezoneNameNotIn(vs ...string) predicate.PlanTimeZone {
	return predicate.PlanTimeZone(sql.FieldNotIn(FieldTimezoneName, vs...))
}

// TimezoneNameGT applies the GT predicate on the "timezone_name" field.
func TimezoneNameGT(v string) predicate.PlanTimeZone {
	return predicate.PlanTimeZone(sql.FieldGT(FieldTimezoneName, v))
}

// TimezoneNameGTE applies the GTE predicate on the "timezone_name" field.
func TimezoneNameGTE(v string) predicate.PlanTimeZone {
	return predicate.PlanTimeZone(sql.FieldGTE(FieldTimezoneName, v))
}

// TimezoneNameLT applies the LT predicate on the "timezone_name" field.
func TimezoneNameLT(v string) predicate.PlanTimeZone {
	return predicate.PlanTimeZone(sql.FieldLT(FieldTimezoneName, v))
}

// TimezoneNameLTE applies the LTE predicate on the "timezone_name" field.
func TimezoneNameLTE(v string) predicate.PlanTimeZone {
	return predicate.PlanTimeZone(sql.FieldLTE(FieldTimezoneName, v))
}

// TimezoneNameContains applies the Contains predicate on the "timezone_name" field.
func TimezoneNameContains(v string) predicate.PlanTimeZone {
	return predicate.PlanTimeZone(sql.FieldContains(FieldTimezoneName, v))
}

// TimezoneNameHasPrefix applies the HasPrefix predicate on the "timezone_name" field.
func TimezoneNameHasPrefix(v string) predicate.PlanTimeZone {
	return predicate.PlanTimeZone(sql.FieldHasPrefix(FieldTimezoneName, v))
}

// TimezoneNameHasSuffix applies the HasSuffix predicate on the "timezone_name" field.
func TimezoneNameHasSuffix(v string) predicate.PlanTimeZone {
	return predicate.PlanTimeZone(sql.FieldHasSuffix(FieldTimezoneName, v))
}

// TimezoneNameIsNil applies the IsNil predicate on the "timezone_name" field.
func TimezoneNameIsNil() predicate.PlanTimeZone {
	return predicate.PlanTimeZone(sql.FieldIsNull(FieldTimezoneName))
}

// TimezoneNameNotNil applies the NotNil predicate on the "timezone_name" field.
func TimezoneNameNotNil() predicate.PlanTimeZone {
	return predicate.PlanTimeZone(sql.FieldNotNull(FieldTimezoneName))
}

// TimezoneNameEqualFold applies the EqualFold predicate on the "timezone_name" field.
func TimezoneNameEqualFold(v string) predicate.PlanTimeZone {
	return predicate.PlanTimeZone(sql.FieldEqualFold(FieldTimezoneName, v))
}

// TimezoneNameContainsFold applies the ContainsFold predicate on the "timezone_name" field.
func TimezoneNameContainsFold(v string) predicate.PlanTimeZone {
	return predicate.PlanTimeZone(sql.FieldContainsFold(FieldTimezoneName, v))
}

// IsDefaultEQ applies the EQ predicate on the "is_default" field.
func IsDefaultEQ(v bool) predicate.PlanTimeZone {
	return predicate.PlanTimeZone(sql.FieldEQ(FieldIsDefault, v))
}

// IsDefaultNEQ applies the NEQ predicate on the "is_default" field.
func IsDefaultNEQ(v bool) predicate.PlanTimeZone {
	return predicate.PlanTimeZone(sql.FieldNEQ(FieldIsDefault, v))
}

// MiddayEQ applies the EQ predicate on the "midday" field.
func MiddayEQ(v string) predicate.PlanTimeZone {
	return predicate.PlanTimeZone(sql.FieldEQ(FieldMidday, v))
}

// MiddayNEQ applies the NEQ predicate on the "midday" field.
func MiddayNEQ(v string) predicate.PlanTimeZone {
	return predicate.PlanTimeZone(sql.FieldNEQ(FieldMidday, v))
}

// MiddayIn applies the In predicate on the "midday" field.
func MiddayIn(vs ...string) predicate.PlanTimeZone {
	return predicate.PlanTimeZone(sql.FieldIn(FieldMidday, vs...))
}

// MiddayNotIn applies the NotIn predicate on the "midday" field.
func MiddayNotIn(vs ...string) predicate.PlanTimeZone {
	return predicate.PlanTimeZone(sql.FieldNotIn(FieldMidday, vs...))
}

// MiddayGT applies the GT predicate on the "midday" field.
func MiddayGT(v string) predicate.PlanTimeZone {
	return predicate.PlanTimeZone(sql.FieldGT(FieldMidday, v))
}

// MiddayGTE applies the GTE predicate on the "midday" field.
func MiddayGTE(v string) predicate.PlanTimeZone {
	return predicate.PlanTimeZone(sql.FieldGTE(FieldMidday, v))
}

// MiddayLT applies the LT predicate on the "midday" field.
func MiddayLT(v string) predicate.PlanTimeZone {
	return predicate.PlanTimeZone(sql.FieldLT(FieldMidday, v))
}

// MiddayLTE applies the LTE predicate on the "midday" field.
func MiddayLTE(v string) predicate.PlanTimeZone {
	return predicate.PlanTimeZone(sql.FieldLTE(FieldMidday, v))
}

// MiddayContains applies the Contains predicate on the "midday" field.
func MiddayContains(v string) predicate.PlanTimeZone {
	return predicate.PlanTimeZone(sql.FieldContains(FieldMidday, v))
}

// MiddayHasPrefix applies the HasPrefix predicate on the "midday" field.
func MiddayHasPrefix(v string) predicate.PlanTimeZone {
	return predicate.PlanTimeZone(sql.FieldHasPrefix(FieldMidday, v))
}

// MiddayHasSuffix applies the HasSuffix predicate on the "midday" field.
func MiddayHasSuffix(v string) predicate.PlanTimeZone {
	return predicate.PlanTimeZone(sql.FieldHasSuffix(FieldMidday, v))
}

// MiddayEqualFold applies the EqualFold predicate on the "midday" field.
func MiddayEqualFold(v string) predicate.PlanTimeZone {
	return predicate.PlanTimeZone(sql.FieldEqualFold(FieldMidday, v))
}

// MiddayContainsFold applies the ContainsFold predicate on the "midday" field.
func MiddayContainsFold(v string) predicate.PlanTimeZone {
	return predicate.PlanTimeZone(sql.FieldContainsFold(FieldMidday, v))
}

// HourEQ applies the EQ predicate on the "hour" field.
func HourEQ(v string) predicate.PlanTimeZone {
	return predicate.PlanTimeZone(sql.FieldEQ(FieldHour, v))
}

// HourNEQ applies the NEQ predicate on the "hour" field.
func HourNEQ(v string) predicate.PlanTimeZone {
	return predicate.PlanTimeZone(sql.FieldNEQ(FieldHour, v))
}

// HourIn applies the In predicate on the "hour" field.
func HourIn(vs ...string) predicate.PlanTimeZone {
	return predicate.PlanTimeZone(sql.FieldIn(FieldHour, vs...))
}

// HourNotIn applies the NotIn predicate on the "hour" field.
func HourNotIn(vs ...string) predicate.PlanTimeZone {
	return predicate.PlanTimeZone(sql.FieldNotIn(FieldHour, vs...))
}

// HourGT applies the GT predicate on the "hour" field.
func HourGT(v string) predicate.PlanTimeZone {
	return predicate.PlanTimeZone(sql.FieldGT(FieldHour, v))
}

// HourGTE applies the GTE predicate on the "hour" field.
func HourGTE(v string) predicate.PlanTimeZone {
	return predicate.PlanTimeZone(sql.FieldGTE(FieldHour, v))
}

// HourLT applies the LT predicate on the "hour" field.
func HourLT(v string) predicate.PlanTimeZone {
	return predicate.PlanTimeZone(sql.FieldLT(FieldHour, v))
}

// HourLTE applies the LTE predicate on the "hour" field.
func HourLTE(v string) predicate.PlanTimeZone {
	return predicate.PlanTimeZone(sql.FieldLTE(FieldHour, v))
}

// HourContains applies the Contains predicate on the "hour" field.
func HourContains(v string) predicate.PlanTimeZone {
	return predicate.PlanTimeZone(sql.FieldContains(FieldHour, v))
}

// HourHasPrefix applies the HasPrefix predicate on the "hour" field.
func HourHasPrefix(v string) predicate.PlanTimeZone {
	return predicate.PlanTimeZone(sql.FieldHasPrefix(FieldHour, v))
}

// HourHasSuffix applies the HasSuffix predicate on the "hour" field.
func HourHasSuffix(v string) predicate.PlanTimeZone {
	return predicate.PlanTimeZone(sql.FieldHasSuffix(FieldHour, v))
}

// HourEqualFold applies the EqualFold predicate on the "hour" field.
func HourEqualFold(v string) predicate.PlanTimeZone {
	return predicate.PlanTimeZone(sql.FieldEqualFold(FieldHour, v))
}

// HourContainsFold applies the ContainsFold predicate on the "hour" field.
func HourContainsFold(v string) predicate.PlanTimeZone {
	return predicate.PlanTimeZone(sql.FieldContainsFold(FieldHour, v))
}

// MinuteEQ applies the EQ predicate on the "minute" field.
func MinuteEQ(v string) predicate.PlanTimeZone {
	return predicate.PlanTimeZone(sql.FieldEQ(FieldMinute, v))
}

// MinuteNEQ applies the NEQ predicate on the "minute" field.
func MinuteNEQ(v string) predicate.PlanTimeZone {
	return predicate.PlanTimeZone(sql.FieldNEQ(FieldMinute, v))
}

// MinuteIn applies the In predicate on the "minute" field.
func MinuteIn(vs ...string) predicate.PlanTimeZone {
	return predicate.PlanTimeZone(sql.FieldIn(FieldMinute, vs...))
}

// MinuteNotIn applies the NotIn predicate on the "minute" field.
func MinuteNotIn(vs ...string) predicate.PlanTimeZone {
	return predicate.PlanTimeZone(sql.FieldNotIn(FieldMinute, vs...))
}

// MinuteGT applies the GT predicate on the "minute" field.
func MinuteGT(v string) predicate.PlanTimeZone {
	return predicate.PlanTimeZone(sql.FieldGT(FieldMinute, v))
}

// MinuteGTE applies the GTE predicate on the "minute" field.
func MinuteGTE(v string) predicate.PlanTimeZone {
	return predicate.PlanTimeZone(sql.FieldGTE(FieldMinute, v))
}

// MinuteLT applies the LT predicate on the "minute" field.
func MinuteLT(v string) predicate.PlanTimeZone {
	return predicate.PlanTimeZone(sql.FieldLT(FieldMinute, v))
}

// MinuteLTE applies the LTE predicate on the "minute" field.
func MinuteLTE(v string) predicate.PlanTimeZone {
	return predicate.PlanTimeZone(sql.FieldLTE(FieldMinute, v))
}

// MinuteContains applies the Contains predicate on the "minute" field.
func MinuteContains(v string) predicate.PlanTimeZone {
	return predicate.PlanTimeZone(sql.FieldContains(FieldMinute, v))
}

// MinuteHasPrefix applies the HasPrefix predicate on the "minute" field.
func MinuteHasPrefix(v string) predicate.PlanTimeZone {
	return predicate.PlanTimeZone(sql.FieldHasPrefix(FieldMinute, v))
}

// MinuteHasSuffix applies the HasSuffix predicate on the "minute" field.
func MinuteHasSuffix(v string) predicate.PlanTimeZone {
	return predicate.PlanTimeZone(sql.FieldHasSuffix(FieldMinute, v))
}

// MinuteEqualFold applies the EqualFold predicate on the "minute" field.
func MinuteEqualFold(v string) predicate.PlanTimeZone {
	return predicate.PlanTimeZone(sql.FieldEqualFold(FieldMinute, v))
}

// MinuteContainsFold applies the ContainsFold predicate on the "minute" field.
func MinuteContainsFold(v string) predicate.PlanTimeZone {
	return predicate.PlanTimeZone(sql.FieldContainsFold(FieldMinute, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.PlanTimeZone {
	return predicate.PlanTimeZone(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.PlanTimeZone {
	return predicate.PlanTimeZone(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.PlanTimeZone {
	return predicate.PlanTimeZone(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.PlanTimeZone {
	return predicate.PlanTimeZone(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.PlanTimeZone {
	return predicate.PlanTimeZone(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.PlanTimeZone {
	return predicate.PlanTimeZone(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.PlanTimeZone {
	return predicate.PlanTimeZone(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.PlanTimeZone {
	return predicate.PlanTimeZone(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.PlanTimeZone {
	return predicate.PlanTimeZone(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.PlanTimeZone {
	return predicate.PlanTimeZone(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.PlanTimeZone {
	return predicate.PlanTimeZone(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.PlanTimeZone {
	return predicate.PlanTimeZone(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.PlanTimeZone {
	return predicate.PlanTimeZone(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.PlanTimeZone {
	return predicate.PlanTimeZone(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.PlanTimeZone {
	return predicate.PlanTimeZone(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.PlanTimeZone {
	return predicate.PlanTimeZone(sql.FieldLTE(FieldUpdatedAt, v))
}

// UpdatedAtIsNil applies the IsNil predicate on the "updated_at" field.
func UpdatedAtIsNil() predicate.PlanTimeZone {
	return predicate.PlanTimeZone(sql.FieldIsNull(FieldUpdatedAt))
}

// UpdatedAtNotNil applies the NotNil predicate on the "updated_at" field.
func UpdatedAtNotNil() predicate.PlanTimeZone {
	return predicate.PlanTimeZone(sql.FieldNotNull(FieldUpdatedAt))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.PlanTimeZone) predicate.PlanTimeZone {
	return predicate.PlanTimeZone(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.PlanTimeZone) predicate.PlanTimeZone {
	return predicate.PlanTimeZone(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.PlanTimeZone) predicate.PlanTimeZone {
	return predicate.PlanTimeZone(sql.NotPredicates(p))
}
