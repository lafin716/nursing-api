// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"nursing_api/pkg/ent/predicate"
	"nursing_api/pkg/ent/timezonelink"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// TimeZoneLinkUpdate is the builder for updating TimeZoneLink entities.
type TimeZoneLinkUpdate struct {
	config
	hooks    []Hook
	mutation *TimeZoneLinkMutation
}

// Where appends a list predicates to the TimeZoneLinkUpdate builder.
func (tzlu *TimeZoneLinkUpdate) Where(ps ...predicate.TimeZoneLink) *TimeZoneLinkUpdate {
	tzlu.mutation.Where(ps...)
	return tzlu
}

// SetPrescriptionID sets the "prescription_id" field.
func (tzlu *TimeZoneLinkUpdate) SetPrescriptionID(u uuid.UUID) *TimeZoneLinkUpdate {
	tzlu.mutation.SetPrescriptionID(u)
	return tzlu
}

// SetNillablePrescriptionID sets the "prescription_id" field if the given value is not nil.
func (tzlu *TimeZoneLinkUpdate) SetNillablePrescriptionID(u *uuid.UUID) *TimeZoneLinkUpdate {
	if u != nil {
		tzlu.SetPrescriptionID(*u)
	}
	return tzlu
}

// SetTimezoneID sets the "timezone_id" field.
func (tzlu *TimeZoneLinkUpdate) SetTimezoneID(u uuid.UUID) *TimeZoneLinkUpdate {
	tzlu.mutation.SetTimezoneID(u)
	return tzlu
}

// SetNillableTimezoneID sets the "timezone_id" field if the given value is not nil.
func (tzlu *TimeZoneLinkUpdate) SetNillableTimezoneID(u *uuid.UUID) *TimeZoneLinkUpdate {
	if u != nil {
		tzlu.SetTimezoneID(*u)
	}
	return tzlu
}

// SetTimezoneName sets the "timezone_name" field.
func (tzlu *TimeZoneLinkUpdate) SetTimezoneName(s string) *TimeZoneLinkUpdate {
	tzlu.mutation.SetTimezoneName(s)
	return tzlu
}

// SetNillableTimezoneName sets the "timezone_name" field if the given value is not nil.
func (tzlu *TimeZoneLinkUpdate) SetNillableTimezoneName(s *string) *TimeZoneLinkUpdate {
	if s != nil {
		tzlu.SetTimezoneName(*s)
	}
	return tzlu
}

// ClearTimezoneName clears the value of the "timezone_name" field.
func (tzlu *TimeZoneLinkUpdate) ClearTimezoneName() *TimeZoneLinkUpdate {
	tzlu.mutation.ClearTimezoneName()
	return tzlu
}

// SetUseAlert sets the "use_alert" field.
func (tzlu *TimeZoneLinkUpdate) SetUseAlert(b bool) *TimeZoneLinkUpdate {
	tzlu.mutation.SetUseAlert(b)
	return tzlu
}

// SetNillableUseAlert sets the "use_alert" field if the given value is not nil.
func (tzlu *TimeZoneLinkUpdate) SetNillableUseAlert(b *bool) *TimeZoneLinkUpdate {
	if b != nil {
		tzlu.SetUseAlert(*b)
	}
	return tzlu
}

// SetMidday sets the "midday" field.
func (tzlu *TimeZoneLinkUpdate) SetMidday(s string) *TimeZoneLinkUpdate {
	tzlu.mutation.SetMidday(s)
	return tzlu
}

// SetNillableMidday sets the "midday" field if the given value is not nil.
func (tzlu *TimeZoneLinkUpdate) SetNillableMidday(s *string) *TimeZoneLinkUpdate {
	if s != nil {
		tzlu.SetMidday(*s)
	}
	return tzlu
}

// SetHour sets the "hour" field.
func (tzlu *TimeZoneLinkUpdate) SetHour(s string) *TimeZoneLinkUpdate {
	tzlu.mutation.SetHour(s)
	return tzlu
}

// SetNillableHour sets the "hour" field if the given value is not nil.
func (tzlu *TimeZoneLinkUpdate) SetNillableHour(s *string) *TimeZoneLinkUpdate {
	if s != nil {
		tzlu.SetHour(*s)
	}
	return tzlu
}

// SetMinute sets the "minute" field.
func (tzlu *TimeZoneLinkUpdate) SetMinute(s string) *TimeZoneLinkUpdate {
	tzlu.mutation.SetMinute(s)
	return tzlu
}

// SetNillableMinute sets the "minute" field if the given value is not nil.
func (tzlu *TimeZoneLinkUpdate) SetNillableMinute(s *string) *TimeZoneLinkUpdate {
	if s != nil {
		tzlu.SetMinute(*s)
	}
	return tzlu
}

// SetCreatedAt sets the "created_at" field.
func (tzlu *TimeZoneLinkUpdate) SetCreatedAt(t time.Time) *TimeZoneLinkUpdate {
	tzlu.mutation.SetCreatedAt(t)
	return tzlu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tzlu *TimeZoneLinkUpdate) SetNillableCreatedAt(t *time.Time) *TimeZoneLinkUpdate {
	if t != nil {
		tzlu.SetCreatedAt(*t)
	}
	return tzlu
}

// SetUpdatedAt sets the "updated_at" field.
func (tzlu *TimeZoneLinkUpdate) SetUpdatedAt(t time.Time) *TimeZoneLinkUpdate {
	tzlu.mutation.SetUpdatedAt(t)
	return tzlu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (tzlu *TimeZoneLinkUpdate) SetNillableUpdatedAt(t *time.Time) *TimeZoneLinkUpdate {
	if t != nil {
		tzlu.SetUpdatedAt(*t)
	}
	return tzlu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (tzlu *TimeZoneLinkUpdate) ClearUpdatedAt() *TimeZoneLinkUpdate {
	tzlu.mutation.ClearUpdatedAt()
	return tzlu
}

// Mutation returns the TimeZoneLinkMutation object of the builder.
func (tzlu *TimeZoneLinkUpdate) Mutation() *TimeZoneLinkMutation {
	return tzlu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tzlu *TimeZoneLinkUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, tzlu.sqlSave, tzlu.mutation, tzlu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tzlu *TimeZoneLinkUpdate) SaveX(ctx context.Context) int {
	affected, err := tzlu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tzlu *TimeZoneLinkUpdate) Exec(ctx context.Context) error {
	_, err := tzlu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tzlu *TimeZoneLinkUpdate) ExecX(ctx context.Context) {
	if err := tzlu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (tzlu *TimeZoneLinkUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(timezonelink.Table, timezonelink.Columns, sqlgraph.NewFieldSpec(timezonelink.FieldID, field.TypeUUID))
	if ps := tzlu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tzlu.mutation.PrescriptionID(); ok {
		_spec.SetField(timezonelink.FieldPrescriptionID, field.TypeUUID, value)
	}
	if value, ok := tzlu.mutation.TimezoneID(); ok {
		_spec.SetField(timezonelink.FieldTimezoneID, field.TypeUUID, value)
	}
	if value, ok := tzlu.mutation.TimezoneName(); ok {
		_spec.SetField(timezonelink.FieldTimezoneName, field.TypeString, value)
	}
	if tzlu.mutation.TimezoneNameCleared() {
		_spec.ClearField(timezonelink.FieldTimezoneName, field.TypeString)
	}
	if value, ok := tzlu.mutation.UseAlert(); ok {
		_spec.SetField(timezonelink.FieldUseAlert, field.TypeBool, value)
	}
	if value, ok := tzlu.mutation.Midday(); ok {
		_spec.SetField(timezonelink.FieldMidday, field.TypeString, value)
	}
	if value, ok := tzlu.mutation.Hour(); ok {
		_spec.SetField(timezonelink.FieldHour, field.TypeString, value)
	}
	if value, ok := tzlu.mutation.Minute(); ok {
		_spec.SetField(timezonelink.FieldMinute, field.TypeString, value)
	}
	if value, ok := tzlu.mutation.CreatedAt(); ok {
		_spec.SetField(timezonelink.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := tzlu.mutation.UpdatedAt(); ok {
		_spec.SetField(timezonelink.FieldUpdatedAt, field.TypeTime, value)
	}
	if tzlu.mutation.UpdatedAtCleared() {
		_spec.ClearField(timezonelink.FieldUpdatedAt, field.TypeTime)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tzlu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{timezonelink.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tzlu.mutation.done = true
	return n, nil
}

// TimeZoneLinkUpdateOne is the builder for updating a single TimeZoneLink entity.
type TimeZoneLinkUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TimeZoneLinkMutation
}

// SetPrescriptionID sets the "prescription_id" field.
func (tzluo *TimeZoneLinkUpdateOne) SetPrescriptionID(u uuid.UUID) *TimeZoneLinkUpdateOne {
	tzluo.mutation.SetPrescriptionID(u)
	return tzluo
}

// SetNillablePrescriptionID sets the "prescription_id" field if the given value is not nil.
func (tzluo *TimeZoneLinkUpdateOne) SetNillablePrescriptionID(u *uuid.UUID) *TimeZoneLinkUpdateOne {
	if u != nil {
		tzluo.SetPrescriptionID(*u)
	}
	return tzluo
}

// SetTimezoneID sets the "timezone_id" field.
func (tzluo *TimeZoneLinkUpdateOne) SetTimezoneID(u uuid.UUID) *TimeZoneLinkUpdateOne {
	tzluo.mutation.SetTimezoneID(u)
	return tzluo
}

// SetNillableTimezoneID sets the "timezone_id" field if the given value is not nil.
func (tzluo *TimeZoneLinkUpdateOne) SetNillableTimezoneID(u *uuid.UUID) *TimeZoneLinkUpdateOne {
	if u != nil {
		tzluo.SetTimezoneID(*u)
	}
	return tzluo
}

// SetTimezoneName sets the "timezone_name" field.
func (tzluo *TimeZoneLinkUpdateOne) SetTimezoneName(s string) *TimeZoneLinkUpdateOne {
	tzluo.mutation.SetTimezoneName(s)
	return tzluo
}

// SetNillableTimezoneName sets the "timezone_name" field if the given value is not nil.
func (tzluo *TimeZoneLinkUpdateOne) SetNillableTimezoneName(s *string) *TimeZoneLinkUpdateOne {
	if s != nil {
		tzluo.SetTimezoneName(*s)
	}
	return tzluo
}

// ClearTimezoneName clears the value of the "timezone_name" field.
func (tzluo *TimeZoneLinkUpdateOne) ClearTimezoneName() *TimeZoneLinkUpdateOne {
	tzluo.mutation.ClearTimezoneName()
	return tzluo
}

// SetUseAlert sets the "use_alert" field.
func (tzluo *TimeZoneLinkUpdateOne) SetUseAlert(b bool) *TimeZoneLinkUpdateOne {
	tzluo.mutation.SetUseAlert(b)
	return tzluo
}

// SetNillableUseAlert sets the "use_alert" field if the given value is not nil.
func (tzluo *TimeZoneLinkUpdateOne) SetNillableUseAlert(b *bool) *TimeZoneLinkUpdateOne {
	if b != nil {
		tzluo.SetUseAlert(*b)
	}
	return tzluo
}

// SetMidday sets the "midday" field.
func (tzluo *TimeZoneLinkUpdateOne) SetMidday(s string) *TimeZoneLinkUpdateOne {
	tzluo.mutation.SetMidday(s)
	return tzluo
}

// SetNillableMidday sets the "midday" field if the given value is not nil.
func (tzluo *TimeZoneLinkUpdateOne) SetNillableMidday(s *string) *TimeZoneLinkUpdateOne {
	if s != nil {
		tzluo.SetMidday(*s)
	}
	return tzluo
}

// SetHour sets the "hour" field.
func (tzluo *TimeZoneLinkUpdateOne) SetHour(s string) *TimeZoneLinkUpdateOne {
	tzluo.mutation.SetHour(s)
	return tzluo
}

// SetNillableHour sets the "hour" field if the given value is not nil.
func (tzluo *TimeZoneLinkUpdateOne) SetNillableHour(s *string) *TimeZoneLinkUpdateOne {
	if s != nil {
		tzluo.SetHour(*s)
	}
	return tzluo
}

// SetMinute sets the "minute" field.
func (tzluo *TimeZoneLinkUpdateOne) SetMinute(s string) *TimeZoneLinkUpdateOne {
	tzluo.mutation.SetMinute(s)
	return tzluo
}

// SetNillableMinute sets the "minute" field if the given value is not nil.
func (tzluo *TimeZoneLinkUpdateOne) SetNillableMinute(s *string) *TimeZoneLinkUpdateOne {
	if s != nil {
		tzluo.SetMinute(*s)
	}
	return tzluo
}

// SetCreatedAt sets the "created_at" field.
func (tzluo *TimeZoneLinkUpdateOne) SetCreatedAt(t time.Time) *TimeZoneLinkUpdateOne {
	tzluo.mutation.SetCreatedAt(t)
	return tzluo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tzluo *TimeZoneLinkUpdateOne) SetNillableCreatedAt(t *time.Time) *TimeZoneLinkUpdateOne {
	if t != nil {
		tzluo.SetCreatedAt(*t)
	}
	return tzluo
}

// SetUpdatedAt sets the "updated_at" field.
func (tzluo *TimeZoneLinkUpdateOne) SetUpdatedAt(t time.Time) *TimeZoneLinkUpdateOne {
	tzluo.mutation.SetUpdatedAt(t)
	return tzluo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (tzluo *TimeZoneLinkUpdateOne) SetNillableUpdatedAt(t *time.Time) *TimeZoneLinkUpdateOne {
	if t != nil {
		tzluo.SetUpdatedAt(*t)
	}
	return tzluo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (tzluo *TimeZoneLinkUpdateOne) ClearUpdatedAt() *TimeZoneLinkUpdateOne {
	tzluo.mutation.ClearUpdatedAt()
	return tzluo
}

// Mutation returns the TimeZoneLinkMutation object of the builder.
func (tzluo *TimeZoneLinkUpdateOne) Mutation() *TimeZoneLinkMutation {
	return tzluo.mutation
}

// Where appends a list predicates to the TimeZoneLinkUpdate builder.
func (tzluo *TimeZoneLinkUpdateOne) Where(ps ...predicate.TimeZoneLink) *TimeZoneLinkUpdateOne {
	tzluo.mutation.Where(ps...)
	return tzluo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tzluo *TimeZoneLinkUpdateOne) Select(field string, fields ...string) *TimeZoneLinkUpdateOne {
	tzluo.fields = append([]string{field}, fields...)
	return tzluo
}

// Save executes the query and returns the updated TimeZoneLink entity.
func (tzluo *TimeZoneLinkUpdateOne) Save(ctx context.Context) (*TimeZoneLink, error) {
	return withHooks(ctx, tzluo.sqlSave, tzluo.mutation, tzluo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tzluo *TimeZoneLinkUpdateOne) SaveX(ctx context.Context) *TimeZoneLink {
	node, err := tzluo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tzluo *TimeZoneLinkUpdateOne) Exec(ctx context.Context) error {
	_, err := tzluo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tzluo *TimeZoneLinkUpdateOne) ExecX(ctx context.Context) {
	if err := tzluo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (tzluo *TimeZoneLinkUpdateOne) sqlSave(ctx context.Context) (_node *TimeZoneLink, err error) {
	_spec := sqlgraph.NewUpdateSpec(timezonelink.Table, timezonelink.Columns, sqlgraph.NewFieldSpec(timezonelink.FieldID, field.TypeUUID))
	id, ok := tzluo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "TimeZoneLink.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tzluo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, timezonelink.FieldID)
		for _, f := range fields {
			if !timezonelink.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != timezonelink.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tzluo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tzluo.mutation.PrescriptionID(); ok {
		_spec.SetField(timezonelink.FieldPrescriptionID, field.TypeUUID, value)
	}
	if value, ok := tzluo.mutation.TimezoneID(); ok {
		_spec.SetField(timezonelink.FieldTimezoneID, field.TypeUUID, value)
	}
	if value, ok := tzluo.mutation.TimezoneName(); ok {
		_spec.SetField(timezonelink.FieldTimezoneName, field.TypeString, value)
	}
	if tzluo.mutation.TimezoneNameCleared() {
		_spec.ClearField(timezonelink.FieldTimezoneName, field.TypeString)
	}
	if value, ok := tzluo.mutation.UseAlert(); ok {
		_spec.SetField(timezonelink.FieldUseAlert, field.TypeBool, value)
	}
	if value, ok := tzluo.mutation.Midday(); ok {
		_spec.SetField(timezonelink.FieldMidday, field.TypeString, value)
	}
	if value, ok := tzluo.mutation.Hour(); ok {
		_spec.SetField(timezonelink.FieldHour, field.TypeString, value)
	}
	if value, ok := tzluo.mutation.Minute(); ok {
		_spec.SetField(timezonelink.FieldMinute, field.TypeString, value)
	}
	if value, ok := tzluo.mutation.CreatedAt(); ok {
		_spec.SetField(timezonelink.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := tzluo.mutation.UpdatedAt(); ok {
		_spec.SetField(timezonelink.FieldUpdatedAt, field.TypeTime, value)
	}
	if tzluo.mutation.UpdatedAtCleared() {
		_spec.ClearField(timezonelink.FieldUpdatedAt, field.TypeTime)
	}
	_node = &TimeZoneLink{config: tzluo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tzluo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{timezonelink.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tzluo.mutation.done = true
	return _node, nil
}
