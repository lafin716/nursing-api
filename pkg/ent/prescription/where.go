// Code generated by ent, DO NOT EDIT.

package prescription

import (
	"nursing_api/pkg/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Prescription {
	return predicate.Prescription(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Prescription {
	return predicate.Prescription(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Prescription {
	return predicate.Prescription(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Prescription {
	return predicate.Prescription(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Prescription {
	return predicate.Prescription(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Prescription {
	return predicate.Prescription(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Prescription {
	return predicate.Prescription(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Prescription {
	return predicate.Prescription(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Prescription {
	return predicate.Prescription(sql.FieldLTE(FieldID, id))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v uuid.UUID) predicate.Prescription {
	return predicate.Prescription(sql.FieldEQ(FieldUserID, v))
}

// PrescriptionName applies equality check predicate on the "prescription_name" field. It's identical to PrescriptionNameEQ.
func PrescriptionName(v string) predicate.Prescription {
	return predicate.Prescription(sql.FieldEQ(FieldPrescriptionName, v))
}

// HospitalName applies equality check predicate on the "hospital_name" field. It's identical to HospitalNameEQ.
func HospitalName(v string) predicate.Prescription {
	return predicate.Prescription(sql.FieldEQ(FieldHospitalName, v))
}

// TakeDays applies equality check predicate on the "take_days" field. It's identical to TakeDaysEQ.
func TakeDays(v int) predicate.Prescription {
	return predicate.Prescription(sql.FieldEQ(FieldTakeDays, v))
}

// StartedAt applies equality check predicate on the "started_at" field. It's identical to StartedAtEQ.
func StartedAt(v time.Time) predicate.Prescription {
	return predicate.Prescription(sql.FieldEQ(FieldStartedAt, v))
}

// FinishedAt applies equality check predicate on the "finished_at" field. It's identical to FinishedAtEQ.
func FinishedAt(v time.Time) predicate.Prescription {
	return predicate.Prescription(sql.FieldEQ(FieldFinishedAt, v))
}

// Memo applies equality check predicate on the "memo" field. It's identical to MemoEQ.
func Memo(v string) predicate.Prescription {
	return predicate.Prescription(sql.FieldEQ(FieldMemo, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Prescription {
	return predicate.Prescription(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Prescription {
	return predicate.Prescription(sql.FieldEQ(FieldUpdatedAt, v))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v uuid.UUID) predicate.Prescription {
	return predicate.Prescription(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v uuid.UUID) predicate.Prescription {
	return predicate.Prescription(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...uuid.UUID) predicate.Prescription {
	return predicate.Prescription(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...uuid.UUID) predicate.Prescription {
	return predicate.Prescription(sql.FieldNotIn(FieldUserID, vs...))
}

// UserIDGT applies the GT predicate on the "user_id" field.
func UserIDGT(v uuid.UUID) predicate.Prescription {
	return predicate.Prescription(sql.FieldGT(FieldUserID, v))
}

// UserIDGTE applies the GTE predicate on the "user_id" field.
func UserIDGTE(v uuid.UUID) predicate.Prescription {
	return predicate.Prescription(sql.FieldGTE(FieldUserID, v))
}

// UserIDLT applies the LT predicate on the "user_id" field.
func UserIDLT(v uuid.UUID) predicate.Prescription {
	return predicate.Prescription(sql.FieldLT(FieldUserID, v))
}

// UserIDLTE applies the LTE predicate on the "user_id" field.
func UserIDLTE(v uuid.UUID) predicate.Prescription {
	return predicate.Prescription(sql.FieldLTE(FieldUserID, v))
}

// PrescriptionNameEQ applies the EQ predicate on the "prescription_name" field.
func PrescriptionNameEQ(v string) predicate.Prescription {
	return predicate.Prescription(sql.FieldEQ(FieldPrescriptionName, v))
}

// PrescriptionNameNEQ applies the NEQ predicate on the "prescription_name" field.
func PrescriptionNameNEQ(v string) predicate.Prescription {
	return predicate.Prescription(sql.FieldNEQ(FieldPrescriptionName, v))
}

// PrescriptionNameIn applies the In predicate on the "prescription_name" field.
func PrescriptionNameIn(vs ...string) predicate.Prescription {
	return predicate.Prescription(sql.FieldIn(FieldPrescriptionName, vs...))
}

// PrescriptionNameNotIn applies the NotIn predicate on the "prescription_name" field.
func PrescriptionNameNotIn(vs ...string) predicate.Prescription {
	return predicate.Prescription(sql.FieldNotIn(FieldPrescriptionName, vs...))
}

// PrescriptionNameGT applies the GT predicate on the "prescription_name" field.
func PrescriptionNameGT(v string) predicate.Prescription {
	return predicate.Prescription(sql.FieldGT(FieldPrescriptionName, v))
}

// PrescriptionNameGTE applies the GTE predicate on the "prescription_name" field.
func PrescriptionNameGTE(v string) predicate.Prescription {
	return predicate.Prescription(sql.FieldGTE(FieldPrescriptionName, v))
}

// PrescriptionNameLT applies the LT predicate on the "prescription_name" field.
func PrescriptionNameLT(v string) predicate.Prescription {
	return predicate.Prescription(sql.FieldLT(FieldPrescriptionName, v))
}

// PrescriptionNameLTE applies the LTE predicate on the "prescription_name" field.
func PrescriptionNameLTE(v string) predicate.Prescription {
	return predicate.Prescription(sql.FieldLTE(FieldPrescriptionName, v))
}

// PrescriptionNameContains applies the Contains predicate on the "prescription_name" field.
func PrescriptionNameContains(v string) predicate.Prescription {
	return predicate.Prescription(sql.FieldContains(FieldPrescriptionName, v))
}

// PrescriptionNameHasPrefix applies the HasPrefix predicate on the "prescription_name" field.
func PrescriptionNameHasPrefix(v string) predicate.Prescription {
	return predicate.Prescription(sql.FieldHasPrefix(FieldPrescriptionName, v))
}

// PrescriptionNameHasSuffix applies the HasSuffix predicate on the "prescription_name" field.
func PrescriptionNameHasSuffix(v string) predicate.Prescription {
	return predicate.Prescription(sql.FieldHasSuffix(FieldPrescriptionName, v))
}

// PrescriptionNameIsNil applies the IsNil predicate on the "prescription_name" field.
func PrescriptionNameIsNil() predicate.Prescription {
	return predicate.Prescription(sql.FieldIsNull(FieldPrescriptionName))
}

// PrescriptionNameNotNil applies the NotNil predicate on the "prescription_name" field.
func PrescriptionNameNotNil() predicate.Prescription {
	return predicate.Prescription(sql.FieldNotNull(FieldPrescriptionName))
}

// PrescriptionNameEqualFold applies the EqualFold predicate on the "prescription_name" field.
func PrescriptionNameEqualFold(v string) predicate.Prescription {
	return predicate.Prescription(sql.FieldEqualFold(FieldPrescriptionName, v))
}

// PrescriptionNameContainsFold applies the ContainsFold predicate on the "prescription_name" field.
func PrescriptionNameContainsFold(v string) predicate.Prescription {
	return predicate.Prescription(sql.FieldContainsFold(FieldPrescriptionName, v))
}

// HospitalNameEQ applies the EQ predicate on the "hospital_name" field.
func HospitalNameEQ(v string) predicate.Prescription {
	return predicate.Prescription(sql.FieldEQ(FieldHospitalName, v))
}

// HospitalNameNEQ applies the NEQ predicate on the "hospital_name" field.
func HospitalNameNEQ(v string) predicate.Prescription {
	return predicate.Prescription(sql.FieldNEQ(FieldHospitalName, v))
}

// HospitalNameIn applies the In predicate on the "hospital_name" field.
func HospitalNameIn(vs ...string) predicate.Prescription {
	return predicate.Prescription(sql.FieldIn(FieldHospitalName, vs...))
}

// HospitalNameNotIn applies the NotIn predicate on the "hospital_name" field.
func HospitalNameNotIn(vs ...string) predicate.Prescription {
	return predicate.Prescription(sql.FieldNotIn(FieldHospitalName, vs...))
}

// HospitalNameGT applies the GT predicate on the "hospital_name" field.
func HospitalNameGT(v string) predicate.Prescription {
	return predicate.Prescription(sql.FieldGT(FieldHospitalName, v))
}

// HospitalNameGTE applies the GTE predicate on the "hospital_name" field.
func HospitalNameGTE(v string) predicate.Prescription {
	return predicate.Prescription(sql.FieldGTE(FieldHospitalName, v))
}

// HospitalNameLT applies the LT predicate on the "hospital_name" field.
func HospitalNameLT(v string) predicate.Prescription {
	return predicate.Prescription(sql.FieldLT(FieldHospitalName, v))
}

// HospitalNameLTE applies the LTE predicate on the "hospital_name" field.
func HospitalNameLTE(v string) predicate.Prescription {
	return predicate.Prescription(sql.FieldLTE(FieldHospitalName, v))
}

// HospitalNameContains applies the Contains predicate on the "hospital_name" field.
func HospitalNameContains(v string) predicate.Prescription {
	return predicate.Prescription(sql.FieldContains(FieldHospitalName, v))
}

// HospitalNameHasPrefix applies the HasPrefix predicate on the "hospital_name" field.
func HospitalNameHasPrefix(v string) predicate.Prescription {
	return predicate.Prescription(sql.FieldHasPrefix(FieldHospitalName, v))
}

// HospitalNameHasSuffix applies the HasSuffix predicate on the "hospital_name" field.
func HospitalNameHasSuffix(v string) predicate.Prescription {
	return predicate.Prescription(sql.FieldHasSuffix(FieldHospitalName, v))
}

// HospitalNameIsNil applies the IsNil predicate on the "hospital_name" field.
func HospitalNameIsNil() predicate.Prescription {
	return predicate.Prescription(sql.FieldIsNull(FieldHospitalName))
}

// HospitalNameNotNil applies the NotNil predicate on the "hospital_name" field.
func HospitalNameNotNil() predicate.Prescription {
	return predicate.Prescription(sql.FieldNotNull(FieldHospitalName))
}

// HospitalNameEqualFold applies the EqualFold predicate on the "hospital_name" field.
func HospitalNameEqualFold(v string) predicate.Prescription {
	return predicate.Prescription(sql.FieldEqualFold(FieldHospitalName, v))
}

// HospitalNameContainsFold applies the ContainsFold predicate on the "hospital_name" field.
func HospitalNameContainsFold(v string) predicate.Prescription {
	return predicate.Prescription(sql.FieldContainsFold(FieldHospitalName, v))
}

// TakeDaysEQ applies the EQ predicate on the "take_days" field.
func TakeDaysEQ(v int) predicate.Prescription {
	return predicate.Prescription(sql.FieldEQ(FieldTakeDays, v))
}

// TakeDaysNEQ applies the NEQ predicate on the "take_days" field.
func TakeDaysNEQ(v int) predicate.Prescription {
	return predicate.Prescription(sql.FieldNEQ(FieldTakeDays, v))
}

// TakeDaysIn applies the In predicate on the "take_days" field.
func TakeDaysIn(vs ...int) predicate.Prescription {
	return predicate.Prescription(sql.FieldIn(FieldTakeDays, vs...))
}

// TakeDaysNotIn applies the NotIn predicate on the "take_days" field.
func TakeDaysNotIn(vs ...int) predicate.Prescription {
	return predicate.Prescription(sql.FieldNotIn(FieldTakeDays, vs...))
}

// TakeDaysGT applies the GT predicate on the "take_days" field.
func TakeDaysGT(v int) predicate.Prescription {
	return predicate.Prescription(sql.FieldGT(FieldTakeDays, v))
}

// TakeDaysGTE applies the GTE predicate on the "take_days" field.
func TakeDaysGTE(v int) predicate.Prescription {
	return predicate.Prescription(sql.FieldGTE(FieldTakeDays, v))
}

// TakeDaysLT applies the LT predicate on the "take_days" field.
func TakeDaysLT(v int) predicate.Prescription {
	return predicate.Prescription(sql.FieldLT(FieldTakeDays, v))
}

// TakeDaysLTE applies the LTE predicate on the "take_days" field.
func TakeDaysLTE(v int) predicate.Prescription {
	return predicate.Prescription(sql.FieldLTE(FieldTakeDays, v))
}

// StartedAtEQ applies the EQ predicate on the "started_at" field.
func StartedAtEQ(v time.Time) predicate.Prescription {
	return predicate.Prescription(sql.FieldEQ(FieldStartedAt, v))
}

// StartedAtNEQ applies the NEQ predicate on the "started_at" field.
func StartedAtNEQ(v time.Time) predicate.Prescription {
	return predicate.Prescription(sql.FieldNEQ(FieldStartedAt, v))
}

// StartedAtIn applies the In predicate on the "started_at" field.
func StartedAtIn(vs ...time.Time) predicate.Prescription {
	return predicate.Prescription(sql.FieldIn(FieldStartedAt, vs...))
}

// StartedAtNotIn applies the NotIn predicate on the "started_at" field.
func StartedAtNotIn(vs ...time.Time) predicate.Prescription {
	return predicate.Prescription(sql.FieldNotIn(FieldStartedAt, vs...))
}

// StartedAtGT applies the GT predicate on the "started_at" field.
func StartedAtGT(v time.Time) predicate.Prescription {
	return predicate.Prescription(sql.FieldGT(FieldStartedAt, v))
}

// StartedAtGTE applies the GTE predicate on the "started_at" field.
func StartedAtGTE(v time.Time) predicate.Prescription {
	return predicate.Prescription(sql.FieldGTE(FieldStartedAt, v))
}

// StartedAtLT applies the LT predicate on the "started_at" field.
func StartedAtLT(v time.Time) predicate.Prescription {
	return predicate.Prescription(sql.FieldLT(FieldStartedAt, v))
}

// StartedAtLTE applies the LTE predicate on the "started_at" field.
func StartedAtLTE(v time.Time) predicate.Prescription {
	return predicate.Prescription(sql.FieldLTE(FieldStartedAt, v))
}

// StartedAtIsNil applies the IsNil predicate on the "started_at" field.
func StartedAtIsNil() predicate.Prescription {
	return predicate.Prescription(sql.FieldIsNull(FieldStartedAt))
}

// StartedAtNotNil applies the NotNil predicate on the "started_at" field.
func StartedAtNotNil() predicate.Prescription {
	return predicate.Prescription(sql.FieldNotNull(FieldStartedAt))
}

// FinishedAtEQ applies the EQ predicate on the "finished_at" field.
func FinishedAtEQ(v time.Time) predicate.Prescription {
	return predicate.Prescription(sql.FieldEQ(FieldFinishedAt, v))
}

// FinishedAtNEQ applies the NEQ predicate on the "finished_at" field.
func FinishedAtNEQ(v time.Time) predicate.Prescription {
	return predicate.Prescription(sql.FieldNEQ(FieldFinishedAt, v))
}

// FinishedAtIn applies the In predicate on the "finished_at" field.
func FinishedAtIn(vs ...time.Time) predicate.Prescription {
	return predicate.Prescription(sql.FieldIn(FieldFinishedAt, vs...))
}

// FinishedAtNotIn applies the NotIn predicate on the "finished_at" field.
func FinishedAtNotIn(vs ...time.Time) predicate.Prescription {
	return predicate.Prescription(sql.FieldNotIn(FieldFinishedAt, vs...))
}

// FinishedAtGT applies the GT predicate on the "finished_at" field.
func FinishedAtGT(v time.Time) predicate.Prescription {
	return predicate.Prescription(sql.FieldGT(FieldFinishedAt, v))
}

// FinishedAtGTE applies the GTE predicate on the "finished_at" field.
func FinishedAtGTE(v time.Time) predicate.Prescription {
	return predicate.Prescription(sql.FieldGTE(FieldFinishedAt, v))
}

// FinishedAtLT applies the LT predicate on the "finished_at" field.
func FinishedAtLT(v time.Time) predicate.Prescription {
	return predicate.Prescription(sql.FieldLT(FieldFinishedAt, v))
}

// FinishedAtLTE applies the LTE predicate on the "finished_at" field.
func FinishedAtLTE(v time.Time) predicate.Prescription {
	return predicate.Prescription(sql.FieldLTE(FieldFinishedAt, v))
}

// FinishedAtIsNil applies the IsNil predicate on the "finished_at" field.
func FinishedAtIsNil() predicate.Prescription {
	return predicate.Prescription(sql.FieldIsNull(FieldFinishedAt))
}

// FinishedAtNotNil applies the NotNil predicate on the "finished_at" field.
func FinishedAtNotNil() predicate.Prescription {
	return predicate.Prescription(sql.FieldNotNull(FieldFinishedAt))
}

// MemoEQ applies the EQ predicate on the "memo" field.
func MemoEQ(v string) predicate.Prescription {
	return predicate.Prescription(sql.FieldEQ(FieldMemo, v))
}

// MemoNEQ applies the NEQ predicate on the "memo" field.
func MemoNEQ(v string) predicate.Prescription {
	return predicate.Prescription(sql.FieldNEQ(FieldMemo, v))
}

// MemoIn applies the In predicate on the "memo" field.
func MemoIn(vs ...string) predicate.Prescription {
	return predicate.Prescription(sql.FieldIn(FieldMemo, vs...))
}

// MemoNotIn applies the NotIn predicate on the "memo" field.
func MemoNotIn(vs ...string) predicate.Prescription {
	return predicate.Prescription(sql.FieldNotIn(FieldMemo, vs...))
}

// MemoGT applies the GT predicate on the "memo" field.
func MemoGT(v string) predicate.Prescription {
	return predicate.Prescription(sql.FieldGT(FieldMemo, v))
}

// MemoGTE applies the GTE predicate on the "memo" field.
func MemoGTE(v string) predicate.Prescription {
	return predicate.Prescription(sql.FieldGTE(FieldMemo, v))
}

// MemoLT applies the LT predicate on the "memo" field.
func MemoLT(v string) predicate.Prescription {
	return predicate.Prescription(sql.FieldLT(FieldMemo, v))
}

// MemoLTE applies the LTE predicate on the "memo" field.
func MemoLTE(v string) predicate.Prescription {
	return predicate.Prescription(sql.FieldLTE(FieldMemo, v))
}

// MemoContains applies the Contains predicate on the "memo" field.
func MemoContains(v string) predicate.Prescription {
	return predicate.Prescription(sql.FieldContains(FieldMemo, v))
}

// MemoHasPrefix applies the HasPrefix predicate on the "memo" field.
func MemoHasPrefix(v string) predicate.Prescription {
	return predicate.Prescription(sql.FieldHasPrefix(FieldMemo, v))
}

// MemoHasSuffix applies the HasSuffix predicate on the "memo" field.
func MemoHasSuffix(v string) predicate.Prescription {
	return predicate.Prescription(sql.FieldHasSuffix(FieldMemo, v))
}

// MemoIsNil applies the IsNil predicate on the "memo" field.
func MemoIsNil() predicate.Prescription {
	return predicate.Prescription(sql.FieldIsNull(FieldMemo))
}

// MemoNotNil applies the NotNil predicate on the "memo" field.
func MemoNotNil() predicate.Prescription {
	return predicate.Prescription(sql.FieldNotNull(FieldMemo))
}

// MemoEqualFold applies the EqualFold predicate on the "memo" field.
func MemoEqualFold(v string) predicate.Prescription {
	return predicate.Prescription(sql.FieldEqualFold(FieldMemo, v))
}

// MemoContainsFold applies the ContainsFold predicate on the "memo" field.
func MemoContainsFold(v string) predicate.Prescription {
	return predicate.Prescription(sql.FieldContainsFold(FieldMemo, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Prescription {
	return predicate.Prescription(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Prescription {
	return predicate.Prescription(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Prescription {
	return predicate.Prescription(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Prescription {
	return predicate.Prescription(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Prescription {
	return predicate.Prescription(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Prescription {
	return predicate.Prescription(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Prescription {
	return predicate.Prescription(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Prescription {
	return predicate.Prescription(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Prescription {
	return predicate.Prescription(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Prescription {
	return predicate.Prescription(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Prescription {
	return predicate.Prescription(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Prescription {
	return predicate.Prescription(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Prescription {
	return predicate.Prescription(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Prescription {
	return predicate.Prescription(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Prescription {
	return predicate.Prescription(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Prescription {
	return predicate.Prescription(sql.FieldLTE(FieldUpdatedAt, v))
}

// UpdatedAtIsNil applies the IsNil predicate on the "updated_at" field.
func UpdatedAtIsNil() predicate.Prescription {
	return predicate.Prescription(sql.FieldIsNull(FieldUpdatedAt))
}

// UpdatedAtNotNil applies the NotNil predicate on the "updated_at" field.
func UpdatedAtNotNil() predicate.Prescription {
	return predicate.Prescription(sql.FieldNotNull(FieldUpdatedAt))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Prescription) predicate.Prescription {
	return predicate.Prescription(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Prescription) predicate.Prescription {
	return predicate.Prescription(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Prescription) predicate.Prescription {
	return predicate.Prescription(sql.NotPredicates(p))
}
