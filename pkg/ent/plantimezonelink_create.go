// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"nursing_api/pkg/ent/plantimezonelink"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// PlanTimeZoneLinkCreate is the builder for creating a PlanTimeZoneLink entity.
type PlanTimeZoneLinkCreate struct {
	config
	mutation *PlanTimeZoneLinkMutation
	hooks    []Hook
}

// SetPrescriptionID sets the "prescription_id" field.
func (ptzlc *PlanTimeZoneLinkCreate) SetPrescriptionID(u uuid.UUID) *PlanTimeZoneLinkCreate {
	ptzlc.mutation.SetPrescriptionID(u)
	return ptzlc
}

// SetTimezoneID sets the "timezone_id" field.
func (ptzlc *PlanTimeZoneLinkCreate) SetTimezoneID(u uuid.UUID) *PlanTimeZoneLinkCreate {
	ptzlc.mutation.SetTimezoneID(u)
	return ptzlc
}

// SetTimezoneName sets the "timezone_name" field.
func (ptzlc *PlanTimeZoneLinkCreate) SetTimezoneName(s string) *PlanTimeZoneLinkCreate {
	ptzlc.mutation.SetTimezoneName(s)
	return ptzlc
}

// SetNillableTimezoneName sets the "timezone_name" field if the given value is not nil.
func (ptzlc *PlanTimeZoneLinkCreate) SetNillableTimezoneName(s *string) *PlanTimeZoneLinkCreate {
	if s != nil {
		ptzlc.SetTimezoneName(*s)
	}
	return ptzlc
}

// SetUseAlert sets the "use_alert" field.
func (ptzlc *PlanTimeZoneLinkCreate) SetUseAlert(b bool) *PlanTimeZoneLinkCreate {
	ptzlc.mutation.SetUseAlert(b)
	return ptzlc
}

// SetNillableUseAlert sets the "use_alert" field if the given value is not nil.
func (ptzlc *PlanTimeZoneLinkCreate) SetNillableUseAlert(b *bool) *PlanTimeZoneLinkCreate {
	if b != nil {
		ptzlc.SetUseAlert(*b)
	}
	return ptzlc
}

// SetMidday sets the "midday" field.
func (ptzlc *PlanTimeZoneLinkCreate) SetMidday(s string) *PlanTimeZoneLinkCreate {
	ptzlc.mutation.SetMidday(s)
	return ptzlc
}

// SetHour sets the "hour" field.
func (ptzlc *PlanTimeZoneLinkCreate) SetHour(s string) *PlanTimeZoneLinkCreate {
	ptzlc.mutation.SetHour(s)
	return ptzlc
}

// SetMinute sets the "minute" field.
func (ptzlc *PlanTimeZoneLinkCreate) SetMinute(s string) *PlanTimeZoneLinkCreate {
	ptzlc.mutation.SetMinute(s)
	return ptzlc
}

// SetCreatedAt sets the "created_at" field.
func (ptzlc *PlanTimeZoneLinkCreate) SetCreatedAt(t time.Time) *PlanTimeZoneLinkCreate {
	ptzlc.mutation.SetCreatedAt(t)
	return ptzlc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ptzlc *PlanTimeZoneLinkCreate) SetNillableCreatedAt(t *time.Time) *PlanTimeZoneLinkCreate {
	if t != nil {
		ptzlc.SetCreatedAt(*t)
	}
	return ptzlc
}

// SetUpdatedAt sets the "updated_at" field.
func (ptzlc *PlanTimeZoneLinkCreate) SetUpdatedAt(t time.Time) *PlanTimeZoneLinkCreate {
	ptzlc.mutation.SetUpdatedAt(t)
	return ptzlc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ptzlc *PlanTimeZoneLinkCreate) SetNillableUpdatedAt(t *time.Time) *PlanTimeZoneLinkCreate {
	if t != nil {
		ptzlc.SetUpdatedAt(*t)
	}
	return ptzlc
}

// SetID sets the "id" field.
func (ptzlc *PlanTimeZoneLinkCreate) SetID(u uuid.UUID) *PlanTimeZoneLinkCreate {
	ptzlc.mutation.SetID(u)
	return ptzlc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (ptzlc *PlanTimeZoneLinkCreate) SetNillableID(u *uuid.UUID) *PlanTimeZoneLinkCreate {
	if u != nil {
		ptzlc.SetID(*u)
	}
	return ptzlc
}

// Mutation returns the PlanTimeZoneLinkMutation object of the builder.
func (ptzlc *PlanTimeZoneLinkCreate) Mutation() *PlanTimeZoneLinkMutation {
	return ptzlc.mutation
}

// Save creates the PlanTimeZoneLink in the database.
func (ptzlc *PlanTimeZoneLinkCreate) Save(ctx context.Context) (*PlanTimeZoneLink, error) {
	ptzlc.defaults()
	return withHooks(ctx, ptzlc.sqlSave, ptzlc.mutation, ptzlc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ptzlc *PlanTimeZoneLinkCreate) SaveX(ctx context.Context) *PlanTimeZoneLink {
	v, err := ptzlc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ptzlc *PlanTimeZoneLinkCreate) Exec(ctx context.Context) error {
	_, err := ptzlc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ptzlc *PlanTimeZoneLinkCreate) ExecX(ctx context.Context) {
	if err := ptzlc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ptzlc *PlanTimeZoneLinkCreate) defaults() {
	if _, ok := ptzlc.mutation.UseAlert(); !ok {
		v := plantimezonelink.DefaultUseAlert
		ptzlc.mutation.SetUseAlert(v)
	}
	if _, ok := ptzlc.mutation.CreatedAt(); !ok {
		v := plantimezonelink.DefaultCreatedAt()
		ptzlc.mutation.SetCreatedAt(v)
	}
	if _, ok := ptzlc.mutation.ID(); !ok {
		v := plantimezonelink.DefaultID()
		ptzlc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ptzlc *PlanTimeZoneLinkCreate) check() error {
	if _, ok := ptzlc.mutation.PrescriptionID(); !ok {
		return &ValidationError{Name: "prescription_id", err: errors.New(`ent: missing required field "PlanTimeZoneLink.prescription_id"`)}
	}
	if _, ok := ptzlc.mutation.TimezoneID(); !ok {
		return &ValidationError{Name: "timezone_id", err: errors.New(`ent: missing required field "PlanTimeZoneLink.timezone_id"`)}
	}
	if _, ok := ptzlc.mutation.UseAlert(); !ok {
		return &ValidationError{Name: "use_alert", err: errors.New(`ent: missing required field "PlanTimeZoneLink.use_alert"`)}
	}
	if _, ok := ptzlc.mutation.Midday(); !ok {
		return &ValidationError{Name: "midday", err: errors.New(`ent: missing required field "PlanTimeZoneLink.midday"`)}
	}
	if _, ok := ptzlc.mutation.Hour(); !ok {
		return &ValidationError{Name: "hour", err: errors.New(`ent: missing required field "PlanTimeZoneLink.hour"`)}
	}
	if _, ok := ptzlc.mutation.Minute(); !ok {
		return &ValidationError{Name: "minute", err: errors.New(`ent: missing required field "PlanTimeZoneLink.minute"`)}
	}
	if _, ok := ptzlc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "PlanTimeZoneLink.created_at"`)}
	}
	return nil
}

func (ptzlc *PlanTimeZoneLinkCreate) sqlSave(ctx context.Context) (*PlanTimeZoneLink, error) {
	if err := ptzlc.check(); err != nil {
		return nil, err
	}
	_node, _spec := ptzlc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ptzlc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	ptzlc.mutation.id = &_node.ID
	ptzlc.mutation.done = true
	return _node, nil
}

func (ptzlc *PlanTimeZoneLinkCreate) createSpec() (*PlanTimeZoneLink, *sqlgraph.CreateSpec) {
	var (
		_node = &PlanTimeZoneLink{config: ptzlc.config}
		_spec = sqlgraph.NewCreateSpec(plantimezonelink.Table, sqlgraph.NewFieldSpec(plantimezonelink.FieldID, field.TypeUUID))
	)
	if id, ok := ptzlc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := ptzlc.mutation.PrescriptionID(); ok {
		_spec.SetField(plantimezonelink.FieldPrescriptionID, field.TypeUUID, value)
		_node.PrescriptionID = value
	}
	if value, ok := ptzlc.mutation.TimezoneID(); ok {
		_spec.SetField(plantimezonelink.FieldTimezoneID, field.TypeUUID, value)
		_node.TimezoneID = value
	}
	if value, ok := ptzlc.mutation.TimezoneName(); ok {
		_spec.SetField(plantimezonelink.FieldTimezoneName, field.TypeString, value)
		_node.TimezoneName = value
	}
	if value, ok := ptzlc.mutation.UseAlert(); ok {
		_spec.SetField(plantimezonelink.FieldUseAlert, field.TypeBool, value)
		_node.UseAlert = value
	}
	if value, ok := ptzlc.mutation.Midday(); ok {
		_spec.SetField(plantimezonelink.FieldMidday, field.TypeString, value)
		_node.Midday = value
	}
	if value, ok := ptzlc.mutation.Hour(); ok {
		_spec.SetField(plantimezonelink.FieldHour, field.TypeString, value)
		_node.Hour = value
	}
	if value, ok := ptzlc.mutation.Minute(); ok {
		_spec.SetField(plantimezonelink.FieldMinute, field.TypeString, value)
		_node.Minute = value
	}
	if value, ok := ptzlc.mutation.CreatedAt(); ok {
		_spec.SetField(plantimezonelink.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := ptzlc.mutation.UpdatedAt(); ok {
		_spec.SetField(plantimezonelink.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	return _node, _spec
}

// PlanTimeZoneLinkCreateBulk is the builder for creating many PlanTimeZoneLink entities in bulk.
type PlanTimeZoneLinkCreateBulk struct {
	config
	err      error
	builders []*PlanTimeZoneLinkCreate
}

// Save creates the PlanTimeZoneLink entities in the database.
func (ptzlcb *PlanTimeZoneLinkCreateBulk) Save(ctx context.Context) ([]*PlanTimeZoneLink, error) {
	if ptzlcb.err != nil {
		return nil, ptzlcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ptzlcb.builders))
	nodes := make([]*PlanTimeZoneLink, len(ptzlcb.builders))
	mutators := make([]Mutator, len(ptzlcb.builders))
	for i := range ptzlcb.builders {
		func(i int, root context.Context) {
			builder := ptzlcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PlanTimeZoneLinkMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ptzlcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ptzlcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ptzlcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ptzlcb *PlanTimeZoneLinkCreateBulk) SaveX(ctx context.Context) []*PlanTimeZoneLink {
	v, err := ptzlcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ptzlcb *PlanTimeZoneLinkCreateBulk) Exec(ctx context.Context) error {
	_, err := ptzlcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ptzlcb *PlanTimeZoneLinkCreateBulk) ExecX(ctx context.Context) {
	if err := ptzlcb.Exec(ctx); err != nil {
		panic(err)
	}
}
