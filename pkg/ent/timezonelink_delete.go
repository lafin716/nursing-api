// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"nursing_api/pkg/ent/predicate"
	"nursing_api/pkg/ent/timezonelink"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TimeZoneLinkDelete is the builder for deleting a TimeZoneLink entity.
type TimeZoneLinkDelete struct {
	config
	hooks    []Hook
	mutation *TimeZoneLinkMutation
}

// Where appends a list predicates to the TimeZoneLinkDelete builder.
func (tzld *TimeZoneLinkDelete) Where(ps ...predicate.TimeZoneLink) *TimeZoneLinkDelete {
	tzld.mutation.Where(ps...)
	return tzld
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (tzld *TimeZoneLinkDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, tzld.sqlExec, tzld.mutation, tzld.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (tzld *TimeZoneLinkDelete) ExecX(ctx context.Context) int {
	n, err := tzld.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (tzld *TimeZoneLinkDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(timezonelink.Table, sqlgraph.NewFieldSpec(timezonelink.FieldID, field.TypeUUID))
	if ps := tzld.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, tzld.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	tzld.mutation.done = true
	return affected, err
}

// TimeZoneLinkDeleteOne is the builder for deleting a single TimeZoneLink entity.
type TimeZoneLinkDeleteOne struct {
	tzld *TimeZoneLinkDelete
}

// Where appends a list predicates to the TimeZoneLinkDelete builder.
func (tzldo *TimeZoneLinkDeleteOne) Where(ps ...predicate.TimeZoneLink) *TimeZoneLinkDeleteOne {
	tzldo.tzld.mutation.Where(ps...)
	return tzldo
}

// Exec executes the deletion query.
func (tzldo *TimeZoneLinkDeleteOne) Exec(ctx context.Context) error {
	n, err := tzldo.tzld.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{timezonelink.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (tzldo *TimeZoneLinkDeleteOne) ExecX(ctx context.Context) {
	if err := tzldo.Exec(ctx); err != nil {
		panic(err)
	}
}
