// Code generated by ent, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// MedicinesColumns holds the columns for the "medicines" table.
	MedicinesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "medicine_name", Type: field.TypeString, SchemaType: map[string]string{"postgres": "varchar(50)"}},
		{Name: "item_seq", Type: field.TypeString, SchemaType: map[string]string{"postgres": "varchar(20)"}},
		{Name: "company_name", Type: field.TypeString, Nullable: true, SchemaType: map[string]string{"postgres": "varchar(30)"}},
		{Name: "description", Type: field.TypeString, Nullable: true, SchemaType: map[string]string{"postgres": "varchar(255)"}},
		{Name: "usage", Type: field.TypeString, Nullable: true, SchemaType: map[string]string{"postgres": "text"}},
		{Name: "effect", Type: field.TypeString, Nullable: true, SchemaType: map[string]string{"postgres": "text"}},
		{Name: "side_effect", Type: field.TypeString, Nullable: true, SchemaType: map[string]string{"postgres": "text"}},
		{Name: "caution", Type: field.TypeString, Nullable: true, SchemaType: map[string]string{"postgres": "text"}},
		{Name: "warning", Type: field.TypeString, Nullable: true, SchemaType: map[string]string{"postgres": "text"}},
		{Name: "interaction", Type: field.TypeString, Nullable: true, SchemaType: map[string]string{"postgres": "text"}},
		{Name: "keep_method", Type: field.TypeString, Nullable: true, SchemaType: map[string]string{"postgres": "text"}},
		{Name: "appearance", Type: field.TypeString, Nullable: true, SchemaType: map[string]string{"postgres": "varchar(20)"}},
		{Name: "color_class1", Type: field.TypeString, Nullable: true, SchemaType: map[string]string{"postgres": "varchar(20)"}},
		{Name: "color_class2", Type: field.TypeString, Nullable: true, SchemaType: map[string]string{"postgres": "varchar(20)"}},
		{Name: "pill_image", Type: field.TypeString, Nullable: true, SchemaType: map[string]string{"postgres": "varchar(255)"}},
		{Name: "class_name", Type: field.TypeString, Nullable: true, SchemaType: map[string]string{"postgres": "varchar(255)"}},
		{Name: "otc_name", Type: field.TypeString, Nullable: true, SchemaType: map[string]string{"postgres": "varchar(255)"}},
		{Name: "form_code_name", Type: field.TypeString, Nullable: true, SchemaType: map[string]string{"postgres": "varchar(255)"}},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime, Nullable: true},
	}
	// MedicinesTable holds the schema information for the "medicines" table.
	MedicinesTable = &schema.Table{
		Name:       "medicines",
		Columns:    MedicinesColumns,
		PrimaryKey: []*schema.Column{MedicinesColumns[0]},
	}
	// PrescriptionsColumns holds the columns for the "prescriptions" table.
	PrescriptionsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "user_id", Type: field.TypeUUID},
		{Name: "prescription_name", Type: field.TypeString, Nullable: true, SchemaType: map[string]string{"postgres": "varchar(30)"}},
		{Name: "hospital_name", Type: field.TypeString, Nullable: true, SchemaType: map[string]string{"postgres": "varchar(50)"}},
		{Name: "take_days", Type: field.TypeInt, Default: 0},
		{Name: "started_at", Type: field.TypeTime, Nullable: true, SchemaType: map[string]string{"postgres": "date"}},
		{Name: "finished_at", Type: field.TypeTime, Nullable: true, SchemaType: map[string]string{"postgres": "date"}},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime, Nullable: true},
	}
	// PrescriptionsTable holds the schema information for the "prescriptions" table.
	PrescriptionsTable = &schema.Table{
		Name:       "prescriptions",
		Columns:    PrescriptionsColumns,
		PrimaryKey: []*schema.Column{PrescriptionsColumns[0]},
	}
	// PrescriptionItemsColumns holds the columns for the "prescription_items" table.
	PrescriptionItemsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "user_id", Type: field.TypeUUID},
		{Name: "timezone_id", Type: field.TypeUUID},
		{Name: "medicine_id", Type: field.TypeUUID},
		{Name: "medicine_name", Type: field.TypeString, SchemaType: map[string]string{"postgres": "varchar(50)"}},
		{Name: "timezone_name", Type: field.TypeString, Nullable: true, SchemaType: map[string]string{"postgres": "varchar(50)"}},
		{Name: "midday", Type: field.TypeString, SchemaType: map[string]string{"postgres": "varchar(2)"}},
		{Name: "hour", Type: field.TypeString, SchemaType: map[string]string{"postgres": "varchar(2)"}},
		{Name: "minute", Type: field.TypeString, SchemaType: map[string]string{"postgres": "varchar(2)"}},
		{Name: "total_amount", Type: field.TypeFloat64, Default: 0},
		{Name: "remain_amount", Type: field.TypeFloat64, Default: 0},
		{Name: "take_amount", Type: field.TypeFloat64, Default: 0},
		{Name: "medicine_unit", Type: field.TypeString, Nullable: true, Default: "ê°œ", SchemaType: map[string]string{"postgres": "varchar(3)"}},
		{Name: "memo", Type: field.TypeString, Nullable: true, SchemaType: map[string]string{"postgres": "text"}},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime, Nullable: true},
		{Name: "prescription_id", Type: field.TypeUUID},
	}
	// PrescriptionItemsTable holds the schema information for the "prescription_items" table.
	PrescriptionItemsTable = &schema.Table{
		Name:       "prescription_items",
		Columns:    PrescriptionItemsColumns,
		PrimaryKey: []*schema.Column{PrescriptionItemsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "prescription_items_prescriptions_prescription_items",
				Columns:    []*schema.Column{PrescriptionItemsColumns[16]},
				RefColumns: []*schema.Column{PrescriptionsColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// TakeHistoryItemsColumns holds the columns for the "take_history_items" table.
	TakeHistoryItemsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "user_id", Type: field.TypeUUID},
		{Name: "prescription_id", Type: field.TypeUUID, Nullable: true},
		{Name: "timezone_id", Type: field.TypeUUID, Nullable: true},
		{Name: "medicine_id", Type: field.TypeUUID, Nullable: true},
		{Name: "medicine_name", Type: field.TypeString, SchemaType: map[string]string{"postgres": "varchar(50)"}},
		{Name: "timezone_name", Type: field.TypeString, Nullable: true, SchemaType: map[string]string{"postgres": "varchar(50)"}},
		{Name: "midday", Type: field.TypeString, SchemaType: map[string]string{"postgres": "varchar(2)"}},
		{Name: "hour", Type: field.TypeString, SchemaType: map[string]string{"postgres": "varchar(2)"}},
		{Name: "minute", Type: field.TypeString, SchemaType: map[string]string{"postgres": "varchar(2)"}},
		{Name: "take_status", Type: field.TypeBool, Default: false},
		{Name: "total_amount", Type: field.TypeFloat64, Default: 0},
		{Name: "remain_amount", Type: field.TypeFloat64, Default: 0},
		{Name: "take_amount", Type: field.TypeFloat64, Default: 0},
		{Name: "take_unit", Type: field.TypeString, SchemaType: map[string]string{"postgres": "varchar(2)"}},
		{Name: "take_date", Type: field.TypeString, SchemaType: map[string]string{"postgres": "varchar(10)"}},
		{Name: "take_time", Type: field.TypeString, SchemaType: map[string]string{"postgres": "varchar(8)"}},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime, Nullable: true},
		{Name: "prescription_item_id", Type: field.TypeUUID, Nullable: true},
	}
	// TakeHistoryItemsTable holds the schema information for the "take_history_items" table.
	TakeHistoryItemsTable = &schema.Table{
		Name:       "take_history_items",
		Columns:    TakeHistoryItemsColumns,
		PrimaryKey: []*schema.Column{TakeHistoryItemsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "take_history_items_prescription_items_take_history_item",
				Columns:    []*schema.Column{TakeHistoryItemsColumns[19]},
				RefColumns: []*schema.Column{PrescriptionItemsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "takehistoryitem_take_date_prescription_item_id",
				Unique:  false,
				Columns: []*schema.Column{TakeHistoryItemsColumns[15], TakeHistoryItemsColumns[19]},
			},
		},
	}
	// TakeHistoryMemosColumns holds the columns for the "take_history_memos" table.
	TakeHistoryMemosColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "user_id", Type: field.TypeUUID},
		{Name: "timezone_id", Type: field.TypeUUID},
		{Name: "take_date", Type: field.TypeString, SchemaType: map[string]string{"postgres": "varchar(10)"}},
		{Name: "memo", Type: field.TypeString, Nullable: true, SchemaType: map[string]string{"postgres": "text"}},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime, Nullable: true},
	}
	// TakeHistoryMemosTable holds the schema information for the "take_history_memos" table.
	TakeHistoryMemosTable = &schema.Table{
		Name:       "take_history_memos",
		Columns:    TakeHistoryMemosColumns,
		PrimaryKey: []*schema.Column{TakeHistoryMemosColumns[0]},
	}
	// TimeZonesColumns holds the columns for the "time_zones" table.
	TimeZonesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "user_id", Type: field.TypeUUID},
		{Name: "timezone_name", Type: field.TypeString, Nullable: true, SchemaType: map[string]string{"postgres": "varchar(50)"}},
		{Name: "is_default", Type: field.TypeBool, Default: false},
		{Name: "midday", Type: field.TypeString, SchemaType: map[string]string{"postgres": "varchar(2)"}},
		{Name: "hour", Type: field.TypeString, SchemaType: map[string]string{"postgres": "varchar(2)"}},
		{Name: "minute", Type: field.TypeString, SchemaType: map[string]string{"postgres": "varchar(2)"}},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime, Nullable: true},
	}
	// TimeZonesTable holds the schema information for the "time_zones" table.
	TimeZonesTable = &schema.Table{
		Name:       "time_zones",
		Columns:    TimeZonesColumns,
		PrimaryKey: []*schema.Column{TimeZonesColumns[0]},
	}
	// TokensColumns holds the columns for the "tokens" table.
	TokensColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "user_id", Type: field.TypeUUID},
		{Name: "access_token", Type: field.TypeString, SchemaType: map[string]string{"postgres": "text"}},
		{Name: "refresh_token", Type: field.TypeString, SchemaType: map[string]string{"postgres": "text"}},
		{Name: "access_token_expires", Type: field.TypeTime},
		{Name: "refresh_token_expires", Type: field.TypeTime},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime, Nullable: true},
	}
	// TokensTable holds the schema information for the "tokens" table.
	TokensTable = &schema.Table{
		Name:       "tokens",
		Columns:    TokensColumns,
		PrimaryKey: []*schema.Column{TokensColumns[0]},
	}
	// UsersColumns holds the columns for the "users" table.
	UsersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "user_name", Type: field.TypeString, Nullable: true, SchemaType: map[string]string{"postgres": "varchar(50)"}},
		{Name: "user_email", Type: field.TypeString, SchemaType: map[string]string{"postgres": "varchar(100)"}},
		{Name: "user_password", Type: field.TypeString, SchemaType: map[string]string{"postgres": "varchar(255)"}},
		{Name: "user_status", Type: field.TypeString, Default: "INACTIVE", SchemaType: map[string]string{"postgres": "varchar(20)"}},
		{Name: "user_type", Type: field.TypeString, Default: "EMAIL", SchemaType: map[string]string{"postgres": "varchar(20)"}},
		{Name: "fail_count", Type: field.TypeInt, Default: 0},
		{Name: "last_signed_in", Type: field.TypeTime, Nullable: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime, Nullable: true},
	}
	// UsersTable holds the schema information for the "users" table.
	UsersTable = &schema.Table{
		Name:       "users",
		Columns:    UsersColumns,
		PrimaryKey: []*schema.Column{UsersColumns[0]},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		MedicinesTable,
		PrescriptionsTable,
		PrescriptionItemsTable,
		TakeHistoryItemsTable,
		TakeHistoryMemosTable,
		TimeZonesTable,
		TokensTable,
		UsersTable,
	}
)

func init() {
	PrescriptionItemsTable.ForeignKeys[0].RefTable = PrescriptionsTable
	TakeHistoryItemsTable.ForeignKeys[0].RefTable = PrescriptionItemsTable
}
