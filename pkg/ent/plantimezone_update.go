// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"nursing_api/pkg/ent/plantimezone"
	"nursing_api/pkg/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// PlanTimeZoneUpdate is the builder for updating PlanTimeZone entities.
type PlanTimeZoneUpdate struct {
	config
	hooks    []Hook
	mutation *PlanTimeZoneMutation
}

// Where appends a list predicates to the PlanTimeZoneUpdate builder.
func (ptzu *PlanTimeZoneUpdate) Where(ps ...predicate.PlanTimeZone) *PlanTimeZoneUpdate {
	ptzu.mutation.Where(ps...)
	return ptzu
}

// SetUserID sets the "user_id" field.
func (ptzu *PlanTimeZoneUpdate) SetUserID(u uuid.UUID) *PlanTimeZoneUpdate {
	ptzu.mutation.SetUserID(u)
	return ptzu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (ptzu *PlanTimeZoneUpdate) SetNillableUserID(u *uuid.UUID) *PlanTimeZoneUpdate {
	if u != nil {
		ptzu.SetUserID(*u)
	}
	return ptzu
}

// SetTimezoneName sets the "timezone_name" field.
func (ptzu *PlanTimeZoneUpdate) SetTimezoneName(s string) *PlanTimeZoneUpdate {
	ptzu.mutation.SetTimezoneName(s)
	return ptzu
}

// SetNillableTimezoneName sets the "timezone_name" field if the given value is not nil.
func (ptzu *PlanTimeZoneUpdate) SetNillableTimezoneName(s *string) *PlanTimeZoneUpdate {
	if s != nil {
		ptzu.SetTimezoneName(*s)
	}
	return ptzu
}

// ClearTimezoneName clears the value of the "timezone_name" field.
func (ptzu *PlanTimeZoneUpdate) ClearTimezoneName() *PlanTimeZoneUpdate {
	ptzu.mutation.ClearTimezoneName()
	return ptzu
}

// SetIsDefault sets the "is_default" field.
func (ptzu *PlanTimeZoneUpdate) SetIsDefault(b bool) *PlanTimeZoneUpdate {
	ptzu.mutation.SetIsDefault(b)
	return ptzu
}

// SetNillableIsDefault sets the "is_default" field if the given value is not nil.
func (ptzu *PlanTimeZoneUpdate) SetNillableIsDefault(b *bool) *PlanTimeZoneUpdate {
	if b != nil {
		ptzu.SetIsDefault(*b)
	}
	return ptzu
}

// SetUseAlert sets the "use_alert" field.
func (ptzu *PlanTimeZoneUpdate) SetUseAlert(b bool) *PlanTimeZoneUpdate {
	ptzu.mutation.SetUseAlert(b)
	return ptzu
}

// SetNillableUseAlert sets the "use_alert" field if the given value is not nil.
func (ptzu *PlanTimeZoneUpdate) SetNillableUseAlert(b *bool) *PlanTimeZoneUpdate {
	if b != nil {
		ptzu.SetUseAlert(*b)
	}
	return ptzu
}

// SetScheduledAt sets the "scheduled_at" field.
func (ptzu *PlanTimeZoneUpdate) SetScheduledAt(t time.Time) *PlanTimeZoneUpdate {
	ptzu.mutation.SetScheduledAt(t)
	return ptzu
}

// SetNillableScheduledAt sets the "scheduled_at" field if the given value is not nil.
func (ptzu *PlanTimeZoneUpdate) SetNillableScheduledAt(t *time.Time) *PlanTimeZoneUpdate {
	if t != nil {
		ptzu.SetScheduledAt(*t)
	}
	return ptzu
}

// ClearScheduledAt clears the value of the "scheduled_at" field.
func (ptzu *PlanTimeZoneUpdate) ClearScheduledAt() *PlanTimeZoneUpdate {
	ptzu.mutation.ClearScheduledAt()
	return ptzu
}

// SetCreatedAt sets the "created_at" field.
func (ptzu *PlanTimeZoneUpdate) SetCreatedAt(t time.Time) *PlanTimeZoneUpdate {
	ptzu.mutation.SetCreatedAt(t)
	return ptzu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ptzu *PlanTimeZoneUpdate) SetNillableCreatedAt(t *time.Time) *PlanTimeZoneUpdate {
	if t != nil {
		ptzu.SetCreatedAt(*t)
	}
	return ptzu
}

// SetUpdatedAt sets the "updated_at" field.
func (ptzu *PlanTimeZoneUpdate) SetUpdatedAt(t time.Time) *PlanTimeZoneUpdate {
	ptzu.mutation.SetUpdatedAt(t)
	return ptzu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ptzu *PlanTimeZoneUpdate) SetNillableUpdatedAt(t *time.Time) *PlanTimeZoneUpdate {
	if t != nil {
		ptzu.SetUpdatedAt(*t)
	}
	return ptzu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (ptzu *PlanTimeZoneUpdate) ClearUpdatedAt() *PlanTimeZoneUpdate {
	ptzu.mutation.ClearUpdatedAt()
	return ptzu
}

// Mutation returns the PlanTimeZoneMutation object of the builder.
func (ptzu *PlanTimeZoneUpdate) Mutation() *PlanTimeZoneMutation {
	return ptzu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ptzu *PlanTimeZoneUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ptzu.sqlSave, ptzu.mutation, ptzu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ptzu *PlanTimeZoneUpdate) SaveX(ctx context.Context) int {
	affected, err := ptzu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ptzu *PlanTimeZoneUpdate) Exec(ctx context.Context) error {
	_, err := ptzu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ptzu *PlanTimeZoneUpdate) ExecX(ctx context.Context) {
	if err := ptzu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ptzu *PlanTimeZoneUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(plantimezone.Table, plantimezone.Columns, sqlgraph.NewFieldSpec(plantimezone.FieldID, field.TypeUUID))
	if ps := ptzu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ptzu.mutation.UserID(); ok {
		_spec.SetField(plantimezone.FieldUserID, field.TypeUUID, value)
	}
	if value, ok := ptzu.mutation.TimezoneName(); ok {
		_spec.SetField(plantimezone.FieldTimezoneName, field.TypeString, value)
	}
	if ptzu.mutation.TimezoneNameCleared() {
		_spec.ClearField(plantimezone.FieldTimezoneName, field.TypeString)
	}
	if value, ok := ptzu.mutation.IsDefault(); ok {
		_spec.SetField(plantimezone.FieldIsDefault, field.TypeBool, value)
	}
	if value, ok := ptzu.mutation.UseAlert(); ok {
		_spec.SetField(plantimezone.FieldUseAlert, field.TypeBool, value)
	}
	if value, ok := ptzu.mutation.ScheduledAt(); ok {
		_spec.SetField(plantimezone.FieldScheduledAt, field.TypeTime, value)
	}
	if ptzu.mutation.ScheduledAtCleared() {
		_spec.ClearField(plantimezone.FieldScheduledAt, field.TypeTime)
	}
	if value, ok := ptzu.mutation.CreatedAt(); ok {
		_spec.SetField(plantimezone.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := ptzu.mutation.UpdatedAt(); ok {
		_spec.SetField(plantimezone.FieldUpdatedAt, field.TypeTime, value)
	}
	if ptzu.mutation.UpdatedAtCleared() {
		_spec.ClearField(plantimezone.FieldUpdatedAt, field.TypeTime)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ptzu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{plantimezone.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ptzu.mutation.done = true
	return n, nil
}

// PlanTimeZoneUpdateOne is the builder for updating a single PlanTimeZone entity.
type PlanTimeZoneUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PlanTimeZoneMutation
}

// SetUserID sets the "user_id" field.
func (ptzuo *PlanTimeZoneUpdateOne) SetUserID(u uuid.UUID) *PlanTimeZoneUpdateOne {
	ptzuo.mutation.SetUserID(u)
	return ptzuo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (ptzuo *PlanTimeZoneUpdateOne) SetNillableUserID(u *uuid.UUID) *PlanTimeZoneUpdateOne {
	if u != nil {
		ptzuo.SetUserID(*u)
	}
	return ptzuo
}

// SetTimezoneName sets the "timezone_name" field.
func (ptzuo *PlanTimeZoneUpdateOne) SetTimezoneName(s string) *PlanTimeZoneUpdateOne {
	ptzuo.mutation.SetTimezoneName(s)
	return ptzuo
}

// SetNillableTimezoneName sets the "timezone_name" field if the given value is not nil.
func (ptzuo *PlanTimeZoneUpdateOne) SetNillableTimezoneName(s *string) *PlanTimeZoneUpdateOne {
	if s != nil {
		ptzuo.SetTimezoneName(*s)
	}
	return ptzuo
}

// ClearTimezoneName clears the value of the "timezone_name" field.
func (ptzuo *PlanTimeZoneUpdateOne) ClearTimezoneName() *PlanTimeZoneUpdateOne {
	ptzuo.mutation.ClearTimezoneName()
	return ptzuo
}

// SetIsDefault sets the "is_default" field.
func (ptzuo *PlanTimeZoneUpdateOne) SetIsDefault(b bool) *PlanTimeZoneUpdateOne {
	ptzuo.mutation.SetIsDefault(b)
	return ptzuo
}

// SetNillableIsDefault sets the "is_default" field if the given value is not nil.
func (ptzuo *PlanTimeZoneUpdateOne) SetNillableIsDefault(b *bool) *PlanTimeZoneUpdateOne {
	if b != nil {
		ptzuo.SetIsDefault(*b)
	}
	return ptzuo
}

// SetUseAlert sets the "use_alert" field.
func (ptzuo *PlanTimeZoneUpdateOne) SetUseAlert(b bool) *PlanTimeZoneUpdateOne {
	ptzuo.mutation.SetUseAlert(b)
	return ptzuo
}

// SetNillableUseAlert sets the "use_alert" field if the given value is not nil.
func (ptzuo *PlanTimeZoneUpdateOne) SetNillableUseAlert(b *bool) *PlanTimeZoneUpdateOne {
	if b != nil {
		ptzuo.SetUseAlert(*b)
	}
	return ptzuo
}

// SetScheduledAt sets the "scheduled_at" field.
func (ptzuo *PlanTimeZoneUpdateOne) SetScheduledAt(t time.Time) *PlanTimeZoneUpdateOne {
	ptzuo.mutation.SetScheduledAt(t)
	return ptzuo
}

// SetNillableScheduledAt sets the "scheduled_at" field if the given value is not nil.
func (ptzuo *PlanTimeZoneUpdateOne) SetNillableScheduledAt(t *time.Time) *PlanTimeZoneUpdateOne {
	if t != nil {
		ptzuo.SetScheduledAt(*t)
	}
	return ptzuo
}

// ClearScheduledAt clears the value of the "scheduled_at" field.
func (ptzuo *PlanTimeZoneUpdateOne) ClearScheduledAt() *PlanTimeZoneUpdateOne {
	ptzuo.mutation.ClearScheduledAt()
	return ptzuo
}

// SetCreatedAt sets the "created_at" field.
func (ptzuo *PlanTimeZoneUpdateOne) SetCreatedAt(t time.Time) *PlanTimeZoneUpdateOne {
	ptzuo.mutation.SetCreatedAt(t)
	return ptzuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ptzuo *PlanTimeZoneUpdateOne) SetNillableCreatedAt(t *time.Time) *PlanTimeZoneUpdateOne {
	if t != nil {
		ptzuo.SetCreatedAt(*t)
	}
	return ptzuo
}

// SetUpdatedAt sets the "updated_at" field.
func (ptzuo *PlanTimeZoneUpdateOne) SetUpdatedAt(t time.Time) *PlanTimeZoneUpdateOne {
	ptzuo.mutation.SetUpdatedAt(t)
	return ptzuo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ptzuo *PlanTimeZoneUpdateOne) SetNillableUpdatedAt(t *time.Time) *PlanTimeZoneUpdateOne {
	if t != nil {
		ptzuo.SetUpdatedAt(*t)
	}
	return ptzuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (ptzuo *PlanTimeZoneUpdateOne) ClearUpdatedAt() *PlanTimeZoneUpdateOne {
	ptzuo.mutation.ClearUpdatedAt()
	return ptzuo
}

// Mutation returns the PlanTimeZoneMutation object of the builder.
func (ptzuo *PlanTimeZoneUpdateOne) Mutation() *PlanTimeZoneMutation {
	return ptzuo.mutation
}

// Where appends a list predicates to the PlanTimeZoneUpdate builder.
func (ptzuo *PlanTimeZoneUpdateOne) Where(ps ...predicate.PlanTimeZone) *PlanTimeZoneUpdateOne {
	ptzuo.mutation.Where(ps...)
	return ptzuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ptzuo *PlanTimeZoneUpdateOne) Select(field string, fields ...string) *PlanTimeZoneUpdateOne {
	ptzuo.fields = append([]string{field}, fields...)
	return ptzuo
}

// Save executes the query and returns the updated PlanTimeZone entity.
func (ptzuo *PlanTimeZoneUpdateOne) Save(ctx context.Context) (*PlanTimeZone, error) {
	return withHooks(ctx, ptzuo.sqlSave, ptzuo.mutation, ptzuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ptzuo *PlanTimeZoneUpdateOne) SaveX(ctx context.Context) *PlanTimeZone {
	node, err := ptzuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ptzuo *PlanTimeZoneUpdateOne) Exec(ctx context.Context) error {
	_, err := ptzuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ptzuo *PlanTimeZoneUpdateOne) ExecX(ctx context.Context) {
	if err := ptzuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ptzuo *PlanTimeZoneUpdateOne) sqlSave(ctx context.Context) (_node *PlanTimeZone, err error) {
	_spec := sqlgraph.NewUpdateSpec(plantimezone.Table, plantimezone.Columns, sqlgraph.NewFieldSpec(plantimezone.FieldID, field.TypeUUID))
	id, ok := ptzuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "PlanTimeZone.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ptzuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, plantimezone.FieldID)
		for _, f := range fields {
			if !plantimezone.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != plantimezone.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ptzuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ptzuo.mutation.UserID(); ok {
		_spec.SetField(plantimezone.FieldUserID, field.TypeUUID, value)
	}
	if value, ok := ptzuo.mutation.TimezoneName(); ok {
		_spec.SetField(plantimezone.FieldTimezoneName, field.TypeString, value)
	}
	if ptzuo.mutation.TimezoneNameCleared() {
		_spec.ClearField(plantimezone.FieldTimezoneName, field.TypeString)
	}
	if value, ok := ptzuo.mutation.IsDefault(); ok {
		_spec.SetField(plantimezone.FieldIsDefault, field.TypeBool, value)
	}
	if value, ok := ptzuo.mutation.UseAlert(); ok {
		_spec.SetField(plantimezone.FieldUseAlert, field.TypeBool, value)
	}
	if value, ok := ptzuo.mutation.ScheduledAt(); ok {
		_spec.SetField(plantimezone.FieldScheduledAt, field.TypeTime, value)
	}
	if ptzuo.mutation.ScheduledAtCleared() {
		_spec.ClearField(plantimezone.FieldScheduledAt, field.TypeTime)
	}
	if value, ok := ptzuo.mutation.CreatedAt(); ok {
		_spec.SetField(plantimezone.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := ptzuo.mutation.UpdatedAt(); ok {
		_spec.SetField(plantimezone.FieldUpdatedAt, field.TypeTime, value)
	}
	if ptzuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(plantimezone.FieldUpdatedAt, field.TypeTime)
	}
	_node = &PlanTimeZone{config: ptzuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ptzuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{plantimezone.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ptzuo.mutation.done = true
	return _node, nil
}
