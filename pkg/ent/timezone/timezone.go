// Code generated by ent, DO NOT EDIT.

package timezone

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the timezone type in the database.
	Label = "time_zone"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// FieldTimezoneName holds the string denoting the timezone_name field in the database.
	FieldTimezoneName = "timezone_name"
	// FieldIsDefault holds the string denoting the is_default field in the database.
	FieldIsDefault = "is_default"
	// FieldMidday holds the string denoting the midday field in the database.
	FieldMidday = "midday"
	// FieldHour holds the string denoting the hour field in the database.
	FieldHour = "hour"
	// FieldMinute holds the string denoting the minute field in the database.
	FieldMinute = "minute"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// Table holds the table name of the timezone in the database.
	Table = "time_zones"
)

// Columns holds all SQL columns for timezone fields.
var Columns = []string{
	FieldID,
	FieldUserID,
	FieldTimezoneName,
	FieldIsDefault,
	FieldMidday,
	FieldHour,
	FieldMinute,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultIsDefault holds the default value on creation for the "is_default" field.
	DefaultIsDefault bool
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the TimeZone queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByUserID orders the results by the user_id field.
func ByUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserID, opts...).ToFunc()
}

// ByTimezoneName orders the results by the timezone_name field.
func ByTimezoneName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTimezoneName, opts...).ToFunc()
}

// ByIsDefault orders the results by the is_default field.
func ByIsDefault(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsDefault, opts...).ToFunc()
}

// ByMidday orders the results by the midday field.
func ByMidday(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMidday, opts...).ToFunc()
}

// ByHour orders the results by the hour field.
func ByHour(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHour, opts...).ToFunc()
}

// ByMinute orders the results by the minute field.
func ByMinute(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMinute, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}
