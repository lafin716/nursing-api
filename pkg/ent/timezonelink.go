// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"nursing_api/pkg/ent/timezonelink"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// TimeZoneLink is the model entity for the TimeZoneLink schema.
type TimeZoneLink struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// PrescriptionID holds the value of the "prescription_id" field.
	PrescriptionID uuid.UUID `json:"prescription_id,omitempty"`
	// TimezoneID holds the value of the "timezone_id" field.
	TimezoneID uuid.UUID `json:"timezone_id,omitempty"`
	// TimezoneName holds the value of the "timezone_name" field.
	TimezoneName string `json:"timezone_name,omitempty"`
	// UseAlert holds the value of the "use_alert" field.
	UseAlert bool `json:"use_alert,omitempty"`
	// Midday holds the value of the "midday" field.
	Midday string `json:"midday,omitempty"`
	// Hour holds the value of the "hour" field.
	Hour string `json:"hour,omitempty"`
	// Minute holds the value of the "minute" field.
	Minute string `json:"minute,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt    time.Time `json:"updated_at,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TimeZoneLink) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case timezonelink.FieldUseAlert:
			values[i] = new(sql.NullBool)
		case timezonelink.FieldTimezoneName, timezonelink.FieldMidday, timezonelink.FieldHour, timezonelink.FieldMinute:
			values[i] = new(sql.NullString)
		case timezonelink.FieldCreatedAt, timezonelink.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case timezonelink.FieldID, timezonelink.FieldPrescriptionID, timezonelink.FieldTimezoneID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TimeZoneLink fields.
func (tzl *TimeZoneLink) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case timezonelink.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				tzl.ID = *value
			}
		case timezonelink.FieldPrescriptionID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field prescription_id", values[i])
			} else if value != nil {
				tzl.PrescriptionID = *value
			}
		case timezonelink.FieldTimezoneID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field timezone_id", values[i])
			} else if value != nil {
				tzl.TimezoneID = *value
			}
		case timezonelink.FieldTimezoneName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field timezone_name", values[i])
			} else if value.Valid {
				tzl.TimezoneName = value.String
			}
		case timezonelink.FieldUseAlert:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field use_alert", values[i])
			} else if value.Valid {
				tzl.UseAlert = value.Bool
			}
		case timezonelink.FieldMidday:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field midday", values[i])
			} else if value.Valid {
				tzl.Midday = value.String
			}
		case timezonelink.FieldHour:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field hour", values[i])
			} else if value.Valid {
				tzl.Hour = value.String
			}
		case timezonelink.FieldMinute:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field minute", values[i])
			} else if value.Valid {
				tzl.Minute = value.String
			}
		case timezonelink.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				tzl.CreatedAt = value.Time
			}
		case timezonelink.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				tzl.UpdatedAt = value.Time
			}
		default:
			tzl.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the TimeZoneLink.
// This includes values selected through modifiers, order, etc.
func (tzl *TimeZoneLink) Value(name string) (ent.Value, error) {
	return tzl.selectValues.Get(name)
}

// Update returns a builder for updating this TimeZoneLink.
// Note that you need to call TimeZoneLink.Unwrap() before calling this method if this TimeZoneLink
// was returned from a transaction, and the transaction was committed or rolled back.
func (tzl *TimeZoneLink) Update() *TimeZoneLinkUpdateOne {
	return NewTimeZoneLinkClient(tzl.config).UpdateOne(tzl)
}

// Unwrap unwraps the TimeZoneLink entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (tzl *TimeZoneLink) Unwrap() *TimeZoneLink {
	_tx, ok := tzl.config.driver.(*txDriver)
	if !ok {
		panic("ent: TimeZoneLink is not a transactional entity")
	}
	tzl.config.driver = _tx.drv
	return tzl
}

// String implements the fmt.Stringer.
func (tzl *TimeZoneLink) String() string {
	var builder strings.Builder
	builder.WriteString("TimeZoneLink(")
	builder.WriteString(fmt.Sprintf("id=%v, ", tzl.ID))
	builder.WriteString("prescription_id=")
	builder.WriteString(fmt.Sprintf("%v", tzl.PrescriptionID))
	builder.WriteString(", ")
	builder.WriteString("timezone_id=")
	builder.WriteString(fmt.Sprintf("%v", tzl.TimezoneID))
	builder.WriteString(", ")
	builder.WriteString("timezone_name=")
	builder.WriteString(tzl.TimezoneName)
	builder.WriteString(", ")
	builder.WriteString("use_alert=")
	builder.WriteString(fmt.Sprintf("%v", tzl.UseAlert))
	builder.WriteString(", ")
	builder.WriteString("midday=")
	builder.WriteString(tzl.Midday)
	builder.WriteString(", ")
	builder.WriteString("hour=")
	builder.WriteString(tzl.Hour)
	builder.WriteString(", ")
	builder.WriteString("minute=")
	builder.WriteString(tzl.Minute)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(tzl.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(tzl.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// TimeZoneLinks is a parsable slice of TimeZoneLink.
type TimeZoneLinks []*TimeZoneLink
