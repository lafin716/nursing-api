// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"nursing_api/pkg/ent/plantimezone"
	"nursing_api/pkg/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PlanTimeZoneDelete is the builder for deleting a PlanTimeZone entity.
type PlanTimeZoneDelete struct {
	config
	hooks    []Hook
	mutation *PlanTimeZoneMutation
}

// Where appends a list predicates to the PlanTimeZoneDelete builder.
func (ptzd *PlanTimeZoneDelete) Where(ps ...predicate.PlanTimeZone) *PlanTimeZoneDelete {
	ptzd.mutation.Where(ps...)
	return ptzd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (ptzd *PlanTimeZoneDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, ptzd.sqlExec, ptzd.mutation, ptzd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (ptzd *PlanTimeZoneDelete) ExecX(ctx context.Context) int {
	n, err := ptzd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (ptzd *PlanTimeZoneDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(plantimezone.Table, sqlgraph.NewFieldSpec(plantimezone.FieldID, field.TypeUUID))
	if ps := ptzd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, ptzd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	ptzd.mutation.done = true
	return affected, err
}

// PlanTimeZoneDeleteOne is the builder for deleting a single PlanTimeZone entity.
type PlanTimeZoneDeleteOne struct {
	ptzd *PlanTimeZoneDelete
}

// Where appends a list predicates to the PlanTimeZoneDelete builder.
func (ptzdo *PlanTimeZoneDeleteOne) Where(ps ...predicate.PlanTimeZone) *PlanTimeZoneDeleteOne {
	ptzdo.ptzd.mutation.Where(ps...)
	return ptzdo
}

// Exec executes the deletion query.
func (ptzdo *PlanTimeZoneDeleteOne) Exec(ctx context.Context) error {
	n, err := ptzdo.ptzd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{plantimezone.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (ptzdo *PlanTimeZoneDeleteOne) ExecX(ctx context.Context) {
	if err := ptzdo.Exec(ctx); err != nil {
		panic(err)
	}
}
