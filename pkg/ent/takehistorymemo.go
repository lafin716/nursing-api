// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"nursing_api/pkg/ent/takehistorymemo"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// TakeHistoryMemo is the model entity for the TakeHistoryMemo schema.
type TakeHistoryMemo struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID uuid.UUID `json:"user_id,omitempty"`
	// TimezoneID holds the value of the "timezone_id" field.
	TimezoneID uuid.UUID `json:"timezone_id,omitempty"`
	// TakeDate holds the value of the "take_date" field.
	TakeDate string `json:"take_date,omitempty"`
	// Memo holds the value of the "memo" field.
	Memo string `json:"memo,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt    time.Time `json:"updated_at,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TakeHistoryMemo) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case takehistorymemo.FieldTakeDate, takehistorymemo.FieldMemo:
			values[i] = new(sql.NullString)
		case takehistorymemo.FieldCreatedAt, takehistorymemo.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case takehistorymemo.FieldID, takehistorymemo.FieldUserID, takehistorymemo.FieldTimezoneID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TakeHistoryMemo fields.
func (thm *TakeHistoryMemo) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case takehistorymemo.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				thm.ID = *value
			}
		case takehistorymemo.FieldUserID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value != nil {
				thm.UserID = *value
			}
		case takehistorymemo.FieldTimezoneID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field timezone_id", values[i])
			} else if value != nil {
				thm.TimezoneID = *value
			}
		case takehistorymemo.FieldTakeDate:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field take_date", values[i])
			} else if value.Valid {
				thm.TakeDate = value.String
			}
		case takehistorymemo.FieldMemo:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field memo", values[i])
			} else if value.Valid {
				thm.Memo = value.String
			}
		case takehistorymemo.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				thm.CreatedAt = value.Time
			}
		case takehistorymemo.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				thm.UpdatedAt = value.Time
			}
		default:
			thm.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the TakeHistoryMemo.
// This includes values selected through modifiers, order, etc.
func (thm *TakeHistoryMemo) Value(name string) (ent.Value, error) {
	return thm.selectValues.Get(name)
}

// Update returns a builder for updating this TakeHistoryMemo.
// Note that you need to call TakeHistoryMemo.Unwrap() before calling this method if this TakeHistoryMemo
// was returned from a transaction, and the transaction was committed or rolled back.
func (thm *TakeHistoryMemo) Update() *TakeHistoryMemoUpdateOne {
	return NewTakeHistoryMemoClient(thm.config).UpdateOne(thm)
}

// Unwrap unwraps the TakeHistoryMemo entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (thm *TakeHistoryMemo) Unwrap() *TakeHistoryMemo {
	_tx, ok := thm.config.driver.(*txDriver)
	if !ok {
		panic("ent: TakeHistoryMemo is not a transactional entity")
	}
	thm.config.driver = _tx.drv
	return thm
}

// String implements the fmt.Stringer.
func (thm *TakeHistoryMemo) String() string {
	var builder strings.Builder
	builder.WriteString("TakeHistoryMemo(")
	builder.WriteString(fmt.Sprintf("id=%v, ", thm.ID))
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", thm.UserID))
	builder.WriteString(", ")
	builder.WriteString("timezone_id=")
	builder.WriteString(fmt.Sprintf("%v", thm.TimezoneID))
	builder.WriteString(", ")
	builder.WriteString("take_date=")
	builder.WriteString(thm.TakeDate)
	builder.WriteString(", ")
	builder.WriteString("memo=")
	builder.WriteString(thm.Memo)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(thm.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(thm.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// TakeHistoryMemos is a parsable slice of TakeHistoryMemo.
type TakeHistoryMemos []*TakeHistoryMemo
