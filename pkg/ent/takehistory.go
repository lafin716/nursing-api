// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"nursing_api/pkg/ent/takehistory"
	"nursing_api/pkg/ent/timezone"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// TakeHistory is the model entity for the TakeHistory schema.
type TakeHistory struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID uuid.UUID `json:"user_id,omitempty"`
	// TimezoneID holds the value of the "timezone_id" field.
	TimezoneID uuid.UUID `json:"timezone_id,omitempty"`
	// TakeDate holds the value of the "take_date" field.
	TakeDate time.Time `json:"take_date,omitempty"`
	// TakeStatus holds the value of the "take_status" field.
	TakeStatus string `json:"take_status,omitempty"`
	// Memo holds the value of the "memo" field.
	Memo string `json:"memo,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TakeHistoryQuery when eager-loading is set.
	Edges        TakeHistoryEdges `json:"edges"`
	selectValues sql.SelectValues
}

// TakeHistoryEdges holds the relations/edges for other nodes in the graph.
type TakeHistoryEdges struct {
	// Timezone holds the value of the timezone edge.
	Timezone *TimeZone `json:"timezone,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// TimezoneOrErr returns the Timezone value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TakeHistoryEdges) TimezoneOrErr() (*TimeZone, error) {
	if e.loadedTypes[0] {
		if e.Timezone == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: timezone.Label}
		}
		return e.Timezone, nil
	}
	return nil, &NotLoadedError{edge: "timezone"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TakeHistory) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case takehistory.FieldTakeStatus, takehistory.FieldMemo:
			values[i] = new(sql.NullString)
		case takehistory.FieldTakeDate, takehistory.FieldCreatedAt, takehistory.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case takehistory.FieldID, takehistory.FieldUserID, takehistory.FieldTimezoneID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TakeHistory fields.
func (th *TakeHistory) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case takehistory.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				th.ID = *value
			}
		case takehistory.FieldUserID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value != nil {
				th.UserID = *value
			}
		case takehistory.FieldTimezoneID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field timezone_id", values[i])
			} else if value != nil {
				th.TimezoneID = *value
			}
		case takehistory.FieldTakeDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field take_date", values[i])
			} else if value.Valid {
				th.TakeDate = value.Time
			}
		case takehistory.FieldTakeStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field take_status", values[i])
			} else if value.Valid {
				th.TakeStatus = value.String
			}
		case takehistory.FieldMemo:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field memo", values[i])
			} else if value.Valid {
				th.Memo = value.String
			}
		case takehistory.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				th.CreatedAt = value.Time
			}
		case takehistory.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				th.UpdatedAt = value.Time
			}
		default:
			th.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the TakeHistory.
// This includes values selected through modifiers, order, etc.
func (th *TakeHistory) Value(name string) (ent.Value, error) {
	return th.selectValues.Get(name)
}

// QueryTimezone queries the "timezone" edge of the TakeHistory entity.
func (th *TakeHistory) QueryTimezone() *TimeZoneQuery {
	return NewTakeHistoryClient(th.config).QueryTimezone(th)
}

// Update returns a builder for updating this TakeHistory.
// Note that you need to call TakeHistory.Unwrap() before calling this method if this TakeHistory
// was returned from a transaction, and the transaction was committed or rolled back.
func (th *TakeHistory) Update() *TakeHistoryUpdateOne {
	return NewTakeHistoryClient(th.config).UpdateOne(th)
}

// Unwrap unwraps the TakeHistory entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (th *TakeHistory) Unwrap() *TakeHistory {
	_tx, ok := th.config.driver.(*txDriver)
	if !ok {
		panic("ent: TakeHistory is not a transactional entity")
	}
	th.config.driver = _tx.drv
	return th
}

// String implements the fmt.Stringer.
func (th *TakeHistory) String() string {
	var builder strings.Builder
	builder.WriteString("TakeHistory(")
	builder.WriteString(fmt.Sprintf("id=%v, ", th.ID))
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", th.UserID))
	builder.WriteString(", ")
	builder.WriteString("timezone_id=")
	builder.WriteString(fmt.Sprintf("%v", th.TimezoneID))
	builder.WriteString(", ")
	builder.WriteString("take_date=")
	builder.WriteString(th.TakeDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("take_status=")
	builder.WriteString(th.TakeStatus)
	builder.WriteString(", ")
	builder.WriteString("memo=")
	builder.WriteString(th.Memo)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(th.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(th.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// TakeHistories is a parsable slice of TakeHistory.
type TakeHistories []*TakeHistory
