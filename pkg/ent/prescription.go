// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"nursing_api/pkg/ent/prescription"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// Prescription is the model entity for the Prescription schema.
type Prescription struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID uuid.UUID `json:"user_id,omitempty"`
	// PrescriptionName holds the value of the "prescription_name" field.
	PrescriptionName string `json:"prescription_name,omitempty"`
	// HospitalName holds the value of the "hospital_name" field.
	HospitalName string `json:"hospital_name,omitempty"`
	// TakeDays holds the value of the "take_days" field.
	TakeDays int `json:"take_days,omitempty"`
	// StartedAt holds the value of the "started_at" field.
	StartedAt time.Time `json:"started_at,omitempty"`
	// FinishedAt holds the value of the "finished_at" field.
	FinishedAt time.Time `json:"finished_at,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PrescriptionQuery when eager-loading is set.
	Edges        PrescriptionEdges `json:"edges"`
	selectValues sql.SelectValues
}

// PrescriptionEdges holds the relations/edges for other nodes in the graph.
type PrescriptionEdges struct {
	// PrescriptionItems holds the value of the prescription_items edge.
	PrescriptionItems []*PrescriptionItem `json:"prescription_items,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// PrescriptionItemsOrErr returns the PrescriptionItems value or an error if the edge
// was not loaded in eager-loading.
func (e PrescriptionEdges) PrescriptionItemsOrErr() ([]*PrescriptionItem, error) {
	if e.loadedTypes[0] {
		return e.PrescriptionItems, nil
	}
	return nil, &NotLoadedError{edge: "prescription_items"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Prescription) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case prescription.FieldTakeDays:
			values[i] = new(sql.NullInt64)
		case prescription.FieldPrescriptionName, prescription.FieldHospitalName:
			values[i] = new(sql.NullString)
		case prescription.FieldStartedAt, prescription.FieldFinishedAt, prescription.FieldCreatedAt, prescription.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case prescription.FieldID, prescription.FieldUserID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Prescription fields.
func (pr *Prescription) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case prescription.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				pr.ID = *value
			}
		case prescription.FieldUserID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value != nil {
				pr.UserID = *value
			}
		case prescription.FieldPrescriptionName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field prescription_name", values[i])
			} else if value.Valid {
				pr.PrescriptionName = value.String
			}
		case prescription.FieldHospitalName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field hospital_name", values[i])
			} else if value.Valid {
				pr.HospitalName = value.String
			}
		case prescription.FieldTakeDays:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field take_days", values[i])
			} else if value.Valid {
				pr.TakeDays = int(value.Int64)
			}
		case prescription.FieldStartedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field started_at", values[i])
			} else if value.Valid {
				pr.StartedAt = value.Time
			}
		case prescription.FieldFinishedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field finished_at", values[i])
			} else if value.Valid {
				pr.FinishedAt = value.Time
			}
		case prescription.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				pr.CreatedAt = value.Time
			}
		case prescription.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				pr.UpdatedAt = value.Time
			}
		default:
			pr.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Prescription.
// This includes values selected through modifiers, order, etc.
func (pr *Prescription) Value(name string) (ent.Value, error) {
	return pr.selectValues.Get(name)
}

// QueryPrescriptionItems queries the "prescription_items" edge of the Prescription entity.
func (pr *Prescription) QueryPrescriptionItems() *PrescriptionItemQuery {
	return NewPrescriptionClient(pr.config).QueryPrescriptionItems(pr)
}

// Update returns a builder for updating this Prescription.
// Note that you need to call Prescription.Unwrap() before calling this method if this Prescription
// was returned from a transaction, and the transaction was committed or rolled back.
func (pr *Prescription) Update() *PrescriptionUpdateOne {
	return NewPrescriptionClient(pr.config).UpdateOne(pr)
}

// Unwrap unwraps the Prescription entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pr *Prescription) Unwrap() *Prescription {
	_tx, ok := pr.config.driver.(*txDriver)
	if !ok {
		panic("ent: Prescription is not a transactional entity")
	}
	pr.config.driver = _tx.drv
	return pr
}

// String implements the fmt.Stringer.
func (pr *Prescription) String() string {
	var builder strings.Builder
	builder.WriteString("Prescription(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pr.ID))
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", pr.UserID))
	builder.WriteString(", ")
	builder.WriteString("prescription_name=")
	builder.WriteString(pr.PrescriptionName)
	builder.WriteString(", ")
	builder.WriteString("hospital_name=")
	builder.WriteString(pr.HospitalName)
	builder.WriteString(", ")
	builder.WriteString("take_days=")
	builder.WriteString(fmt.Sprintf("%v", pr.TakeDays))
	builder.WriteString(", ")
	builder.WriteString("started_at=")
	builder.WriteString(pr.StartedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("finished_at=")
	builder.WriteString(pr.FinishedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(pr.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(pr.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Prescriptions is a parsable slice of Prescription.
type Prescriptions []*Prescription
