// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"nursing_api/pkg/ent/medicine"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// Medicine is the model entity for the Medicine schema.
type Medicine struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// MedicineName holds the value of the "medicine_name" field.
	MedicineName string `json:"medicine_name,omitempty"`
	// ItemSeq holds the value of the "item_seq" field.
	ItemSeq string `json:"item_seq,omitempty"`
	// CompanyName holds the value of the "company_name" field.
	CompanyName string `json:"company_name,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// Usage holds the value of the "usage" field.
	Usage string `json:"usage,omitempty"`
	// Effect holds the value of the "effect" field.
	Effect string `json:"effect,omitempty"`
	// SideEffect holds the value of the "side_effect" field.
	SideEffect string `json:"side_effect,omitempty"`
	// Caution holds the value of the "caution" field.
	Caution string `json:"caution,omitempty"`
	// Warning holds the value of the "warning" field.
	Warning string `json:"warning,omitempty"`
	// Interaction holds the value of the "interaction" field.
	Interaction string `json:"interaction,omitempty"`
	// KeepMethod holds the value of the "keep_method" field.
	KeepMethod string `json:"keep_method,omitempty"`
	// Appearance holds the value of the "appearance" field.
	Appearance string `json:"appearance,omitempty"`
	// ColorClass1 holds the value of the "color_class1" field.
	ColorClass1 string `json:"color_class1,omitempty"`
	// ColorClass2 holds the value of the "color_class2" field.
	ColorClass2 string `json:"color_class2,omitempty"`
	// PillImage holds the value of the "pill_image" field.
	PillImage string `json:"pill_image,omitempty"`
	// ClassName holds the value of the "class_name" field.
	ClassName string `json:"class_name,omitempty"`
	// OtcName holds the value of the "otc_name" field.
	OtcName string `json:"otc_name,omitempty"`
	// FormCodeName holds the value of the "form_code_name" field.
	FormCodeName string `json:"form_code_name,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt    time.Time `json:"updated_at,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Medicine) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case medicine.FieldMedicineName, medicine.FieldItemSeq, medicine.FieldCompanyName, medicine.FieldDescription, medicine.FieldUsage, medicine.FieldEffect, medicine.FieldSideEffect, medicine.FieldCaution, medicine.FieldWarning, medicine.FieldInteraction, medicine.FieldKeepMethod, medicine.FieldAppearance, medicine.FieldColorClass1, medicine.FieldColorClass2, medicine.FieldPillImage, medicine.FieldClassName, medicine.FieldOtcName, medicine.FieldFormCodeName:
			values[i] = new(sql.NullString)
		case medicine.FieldCreatedAt, medicine.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case medicine.FieldID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Medicine fields.
func (m *Medicine) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case medicine.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				m.ID = *value
			}
		case medicine.FieldMedicineName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field medicine_name", values[i])
			} else if value.Valid {
				m.MedicineName = value.String
			}
		case medicine.FieldItemSeq:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field item_seq", values[i])
			} else if value.Valid {
				m.ItemSeq = value.String
			}
		case medicine.FieldCompanyName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field company_name", values[i])
			} else if value.Valid {
				m.CompanyName = value.String
			}
		case medicine.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				m.Description = value.String
			}
		case medicine.FieldUsage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field usage", values[i])
			} else if value.Valid {
				m.Usage = value.String
			}
		case medicine.FieldEffect:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field effect", values[i])
			} else if value.Valid {
				m.Effect = value.String
			}
		case medicine.FieldSideEffect:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field side_effect", values[i])
			} else if value.Valid {
				m.SideEffect = value.String
			}
		case medicine.FieldCaution:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field caution", values[i])
			} else if value.Valid {
				m.Caution = value.String
			}
		case medicine.FieldWarning:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field warning", values[i])
			} else if value.Valid {
				m.Warning = value.String
			}
		case medicine.FieldInteraction:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field interaction", values[i])
			} else if value.Valid {
				m.Interaction = value.String
			}
		case medicine.FieldKeepMethod:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field keep_method", values[i])
			} else if value.Valid {
				m.KeepMethod = value.String
			}
		case medicine.FieldAppearance:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field appearance", values[i])
			} else if value.Valid {
				m.Appearance = value.String
			}
		case medicine.FieldColorClass1:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field color_class1", values[i])
			} else if value.Valid {
				m.ColorClass1 = value.String
			}
		case medicine.FieldColorClass2:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field color_class2", values[i])
			} else if value.Valid {
				m.ColorClass2 = value.String
			}
		case medicine.FieldPillImage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field pill_image", values[i])
			} else if value.Valid {
				m.PillImage = value.String
			}
		case medicine.FieldClassName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field class_name", values[i])
			} else if value.Valid {
				m.ClassName = value.String
			}
		case medicine.FieldOtcName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field otc_name", values[i])
			} else if value.Valid {
				m.OtcName = value.String
			}
		case medicine.FieldFormCodeName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field form_code_name", values[i])
			} else if value.Valid {
				m.FormCodeName = value.String
			}
		case medicine.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				m.CreatedAt = value.Time
			}
		case medicine.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				m.UpdatedAt = value.Time
			}
		default:
			m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Medicine.
// This includes values selected through modifiers, order, etc.
func (m *Medicine) Value(name string) (ent.Value, error) {
	return m.selectValues.Get(name)
}

// Update returns a builder for updating this Medicine.
// Note that you need to call Medicine.Unwrap() before calling this method if this Medicine
// was returned from a transaction, and the transaction was committed or rolled back.
func (m *Medicine) Update() *MedicineUpdateOne {
	return NewMedicineClient(m.config).UpdateOne(m)
}

// Unwrap unwraps the Medicine entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (m *Medicine) Unwrap() *Medicine {
	_tx, ok := m.config.driver.(*txDriver)
	if !ok {
		panic("ent: Medicine is not a transactional entity")
	}
	m.config.driver = _tx.drv
	return m
}

// String implements the fmt.Stringer.
func (m *Medicine) String() string {
	var builder strings.Builder
	builder.WriteString("Medicine(")
	builder.WriteString(fmt.Sprintf("id=%v, ", m.ID))
	builder.WriteString("medicine_name=")
	builder.WriteString(m.MedicineName)
	builder.WriteString(", ")
	builder.WriteString("item_seq=")
	builder.WriteString(m.ItemSeq)
	builder.WriteString(", ")
	builder.WriteString("company_name=")
	builder.WriteString(m.CompanyName)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(m.Description)
	builder.WriteString(", ")
	builder.WriteString("usage=")
	builder.WriteString(m.Usage)
	builder.WriteString(", ")
	builder.WriteString("effect=")
	builder.WriteString(m.Effect)
	builder.WriteString(", ")
	builder.WriteString("side_effect=")
	builder.WriteString(m.SideEffect)
	builder.WriteString(", ")
	builder.WriteString("caution=")
	builder.WriteString(m.Caution)
	builder.WriteString(", ")
	builder.WriteString("warning=")
	builder.WriteString(m.Warning)
	builder.WriteString(", ")
	builder.WriteString("interaction=")
	builder.WriteString(m.Interaction)
	builder.WriteString(", ")
	builder.WriteString("keep_method=")
	builder.WriteString(m.KeepMethod)
	builder.WriteString(", ")
	builder.WriteString("appearance=")
	builder.WriteString(m.Appearance)
	builder.WriteString(", ")
	builder.WriteString("color_class1=")
	builder.WriteString(m.ColorClass1)
	builder.WriteString(", ")
	builder.WriteString("color_class2=")
	builder.WriteString(m.ColorClass2)
	builder.WriteString(", ")
	builder.WriteString("pill_image=")
	builder.WriteString(m.PillImage)
	builder.WriteString(", ")
	builder.WriteString("class_name=")
	builder.WriteString(m.ClassName)
	builder.WriteString(", ")
	builder.WriteString("otc_name=")
	builder.WriteString(m.OtcName)
	builder.WriteString(", ")
	builder.WriteString("form_code_name=")
	builder.WriteString(m.FormCodeName)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(m.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(m.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Medicines is a parsable slice of Medicine.
type Medicines []*Medicine
