// Code generated by ent, DO NOT EDIT.

package prescriptionitem

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the prescriptionitem type in the database.
	Label = "prescription_item"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// FieldPrescriptionID holds the string denoting the prescription_id field in the database.
	FieldPrescriptionID = "prescription_id"
	// FieldTimezoneID holds the string denoting the timezone_id field in the database.
	FieldTimezoneID = "timezone_id"
	// FieldMedicineID holds the string denoting the medicine_id field in the database.
	FieldMedicineID = "medicine_id"
	// FieldMedicineName holds the string denoting the medicine_name field in the database.
	FieldMedicineName = "medicine_name"
	// FieldTimezoneName holds the string denoting the timezone_name field in the database.
	FieldTimezoneName = "timezone_name"
	// FieldMidday holds the string denoting the midday field in the database.
	FieldMidday = "midday"
	// FieldHour holds the string denoting the hour field in the database.
	FieldHour = "hour"
	// FieldMinute holds the string denoting the minute field in the database.
	FieldMinute = "minute"
	// FieldTotalAmount holds the string denoting the total_amount field in the database.
	FieldTotalAmount = "total_amount"
	// FieldRemainAmount holds the string denoting the remain_amount field in the database.
	FieldRemainAmount = "remain_amount"
	// FieldTakeAmount holds the string denoting the take_amount field in the database.
	FieldTakeAmount = "take_amount"
	// FieldMedicineUnit holds the string denoting the medicine_unit field in the database.
	FieldMedicineUnit = "medicine_unit"
	// FieldMemo holds the string denoting the memo field in the database.
	FieldMemo = "memo"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgePrescription holds the string denoting the prescription edge name in mutations.
	EdgePrescription = "prescription"
	// EdgeTakeHistoryItem holds the string denoting the take_history_item edge name in mutations.
	EdgeTakeHistoryItem = "take_history_item"
	// Table holds the table name of the prescriptionitem in the database.
	Table = "prescription_items"
	// PrescriptionTable is the table that holds the prescription relation/edge.
	PrescriptionTable = "prescription_items"
	// PrescriptionInverseTable is the table name for the Prescription entity.
	// It exists in this package in order to avoid circular dependency with the "prescription" package.
	PrescriptionInverseTable = "prescriptions"
	// PrescriptionColumn is the table column denoting the prescription relation/edge.
	PrescriptionColumn = "prescription_id"
	// TakeHistoryItemTable is the table that holds the take_history_item relation/edge.
	TakeHistoryItemTable = "take_history_items"
	// TakeHistoryItemInverseTable is the table name for the TakeHistoryItem entity.
	// It exists in this package in order to avoid circular dependency with the "takehistoryitem" package.
	TakeHistoryItemInverseTable = "take_history_items"
	// TakeHistoryItemColumn is the table column denoting the take_history_item relation/edge.
	TakeHistoryItemColumn = "prescription_item_id"
)

// Columns holds all SQL columns for prescriptionitem fields.
var Columns = []string{
	FieldID,
	FieldUserID,
	FieldPrescriptionID,
	FieldTimezoneID,
	FieldMedicineID,
	FieldMedicineName,
	FieldTimezoneName,
	FieldMidday,
	FieldHour,
	FieldMinute,
	FieldTotalAmount,
	FieldRemainAmount,
	FieldTakeAmount,
	FieldMedicineUnit,
	FieldMemo,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultTotalAmount holds the default value on creation for the "total_amount" field.
	DefaultTotalAmount float64
	// DefaultRemainAmount holds the default value on creation for the "remain_amount" field.
	DefaultRemainAmount float64
	// DefaultTakeAmount holds the default value on creation for the "take_amount" field.
	DefaultTakeAmount float64
	// DefaultMedicineUnit holds the default value on creation for the "medicine_unit" field.
	DefaultMedicineUnit string
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the PrescriptionItem queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByUserID orders the results by the user_id field.
func ByUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserID, opts...).ToFunc()
}

// ByPrescriptionID orders the results by the prescription_id field.
func ByPrescriptionID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPrescriptionID, opts...).ToFunc()
}

// ByTimezoneID orders the results by the timezone_id field.
func ByTimezoneID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTimezoneID, opts...).ToFunc()
}

// ByMedicineID orders the results by the medicine_id field.
func ByMedicineID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMedicineID, opts...).ToFunc()
}

// ByMedicineName orders the results by the medicine_name field.
func ByMedicineName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMedicineName, opts...).ToFunc()
}

// ByTimezoneName orders the results by the timezone_name field.
func ByTimezoneName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTimezoneName, opts...).ToFunc()
}

// ByMidday orders the results by the midday field.
func ByMidday(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMidday, opts...).ToFunc()
}

// ByHour orders the results by the hour field.
func ByHour(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHour, opts...).ToFunc()
}

// ByMinute orders the results by the minute field.
func ByMinute(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMinute, opts...).ToFunc()
}

// ByTotalAmount orders the results by the total_amount field.
func ByTotalAmount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTotalAmount, opts...).ToFunc()
}

// ByRemainAmount orders the results by the remain_amount field.
func ByRemainAmount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRemainAmount, opts...).ToFunc()
}

// ByTakeAmount orders the results by the take_amount field.
func ByTakeAmount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTakeAmount, opts...).ToFunc()
}

// ByMedicineUnit orders the results by the medicine_unit field.
func ByMedicineUnit(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMedicineUnit, opts...).ToFunc()
}

// ByMemo orders the results by the memo field.
func ByMemo(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMemo, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByPrescriptionField orders the results by prescription field.
func ByPrescriptionField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPrescriptionStep(), sql.OrderByField(field, opts...))
	}
}

// ByTakeHistoryItemCount orders the results by take_history_item count.
func ByTakeHistoryItemCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newTakeHistoryItemStep(), opts...)
	}
}

// ByTakeHistoryItem orders the results by take_history_item terms.
func ByTakeHistoryItem(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTakeHistoryItemStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newPrescriptionStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PrescriptionInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, PrescriptionTable, PrescriptionColumn),
	)
}
func newTakeHistoryItemStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TakeHistoryItemInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, TakeHistoryItemTable, TakeHistoryItemColumn),
	)
}
