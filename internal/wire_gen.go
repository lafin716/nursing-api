// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package server

import (
	"github.com/gofiber/fiber/v2"
	"nursing_api/internal/api"
	"nursing_api/internal/config"
	"nursing_api/internal/infrastructure/persistence"
	"nursing_api/internal/router"
	"nursing_api/internal/service"
	"nursing_api/pkg/database"
	"nursing_api/pkg/ent"
	"nursing_api/pkg/jwt"
	"nursing_api/pkg/web"
)

// Injectors from server.go:

func New() (*Server, error) {
	fiberConfig := config.NewFiberConfig()
	jwtConfig := config.NewJwtConfig()
	jwtClient := jwt.NewJwtClient(jwtConfig)
	databaseConfig := config.NewDatabaseConfig()
	databaseClient := database.NewPostgresClient(databaseConfig)
	userRepository := persistence.NewUserRepository(databaseClient)
	userUseCase := service.NewUserService(userRepository)
	authUseCase := service.NewAuthService(userUseCase, jwtClient)
	authHttpApi := api.NewAuthHttpApi(authUseCase)
	authRouter := router.NewAuthRouter(authHttpApi)
	server := NewServer(fiberConfig, jwtClient, databaseClient, authRouter)
	return server, nil
}

// server.go:

type Server struct {
	app *fiber.App
	cfg *web.FiberConfig
	db  *ent.Client
}

func NewServer(
	cfg *web.FiberConfig,
	jwtClient *jwt.JwtClient,
	dbClient *database.DatabaseClient,
	authRouter router.AuthRouter,
) *Server {
	fiberClient := web.NewFiberClient(cfg)
	app := fiberClient.GetApp()
	api2 := app.Group("/api")
	v1 := api2.Group("/v1")
	authRouter.Init(&v1, jwtClient.Middleware)

	return &Server{
		app: app,
		cfg: cfg,
		db:  dbClient.Client,
	}
}

func (serv *Server) App() *fiber.App {
	return serv.app
}

func (serv *Server) Config() *web.FiberConfig {
	return serv.cfg
}

func (serv *Server) DB() *ent.Client {
	return serv.db
}
